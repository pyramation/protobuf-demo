// Code generated by protoc-gen-tstypes. DO NOT EDIT.

declare namespace google.api.servicemanagement.v1 {

    // The full representation of a Service that is managed by
    // Google Service Management.
    export interface ManagedService {
        // The name of the service. See the [overview](/service-management/overview)
        // for naming requirements.
        service_name?: string;
        // ID of the project that produces and owns this service.
        producer_project_id?: string;
    }

    export enum OperationMetadata_Status {
        STATUS_UNSPECIFIED = "STATUS_UNSPECIFIED",
        DONE = "DONE",
        NOT_STARTED = "NOT_STARTED",
        IN_PROGRESS = "IN_PROGRESS",
        FAILED = "FAILED",
        CANCELLED = "CANCELLED",
    }
    // Represents the status of one operation step.
    export interface OperationMetadata_Step {
        // The short description of the step.
        description?: string;
        // The status code.
        status?: OperationMetadata_Status;
    }

    // The metadata associated with a long running operation resource.
    export interface OperationMetadata {
        // The full name of the resources that this operation is directly
        // associated with.
        resource_names?: Array<string>;
        // Detailed status information for each step. The order is undetermined.
        steps?: Array<OperationMetadata_Step>;
        // Percentage of completion of this operation, ranging from 0 to 100.
        progress_percentage?: number;
        // The start time of the operation.
        start_time?: google.protobuf.Timestamp;
    }

    export enum Diagnostic_Kind {
        WARNING = "WARNING",
        ERROR = "ERROR",
    }
    // Represents a diagnostic message (error or warning)
    export interface Diagnostic {
        // File name and line number of the error or warning.
        location?: string;
        // The kind of diagnostic information provided.
        kind?: Diagnostic_Kind;
        // Message describing the error or warning.
        message?: string;
    }

    // Represents a source file which is used to generate the service configuration
    // defined by `google.api.Service`.
    export interface ConfigSource {
        // A unique ID for a specific instance of this message, typically assigned
        // by the client for tracking purpose. If empty, the server may choose to
        // generate one instead.
        id?: string;
        // Set of source configuration files that are used to generate a service
        // configuration (`google.api.Service`).
        files?: Array<ConfigFile>;
    }

    export enum ConfigFile_FileType {
        FILE_TYPE_UNSPECIFIED = "FILE_TYPE_UNSPECIFIED",
        SERVICE_CONFIG_YAML = "SERVICE_CONFIG_YAML",
        OPEN_API_JSON = "OPEN_API_JSON",
        OPEN_API_YAML = "OPEN_API_YAML",
        FILE_DESCRIPTOR_SET_PROTO = "FILE_DESCRIPTOR_SET_PROTO",
        PROTO_FILE = "PROTO_FILE",
    }
    // Generic specification of a source configuration file
    export interface ConfigFile {
        // The file name of the configuration file (full or relative path).
        file_path?: string;
        // The bytes that constitute the file.
        file_contents?: Uint8Array;
        // The type of configuration file this represents.
        file_type?: ConfigFile_FileType;
    }

    // Represents a service configuration with its name and id.
    export interface ConfigRef {
        // Resource name of a service config. It must have the following
        // format: "services/{service name}/configs/{config id}".
        name?: string;
    }

    // Change report associated with a particular service configuration.
    //
    // It contains a list of ConfigChanges based on the comparison between
    // two service configurations.
    export interface ChangeReport {
        // List of changes between two service configurations.
        // The changes will be alphabetically sorted based on the identifier
        // of each change.
        // A ConfigChange identifier is a dot separated path to the configuration.
        // Example: visibility.rules[selector='LibraryService.CreateBook'].restriction
        config_changes?: Array<google.api.ConfigChange>;
    }

    export enum Rollout_RolloutStatus {
        ROLLOUT_STATUS_UNSPECIFIED = "ROLLOUT_STATUS_UNSPECIFIED",
        IN_PROGRESS = "IN_PROGRESS",
        SUCCESS = "SUCCESS",
        CANCELLED = "CANCELLED",
        FAILED = "FAILED",
        PENDING = "PENDING",
        FAILED_ROLLED_BACK = "FAILED_ROLLED_BACK",
    }
    export interface Rollout_TrafficPercentStrategy_PercentagesEntry {
        key?: string;
        value?: number;
    }

    // Strategy that specifies how clients of Google Service Controller want to
    // send traffic to use different config versions. This is generally
    // used by API proxy to split traffic based on your configured percentage for
    // each config version.
    //
    // One example of how to gradually rollout a new service configuration using
    // this
    // strategy:
    // Day 1
    //
    //     Rollout {
    //       id: "example.googleapis.com/rollout_20160206"
    //       traffic_percent_strategy {
    //         percentages: {
    //           "example.googleapis.com/20160201": 70.00
    //           "example.googleapis.com/20160206": 30.00
    //         }
    //       }
    //     }
    //
    // Day 2
    //
    //     Rollout {
    //       id: "example.googleapis.com/rollout_20160207"
    //       traffic_percent_strategy: {
    //         percentages: {
    //           "example.googleapis.com/20160206": 100.00
    //         }
    //       }
    //     }
    export interface Rollout_TrafficPercentStrategy {
        // Maps service configuration IDs to their corresponding traffic percentage.
        // Key is the service configuration ID, Value is the traffic percentage
        // which must be greater than 0.0 and the sum must equal to 100.0.
        percentages?: { [key: string]: number };
    }

    // Strategy used to delete a service. This strategy is a placeholder only
    // used by the system generated rollout to delete a service.
    export interface Rollout_DeleteServiceStrategy {
    }

    // A rollout resource that defines how service configuration versions are pushed
    // to control plane systems. Typically, you create a new version of the
    // service config, and then create a Rollout to push the service config.
    export interface Rollout {
        // Optional. Unique identifier of this Rollout. Must be no longer than 63 characters
        // and only lower case letters, digits, '.', '_' and '-' are allowed.
        //
        // If not specified by client, the server will generate one. The generated id
        // will have the form of <date><revision number>, where "date" is the create
        // date in ISO 8601 format.  "revision number" is a monotonically increasing
        // positive number that is reset every day for each service.
        // An example of the generated rollout_id is '2016-02-16r1'
        rollout_id?: string;
        // Creation time of the rollout. Readonly.
        create_time?: google.protobuf.Timestamp;
        // The user who created the Rollout. Readonly.
        created_by?: string;
        // The status of this rollout. Readonly. In case of a failed rollout,
        // the system will automatically rollback to the current Rollout
        // version. Readonly.
        status?: Rollout_RolloutStatus;
        // Google Service Control selects service configurations based on
        // traffic percentage.
        traffic_percent_strategy?: Rollout_TrafficPercentStrategy;
        // The strategy associated with a rollout to delete a `ManagedService`.
        // Readonly.
        delete_service_strategy?: Rollout_DeleteServiceStrategy;
        // The name of the service associated with this Rollout.
        service_name?: string;
    }

}

