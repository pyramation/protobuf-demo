// Code generated by protoc-gen-tstypes. DO NOT EDIT.

declare namespace tendermint.types {

    export enum BlockIDFlag {
        BLOCK_ID_FLAG_UNKNOWN = "BLOCK_ID_FLAG_UNKNOWN",
        BLOCK_ID_FLAG_ABSENT = "BLOCK_ID_FLAG_ABSENT",
        BLOCK_ID_FLAG_COMMIT = "BLOCK_ID_FLAG_COMMIT",
        BLOCK_ID_FLAG_NIL = "BLOCK_ID_FLAG_NIL",
    }
    export enum SignedMsgType {
        SIGNED_MSG_TYPE_UNKNOWN = "SIGNED_MSG_TYPE_UNKNOWN",
        SIGNED_MSG_TYPE_PREVOTE = "SIGNED_MSG_TYPE_PREVOTE",
        SIGNED_MSG_TYPE_PRECOMMIT = "SIGNED_MSG_TYPE_PRECOMMIT",
        SIGNED_MSG_TYPE_PROPOSAL = "SIGNED_MSG_TYPE_PROPOSAL",
    }
    // PartsetHeader
    export interface PartSetHeader {
        total?: number;
        hash?: Uint8Array;
    }

    export interface Part {
        index?: number;
        bytes?: Uint8Array;
        proof?: tendermint.crypto.Proof;
    }

    // BlockID
    export interface BlockID {
        hash?: Uint8Array;
        part_set_header?: PartSetHeader;
    }

    // Header defines the structure of a Tendermint block header.
    export interface Header {
        // basic block info
        version?: tendermint.version.Consensus;
        chain_id?: string;
        height?: number;
        time?: google.protobuf.Timestamp;
        // prev block info
        last_block_id?: BlockID;
        // hashes of block data
        last_commit_hash?: Uint8Array; // commit from validators from the last block
        data_hash?: Uint8Array; // transactions
        // hashes from the app output from the prev block
        validators_hash?: Uint8Array; // validators for the current block
        next_validators_hash?: Uint8Array; // validators for the next block
        consensus_hash?: Uint8Array; // consensus params for current block
        app_hash?: Uint8Array; // state after txs from the previous block
        last_results_hash?: Uint8Array; // root hash of all results from the txs from the previous block
        // consensus info
        evidence_hash?: Uint8Array; // evidence included in the block
        proposer_address?: Uint8Array; // original proposer of the block
    }

    // Data contains the set of transactions included in the block
    export interface Data {
        // Txs that will be applied by state @ block.Height+1.
        // NOTE: not all txs here are valid.  We're just agreeing on the order first.
        // This means that block.AppHash does not include these txs.
        txs?: Array<Uint8Array>;
    }

    // Vote represents a prevote, precommit, or commit vote from validators for
    // consensus.
    export interface Vote {
        type?: SignedMsgType;
        height?: number;
        round?: number;
        block_id?: BlockID; // zero if vote is nil.
        timestamp?: google.protobuf.Timestamp;
        validator_address?: Uint8Array;
        validator_index?: number;
        signature?: Uint8Array;
    }

    // Commit contains the evidence that a block was committed by a set of validators.
    export interface Commit {
        height?: number;
        round?: number;
        block_id?: BlockID;
        signatures?: Array<CommitSig>;
    }

    // CommitSig is a part of the Vote included in a Commit.
    export interface CommitSig {
        block_id_flag?: BlockIDFlag;
        validator_address?: Uint8Array;
        timestamp?: google.protobuf.Timestamp;
        signature?: Uint8Array;
    }

    export interface Proposal {
        type?: SignedMsgType;
        height?: number;
        round?: number;
        pol_round?: number;
        block_id?: BlockID;
        timestamp?: google.protobuf.Timestamp;
        signature?: Uint8Array;
    }

    export interface SignedHeader {
        header?: Header;
        commit?: Commit;
    }

    export interface LightBlock {
        signed_header?: SignedHeader;
        validator_set?: ValidatorSet;
    }

    export interface BlockMeta {
        block_id?: BlockID;
        block_size?: number;
        header?: Header;
        num_txs?: number;
    }

    // TxProof represents a Merkle proof of the presence of a transaction in the Merkle tree.
    export interface TxProof {
        root_hash?: Uint8Array;
        data?: Uint8Array;
        proof?: tendermint.crypto.Proof;
    }

}

