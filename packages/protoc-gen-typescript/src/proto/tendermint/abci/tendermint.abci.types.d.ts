// Code generated by protoc-gen-tstypes. DO NOT EDIT.

declare namespace tendermint.abci {

    export enum CheckTxType {
        NEW = "NEW",
        RECHECK = "RECHECK",
    }
    export enum EvidenceType {
        UNKNOWN = "UNKNOWN",
        DUPLICATE_VOTE = "DUPLICATE_VOTE",
        LIGHT_CLIENT_ATTACK = "LIGHT_CLIENT_ATTACK",
    }
    export interface Request {
        echo?: RequestEcho;
        flush?: RequestFlush;
        info?: RequestInfo;
        set_option?: RequestSetOption;
        init_chain?: RequestInitChain;
        query?: RequestQuery;
        begin_block?: RequestBeginBlock;
        check_tx?: RequestCheckTx;
        deliver_tx?: RequestDeliverTx;
        end_block?: RequestEndBlock;
        commit?: RequestCommit;
        list_snapshots?: RequestListSnapshots;
        offer_snapshot?: RequestOfferSnapshot;
        load_snapshot_chunk?: RequestLoadSnapshotChunk;
        apply_snapshot_chunk?: RequestApplySnapshotChunk;
    }

    export interface RequestEcho {
        message?: string;
    }

    export interface RequestFlush {
    }

    export interface RequestInfo {
        version?: string;
        block_version?: number;
        p2p_version?: number;
    }

    // nondeterministic
    export interface RequestSetOption {
        key?: string;
        value?: string;
    }

    export interface RequestInitChain {
        time?: google.protobuf.Timestamp;
        chain_id?: string;
        consensus_params?: ConsensusParams;
        validators?: Array<ValidatorUpdate>;
        app_state_bytes?: Uint8Array;
        initial_height?: number;
    }

    export interface RequestQuery {
        data?: Uint8Array;
        path?: string;
        height?: number;
        prove?: boolean;
    }

    export interface RequestBeginBlock {
        hash?: Uint8Array;
        header?: tendermint.types.Header;
        last_commit_info?: LastCommitInfo;
        byzantine_validators?: Array<Evidence>;
    }

    export interface RequestCheckTx {
        tx?: Uint8Array;
        type?: CheckTxType;
    }

    export interface RequestDeliverTx {
        tx?: Uint8Array;
    }

    export interface RequestEndBlock {
        height?: number;
    }

    export interface RequestCommit {
    }

    // lists available snapshots
    export interface RequestListSnapshots {
    }

    // offers a snapshot to the application
    export interface RequestOfferSnapshot {
        snapshot?: Snapshot; // snapshot offered by peers
        app_hash?: Uint8Array; // light client-verified app hash for snapshot height
    }

    // loads a snapshot chunk
    export interface RequestLoadSnapshotChunk {
        height?: number;
        format?: number;
        chunk?: number;
    }

    // Applies a snapshot chunk
    export interface RequestApplySnapshotChunk {
        index?: number;
        chunk?: Uint8Array;
        sender?: string;
    }

    export interface Response {
        exception?: ResponseException;
        echo?: ResponseEcho;
        flush?: ResponseFlush;
        info?: ResponseInfo;
        set_option?: ResponseSetOption;
        init_chain?: ResponseInitChain;
        query?: ResponseQuery;
        begin_block?: ResponseBeginBlock;
        check_tx?: ResponseCheckTx;
        deliver_tx?: ResponseDeliverTx;
        end_block?: ResponseEndBlock;
        commit?: ResponseCommit;
        list_snapshots?: ResponseListSnapshots;
        offer_snapshot?: ResponseOfferSnapshot;
        load_snapshot_chunk?: ResponseLoadSnapshotChunk;
        apply_snapshot_chunk?: ResponseApplySnapshotChunk;
    }

    // nondeterministic
    export interface ResponseException {
        error?: string;
    }

    export interface ResponseEcho {
        message?: string;
    }

    export interface ResponseFlush {
    }

    export interface ResponseInfo {
        data?: string;
        version?: string;
        app_version?: number;
        last_block_height?: number;
        last_block_app_hash?: Uint8Array;
    }

    // nondeterministic
    export interface ResponseSetOption {
        code?: number;
        // bytes data = 2;
        log?: string;
        info?: string;
    }

    export interface ResponseInitChain {
        consensus_params?: ConsensusParams;
        validators?: Array<ValidatorUpdate>;
        app_hash?: Uint8Array;
    }

    export interface ResponseQuery {
        code?: number;
        // bytes data = 2; // use "value" instead.
        log?: string; // nondeterministic
        info?: string; // nondeterministic
        index?: number;
        key?: Uint8Array;
        value?: Uint8Array;
        proof_ops?: tendermint.crypto.ProofOps;
        height?: number;
        codespace?: string;
    }

    export interface ResponseBeginBlock {
        events?: Array<Event>;
    }

    export interface ResponseCheckTx {
        code?: number;
        data?: Uint8Array;
        log?: string; // nondeterministic
        info?: string; // nondeterministic
        gas_wanted?: number;
        gas_used?: number;
        events?: Array<Event>;
        codespace?: string;
    }

    export interface ResponseDeliverTx {
        code?: number;
        data?: Uint8Array;
        log?: string; // nondeterministic
        info?: string; // nondeterministic
        gas_wanted?: number;
        gas_used?: number;
        events?: Array<Event>;
        codespace?: string;
    }

    export interface ResponseEndBlock {
        validator_updates?: Array<ValidatorUpdate>;
        consensus_param_updates?: ConsensusParams;
        events?: Array<Event>;
    }

    export interface ResponseCommit {
        // reserve 1
        data?: Uint8Array;
        retain_height?: number;
    }

    export interface ResponseListSnapshots {
        snapshots?: Array<Snapshot>;
    }

    export enum ResponseOfferSnapshot_Result {
        UNKNOWN = "UNKNOWN",
        ACCEPT = "ACCEPT",
        ABORT = "ABORT",
        REJECT = "REJECT",
        REJECT_FORMAT = "REJECT_FORMAT",
        REJECT_SENDER = "REJECT_SENDER",
    }
    export interface ResponseOfferSnapshot {
        result?: ResponseOfferSnapshot_Result;
    }

    export interface ResponseLoadSnapshotChunk {
        chunk?: Uint8Array;
    }

    export enum ResponseApplySnapshotChunk_Result {
        UNKNOWN = "UNKNOWN",
        ACCEPT = "ACCEPT",
        ABORT = "ABORT",
        RETRY = "RETRY",
        RETRY_SNAPSHOT = "RETRY_SNAPSHOT",
        REJECT_SNAPSHOT = "REJECT_SNAPSHOT",
    }
    export interface ResponseApplySnapshotChunk {
        result?: ResponseApplySnapshotChunk_Result;
        refetch_chunks?: Array<number>; // Chunks to refetch and reapply
        reject_senders?: Array<string>; // Chunk senders to reject and ban
    }

    // ConsensusParams contains all consensus-relevant parameters
    // that can be adjusted by the abci app
    export interface ConsensusParams {
        block?: BlockParams;
        evidence?: tendermint.types.EvidenceParams;
        validator?: tendermint.types.ValidatorParams;
        version?: tendermint.types.VersionParams;
    }

    // BlockParams contains limits on the block size.
    export interface BlockParams {
        // Note: must be greater than 0
        max_bytes?: number;
        // Note: must be greater or equal to -1
        max_gas?: number;
    }

    export interface LastCommitInfo {
        round?: number;
        votes?: Array<VoteInfo>;
    }

    // Event allows application developers to attach additional information to
    // ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and ResponseDeliverTx.
    // Later, transactions may be queried using these events.
    export interface Event {
        type?: string;
        attributes?: Array<EventAttribute>;
    }

    // EventAttribute is a single key-value pair, associated with an event.
    export interface EventAttribute {
        key?: Uint8Array;
        value?: Uint8Array;
        index?: boolean; // nondeterministic
    }

    // TxResult contains results of executing the transaction.
    //
    // One usage is indexing transaction results.
    export interface TxResult {
        height?: number;
        index?: number;
        tx?: Uint8Array;
        result?: ResponseDeliverTx;
    }

    // Validator
    export interface Validator {
        address?: Uint8Array; // The first 20 bytes of SHA256(public key)
        // PubKey pub_key = 2 [(gogoproto.nullable)=false];
        power?: number; // The voting power
    }

    // ValidatorUpdate
    export interface ValidatorUpdate {
        pub_key?: tendermint.crypto.PublicKey;
        power?: number;
    }

    // VoteInfo
    export interface VoteInfo {
        validator?: Validator;
        signed_last_block?: boolean;
    }

    export interface Evidence {
        type?: EvidenceType;
        // The offending validator
        validator?: Validator;
        // The height when the offense occurred
        height?: number;
        // The corresponding time where the offense occurred
        time?: google.protobuf.Timestamp;
        // Total voting power of the validator set in case the ABCI application does
        // not store historical validators.
        // https://github.com/tendermint/tendermint/issues/4581
        total_voting_power?: number;
    }

    export interface Snapshot {
        height?: number; // The height at which the snapshot was taken
        format?: number; // The application-specific snapshot format
        chunks?: number; // Number of chunks in the snapshot
        hash?: Uint8Array; // Arbitrary snapshot hash, equal only if identical
        metadata?: Uint8Array; // Arbitrary application metadata
    }

    export interface ABCIApplicationService {
        Echo: (r:RequestEcho) => ResponseEcho;
        Flush: (r:RequestFlush) => ResponseFlush;
        Info: (r:RequestInfo) => ResponseInfo;
        SetOption: (r:RequestSetOption) => ResponseSetOption;
        DeliverTx: (r:RequestDeliverTx) => ResponseDeliverTx;
        CheckTx: (r:RequestCheckTx) => ResponseCheckTx;
        Query: (r:RequestQuery) => ResponseQuery;
        Commit: (r:RequestCommit) => ResponseCommit;
        InitChain: (r:RequestInitChain) => ResponseInitChain;
        BeginBlock: (r:RequestBeginBlock) => ResponseBeginBlock;
        EndBlock: (r:RequestEndBlock) => ResponseEndBlock;
        ListSnapshots: (r:RequestListSnapshots) => ResponseListSnapshots;
        OfferSnapshot: (r:RequestOfferSnapshot) => ResponseOfferSnapshot;
        LoadSnapshotChunk: (r:RequestLoadSnapshotChunk) => ResponseLoadSnapshotChunk;
        ApplySnapshotChunk: (r:RequestApplySnapshotChunk) => ResponseApplySnapshotChunk;
    }
}

