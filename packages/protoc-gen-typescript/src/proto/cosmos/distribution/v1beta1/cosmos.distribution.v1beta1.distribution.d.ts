// Code generated by protoc-gen-tstypes. DO NOT EDIT.

declare namespace cosmos.distribution.v1beta1 {

    // Params defines the set of params for the distribution module.
    export interface Params {
        community_tax?: string;
        base_proposer_reward?: string;
        bonus_proposer_reward?: string;
        withdraw_addr_enabled?: boolean;
    }

    // ValidatorHistoricalRewards represents historical rewards for a validator.
    // Height is implicit within the store key.
    // Cumulative reward ratio is the sum from the zeroeth period
    // until this period of rewards / tokens, per the spec.
    // The reference count indicates the number of objects
    // which might need to reference this historical entry at any point.
    // ReferenceCount =
    //    number of outstanding delegations which ended the associated period (and
    //    might need to read that record)
    //  + number of slashes which ended the associated period (and might need to
    //  read that record)
    //  + one per validator for the zeroeth period, set on initialization
    export interface ValidatorHistoricalRewards {
        cumulative_reward_ratio?: Array<cosmos.base.v1beta1.DecCoin>;
        reference_count?: number;
    }

    // ValidatorCurrentRewards represents current rewards and current
    // period for a validator kept as a running counter and incremented
    // each block as long as the validator's tokens remain constant.
    export interface ValidatorCurrentRewards {
        rewards?: Array<cosmos.base.v1beta1.DecCoin>;
        period?: number;
    }

    // ValidatorAccumulatedCommission represents accumulated commission
    // for a validator kept as a running counter, can be withdrawn at any time.
    export interface ValidatorAccumulatedCommission {
        commission?: Array<cosmos.base.v1beta1.DecCoin>;
    }

    // ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards
    // for a validator inexpensive to track, allows simple sanity checks.
    export interface ValidatorOutstandingRewards {
        rewards?: Array<cosmos.base.v1beta1.DecCoin>;
    }

    // ValidatorSlashEvent represents a validator slash event.
    // Height is implicit within the store key.
    // This is needed to calculate appropriate amount of staking tokens
    // for delegations which are withdrawn after a slash has occurred.
    export interface ValidatorSlashEvent {
        validator_period?: number;
        fraction?: string;
    }

    // ValidatorSlashEvents is a collection of ValidatorSlashEvent messages.
    export interface ValidatorSlashEvents {
        validator_slash_events?: Array<ValidatorSlashEvent>;
    }

    // FeePool is the global fee pool for distribution.
    export interface FeePool {
        community_pool?: Array<cosmos.base.v1beta1.DecCoin>;
    }

    // CommunityPoolSpendProposal details a proposal for use of community funds,
    // together with how many coins are proposed to be spent, and to which
    // recipient account.
    export interface CommunityPoolSpendProposal {
        title?: string;
        description?: string;
        recipient?: string;
        amount?: Array<cosmos.base.v1beta1.Coin>;
    }

    // DelegatorStartingInfo represents the starting info for a delegator reward
    // period. It tracks the previous validator period, the delegation's amount of
    // staking token, and the creation height (to check later on if any slashes have
    // occurred). NOTE: Even though validators are slashed to whole staking tokens,
    // the delegators within the validator may be left with less than a full token,
    // thus sdk.Dec is used.
    export interface DelegatorStartingInfo {
        previous_period?: number;
        stake?: string;
        height?: number;
    }

    // DelegationDelegatorReward represents the properties
    // of a delegator's delegation reward.
    export interface DelegationDelegatorReward {
        validator_address?: string;
        reward?: Array<cosmos.base.v1beta1.DecCoin>;
    }

    // CommunityPoolSpendProposalWithDeposit defines a CommunityPoolSpendProposal
    // with a deposit
    export interface CommunityPoolSpendProposalWithDeposit {
        title?: string;
        description?: string;
        recipient?: string;
        amount?: string;
        deposit?: string;
    }

}

