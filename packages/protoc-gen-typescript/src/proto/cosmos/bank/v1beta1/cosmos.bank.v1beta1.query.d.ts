// Code generated by protoc-gen-tstypes. DO NOT EDIT.

declare namespace cosmos.bank.v1beta1 {

    // QueryBalanceRequest is the request type for the Query/Balance RPC method.
    export interface QueryBalanceRequest {
        // address is the address to query balances for.
        address?: string;
        // denom is the coin denom to query balances for.
        denom?: string;
    }

    // QueryBalanceResponse is the response type for the Query/Balance RPC method.
    export interface QueryBalanceResponse {
        // balance is the balance of the coin.
        balance?: cosmos.base.v1beta1.Coin;
    }

    // QueryBalanceRequest is the request type for the Query/AllBalances RPC method.
    export interface QueryAllBalancesRequest {
        // address is the address to query balances for.
        address?: string;
        // pagination defines an optional pagination for the request.
        pagination?: cosmos.base.query.v1beta1.PageRequest;
    }

    // QueryAllBalancesResponse is the response type for the Query/AllBalances RPC
    // method.
    export interface QueryAllBalancesResponse {
        // balances is the balances of all the coins.
        balances?: Array<cosmos.base.v1beta1.Coin>;
        // pagination defines the pagination in the response.
        pagination?: cosmos.base.query.v1beta1.PageResponse;
    }

    // QuerySpendableBalancesRequest defines the gRPC request structure for querying
    // an account's spendable balances.
    export interface QuerySpendableBalancesRequest {
        // address is the address to query spendable balances for.
        address?: string;
        // pagination defines an optional pagination for the request.
        pagination?: cosmos.base.query.v1beta1.PageRequest;
    }

    // QuerySpendableBalancesResponse defines the gRPC response structure for querying
    // an account's spendable balances.
    export interface QuerySpendableBalancesResponse {
        // balances is the spendable balances of all the coins.
        balances?: Array<cosmos.base.v1beta1.Coin>;
        // pagination defines the pagination in the response.
        pagination?: cosmos.base.query.v1beta1.PageResponse;
    }

    // QueryTotalSupplyRequest is the request type for the Query/TotalSupply RPC
    // method.
    export interface QueryTotalSupplyRequest {
        // pagination defines an optional pagination for the request.
        //
        // Since: cosmos-sdk 0.43
        pagination?: cosmos.base.query.v1beta1.PageRequest;
    }

    // QueryTotalSupplyResponse is the response type for the Query/TotalSupply RPC
    // method
    export interface QueryTotalSupplyResponse {
        // supply is the supply of the coins
        supply?: Array<cosmos.base.v1beta1.Coin>;
        // pagination defines the pagination in the response.
        //
        // Since: cosmos-sdk 0.43
        pagination?: cosmos.base.query.v1beta1.PageResponse;
    }

    // QuerySupplyOfRequest is the request type for the Query/SupplyOf RPC method.
    export interface QuerySupplyOfRequest {
        // denom is the coin denom to query balances for.
        denom?: string;
    }

    // QuerySupplyOfResponse is the response type for the Query/SupplyOf RPC method.
    export interface QuerySupplyOfResponse {
        // amount is the supply of the coin.
        amount?: cosmos.base.v1beta1.Coin;
    }

    // QueryParamsRequest defines the request type for querying x/bank parameters.
    export interface QueryParamsRequest {
    }

    // QueryParamsResponse defines the response type for querying x/bank parameters.
    export interface QueryParamsResponse {
        params?: Params;
    }

    // QueryDenomsMetadataRequest is the request type for the Query/DenomsMetadata RPC method.
    export interface QueryDenomsMetadataRequest {
        // pagination defines an optional pagination for the request.
        pagination?: cosmos.base.query.v1beta1.PageRequest;
    }

    // QueryDenomsMetadataResponse is the response type for the Query/DenomsMetadata RPC
    // method.
    export interface QueryDenomsMetadataResponse {
        // metadata provides the client information for all the registered tokens.
        metadatas?: Array<Metadata>;
        // pagination defines the pagination in the response.
        pagination?: cosmos.base.query.v1beta1.PageResponse;
    }

    // QueryDenomMetadataRequest is the request type for the Query/DenomMetadata RPC method.
    export interface QueryDenomMetadataRequest {
        // denom is the coin denom to query the metadata for.
        denom?: string;
    }

    // QueryDenomMetadataResponse is the response type for the Query/DenomMetadata RPC
    // method.
    export interface QueryDenomMetadataResponse {
        // metadata describes and provides all the client information for the requested token.
        metadata?: Metadata;
    }

    // QueryDenomOwnersRequest defines the request type for the DenomOwners RPC query,
    // which queries for a paginated set of all account holders of a particular
    // denomination.
    export interface QueryDenomOwnersRequest {
        // denom defines the coin denomination to query all account holders for.
        denom?: string;
        // pagination defines an optional pagination for the request.
        pagination?: cosmos.base.query.v1beta1.PageRequest;
    }

    // DenomOwner defines structure representing an account that owns or holds a
    // particular denominated token. It contains the account address and account
    // balance of the denominated token.
    export interface DenomOwner {
        // address defines the address that owns a particular denomination.
        address?: string;
        // balance is the balance of the denominated coin for an account.
        balance?: cosmos.base.v1beta1.Coin;
    }

    // QueryDenomOwnersResponse defines the RPC response of a DenomOwners RPC query.
    export interface QueryDenomOwnersResponse {
        denom_owners?: Array<DenomOwner>;
        // pagination defines the pagination in the response.
        pagination?: cosmos.base.query.v1beta1.PageResponse;
    }

    export interface QueryService {
        Balance: (r:QueryBalanceRequest) => QueryBalanceResponse;
        AllBalances: (r:QueryAllBalancesRequest) => QueryAllBalancesResponse;
        SpendableBalances: (r:QuerySpendableBalancesRequest) => QuerySpendableBalancesResponse;
        TotalSupply: (r:QueryTotalSupplyRequest) => QueryTotalSupplyResponse;
        SupplyOf: (r:QuerySupplyOfRequest) => QuerySupplyOfResponse;
        Params: (r:QueryParamsRequest) => QueryParamsResponse;
        DenomMetadata: (r:QueryDenomMetadataRequest) => QueryDenomMetadataResponse;
        DenomsMetadata: (r:QueryDenomsMetadataRequest) => QueryDenomsMetadataResponse;
        DenomOwners: (r:QueryDenomOwnersRequest) => QueryDenomOwnersResponse;
    }
}

