// Code generated by protoc-gen-tstypes. DO NOT EDIT.

declare namespace cosmos.tx.v1beta1 {

    export enum OrderBy {
        ORDER_BY_UNSPECIFIED = "ORDER_BY_UNSPECIFIED",
        ORDER_BY_ASC = "ORDER_BY_ASC",
        ORDER_BY_DESC = "ORDER_BY_DESC",
    }
    export enum BroadcastMode {
        BROADCAST_MODE_UNSPECIFIED = "BROADCAST_MODE_UNSPECIFIED",
        BROADCAST_MODE_BLOCK = "BROADCAST_MODE_BLOCK",
        BROADCAST_MODE_SYNC = "BROADCAST_MODE_SYNC",
        BROADCAST_MODE_ASYNC = "BROADCAST_MODE_ASYNC",
    }
    // GetTxsEventRequest is the request type for the Service.TxsByEvents
    // RPC method.
    export interface GetTxsEventRequest {
        // events is the list of transaction event type.
        events?: Array<string>;
        // pagination defines a pagination for the request.
        pagination?: cosmos.base.query.v1beta1.PageRequest;
        order_by?: OrderBy;
    }

    // GetTxsEventResponse is the response type for the Service.TxsByEvents
    // RPC method.
    export interface GetTxsEventResponse {
        // txs is the list of queried transactions.
        txs?: Array<Tx>;
        // tx_responses is the list of queried TxResponses.
        tx_responses?: Array<cosmos.base.abci.v1beta1.TxResponse>;
        // pagination defines a pagination for the response.
        pagination?: cosmos.base.query.v1beta1.PageResponse;
    }

    // BroadcastTxRequest is the request type for the Service.BroadcastTxRequest
    // RPC method.
    export interface BroadcastTxRequest {
        // tx_bytes is the raw transaction.
        tx_bytes?: Uint8Array;
        mode?: BroadcastMode;
    }

    // BroadcastTxResponse is the response type for the
    // Service.BroadcastTx method.
    export interface BroadcastTxResponse {
        // tx_response is the queried TxResponses.
        tx_response?: cosmos.base.abci.v1beta1.TxResponse;
    }

    // SimulateRequest is the request type for the Service.Simulate
    // RPC method.
    export interface SimulateRequest {
        // tx is the transaction to simulate.
        // Deprecated. Send raw tx bytes instead.
        tx?: Tx;
        // tx_bytes is the raw transaction.
        //
        // Since: cosmos-sdk 0.43
        tx_bytes?: Uint8Array;
    }

    // SimulateResponse is the response type for the
    // Service.SimulateRPC method.
    export interface SimulateResponse {
        // gas_info is the information about gas used in the simulation.
        gas_info?: cosmos.base.abci.v1beta1.GasInfo;
        // result is the result of the simulation.
        result?: cosmos.base.abci.v1beta1.Result;
    }

    // GetTxRequest is the request type for the Service.GetTx
    // RPC method.
    export interface GetTxRequest {
        // hash is the tx hash to query, encoded as a hex string.
        hash?: string;
    }

    // GetTxResponse is the response type for the Service.GetTx method.
    export interface GetTxResponse {
        // tx is the queried transaction.
        tx?: Tx;
        // tx_response is the queried TxResponses.
        tx_response?: cosmos.base.abci.v1beta1.TxResponse;
    }

    // GetBlockWithTxsRequest is the request type for the Service.GetBlockWithTxs
    // RPC method.
    //
    // Since: cosmos-sdk 0.45.2
    export interface GetBlockWithTxsRequest {
        // height is the height of the block to query.
        height?: number;
        // pagination defines a pagination for the request.
        pagination?: cosmos.base.query.v1beta1.PageRequest;
    }

    // GetBlockWithTxsResponse is the response type for the Service.GetBlockWithTxs method.
    //
    // Since: cosmos-sdk 0.45.2
    export interface GetBlockWithTxsResponse {
        // txs are the transactions in the block.
        txs?: Array<Tx>;
        block_id?: tendermint.types.BlockID;
        block?: tendermint.types.Block;
        // pagination defines a pagination for the response.
        pagination?: cosmos.base.query.v1beta1.PageResponse;
    }

    export interface ServiceService {
        Simulate: (r:SimulateRequest) => SimulateResponse;
        GetTx: (r:GetTxRequest) => GetTxResponse;
        BroadcastTx: (r:BroadcastTxRequest) => BroadcastTxResponse;
        GetTxsEvent: (r:GetTxsEventRequest) => GetTxsEventResponse;
        GetBlockWithTxs: (r:GetBlockWithTxsRequest) => GetBlockWithTxsResponse;
    }
}

