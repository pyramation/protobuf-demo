// Code generated by protoc-gen-tstypes. DO NOT EDIT.

declare namespace cosmos.group.v1 {

    export enum Exec {
        EXEC_UNSPECIFIED = "EXEC_UNSPECIFIED",
        EXEC_TRY = "EXEC_TRY",
    }
    // MsgCreateGroup is the Msg/CreateGroup request type.
    export interface MsgCreateGroup {
        // admin is the account address of the group admin.
        admin?: string;
        // members defines the group members.
        members?: Array<Member>;
        // metadata is any arbitrary metadata to attached to the group.
        metadata?: string;
    }

    // MsgCreateGroupResponse is the Msg/CreateGroup response type.
    export interface MsgCreateGroupResponse {
        // group_id is the unique ID of the newly created group.
        group_id?: number;
    }

    // MsgUpdateGroupMembers is the Msg/UpdateGroupMembers request type.
    export interface MsgUpdateGroupMembers {
        // admin is the account address of the group admin.
        admin?: string;
        // group_id is the unique ID of the group.
        group_id?: number;
        // member_updates is the list of members to update,
        // set weight to 0 to remove a member.
        member_updates?: Array<Member>;
    }

    // MsgUpdateGroupMembersResponse is the Msg/UpdateGroupMembers response type.
    export interface MsgUpdateGroupMembersResponse {
    }

    // MsgUpdateGroupAdmin is the Msg/UpdateGroupAdmin request type.
    export interface MsgUpdateGroupAdmin {
        // admin is the current account address of the group admin.
        admin?: string;
        // group_id is the unique ID of the group.
        group_id?: number;
        // new_admin is the group new admin account address.
        new_admin?: string;
    }

    // MsgUpdateGroupAdminResponse is the Msg/UpdateGroupAdmin response type.
    export interface MsgUpdateGroupAdminResponse {
    }

    // MsgUpdateGroupMetadata is the Msg/UpdateGroupMetadata request type.
    export interface MsgUpdateGroupMetadata {
        // admin is the account address of the group admin.
        admin?: string;
        // group_id is the unique ID of the group.
        group_id?: number;
        // metadata is the updated group's metadata.
        metadata?: string;
    }

    // MsgUpdateGroupMetadataResponse is the Msg/UpdateGroupMetadata response type.
    export interface MsgUpdateGroupMetadataResponse {
    }

    // MsgCreateGroupPolicy is the Msg/CreateGroupPolicy request type.
    export interface MsgCreateGroupPolicy {
        // admin is the account address of the group admin.
        admin?: string;
        // group_id is the unique ID of the group.
        group_id?: number;
        // metadata is any arbitrary metadata attached to the group policy.
        metadata?: string;
        // decision_policy specifies the group policy's decision policy.
        decision_policy?: google.protobuf.Any;
    }

    // MsgCreateGroupPolicyResponse is the Msg/CreateGroupPolicy response type.
    export interface MsgCreateGroupPolicyResponse {
        // address is the account address of the newly created group policy.
        address?: string;
    }

    // MsgUpdateGroupPolicyAdmin is the Msg/UpdateGroupPolicyAdmin request type.
    export interface MsgUpdateGroupPolicyAdmin {
        // admin is the account address of the group admin.
        admin?: string;
        // address is the account address of the group policy.
        address?: string;
        // new_admin is the new group policy admin.
        new_admin?: string;
    }

    // MsgCreateGroupWithPolicy is the Msg/CreateGroupWithPolicy request type.
    export interface MsgCreateGroupWithPolicy {
        // admin is the account address of the group and group policy admin.
        admin?: string;
        // members defines the group members.
        members?: Array<Member>;
        // group_metadata is any arbitrary metadata attached to the group.
        group_metadata?: string;
        // group_policy_metadata is any arbitrary metadata attached to the group policy.
        group_policy_metadata?: string;
        // group_policy_as_admin is a boolean field, if set to true, the group policy account address will be used as group and group policy admin.
        group_policy_as_admin?: boolean;
        // decision_policy specifies the group policy's decision policy.
        decision_policy?: google.protobuf.Any;
    }

    // MsgCreateGroupWithPolicyResponse is the Msg/CreateGroupWithPolicy response type.
    export interface MsgCreateGroupWithPolicyResponse {
        // group_id is the unique ID of the newly created group with policy.
        group_id?: number;
        // group_policy_address is the account address of the newly created group policy.
        group_policy_address?: string;
    }

    // MsgUpdateGroupPolicyAdminResponse is the Msg/UpdateGroupPolicyAdmin response type.
    export interface MsgUpdateGroupPolicyAdminResponse {
    }

    // MsgUpdateGroupPolicyDecisionPolicy is the Msg/UpdateGroupPolicyDecisionPolicy request type.
    export interface MsgUpdateGroupPolicyDecisionPolicy {
        // admin is the account address of the group admin.
        admin?: string;
        // address is the account address of group policy.
        address?: string;
        // decision_policy is the updated group policy's decision policy.
        decision_policy?: google.protobuf.Any;
    }

    // MsgUpdateGroupPolicyDecisionPolicyResponse is the Msg/UpdateGroupPolicyDecisionPolicy response type.
    export interface MsgUpdateGroupPolicyDecisionPolicyResponse {
    }

    // MsgUpdateGroupPolicyMetadata is the Msg/UpdateGroupPolicyMetadata request type.
    export interface MsgUpdateGroupPolicyMetadata {
        // admin is the account address of the group admin.
        admin?: string;
        // address is the account address of group policy.
        address?: string;
        // metadata is the updated group policy metadata.
        metadata?: string;
    }

    // MsgUpdateGroupPolicyMetadataResponse is the Msg/UpdateGroupPolicyMetadata response type.
    export interface MsgUpdateGroupPolicyMetadataResponse {
    }

    // MsgSubmitProposal is the Msg/SubmitProposal request type.
    export interface MsgSubmitProposal {
        // address is the account address of group policy.
        address?: string;
        // proposers are the account addresses of the proposers.
        // Proposers signatures will be counted as yes votes.
        proposers?: Array<string>;
        // metadata is any arbitrary metadata to attached to the proposal.
        metadata?: string;
        // messages is a list of `sdk.Msg`s that will be executed if the proposal passes.
        messages?: Array<google.protobuf.Any>;
        // exec defines the mode of execution of the proposal,
        // whether it should be executed immediately on creation or not.
        // If so, proposers signatures are considered as Yes votes.
        exec?: Exec;
    }

    // MsgSubmitProposalResponse is the Msg/SubmitProposal response type.
    export interface MsgSubmitProposalResponse {
        // proposal is the unique ID of the proposal.
        proposal_id?: number;
    }

    // MsgWithdrawProposal is the Msg/WithdrawProposal request type.
    export interface MsgWithdrawProposal {
        // proposal is the unique ID of the proposal.
        proposal_id?: number;
        // address is the admin of the group policy or one of the proposer of the proposal.
        address?: string;
    }

    // MsgWithdrawProposalResponse is the Msg/WithdrawProposal response type.
    export interface MsgWithdrawProposalResponse {
    }

    // MsgVote is the Msg/Vote request type.
    export interface MsgVote {
        // proposal is the unique ID of the proposal.
        proposal_id?: number;
        // voter is the voter account address.
        voter?: string;
        // option is the voter's choice on the proposal.
        option?: VoteOption;
        // metadata is any arbitrary metadata to attached to the vote.
        metadata?: string;
        // exec defines whether the proposal should be executed
        // immediately after voting or not.
        exec?: Exec;
    }

    // MsgVoteResponse is the Msg/Vote response type.
    export interface MsgVoteResponse {
    }

    // MsgExec is the Msg/Exec request type.
    export interface MsgExec {
        // proposal is the unique ID of the proposal.
        proposal_id?: number;
        // signer is the account address used to execute the proposal.
        signer?: string;
    }

    // MsgExecResponse is the Msg/Exec request type.
    export interface MsgExecResponse {
    }

    // MsgLeaveGroup is the Msg/LeaveGroup request type.
    export interface MsgLeaveGroup {
        // address is the account address of the group member.
        address?: string;
        // group_id is the unique ID of the group.
        group_id?: number;
    }

    // MsgLeaveGroupResponse is the Msg/LeaveGroup response type.
    export interface MsgLeaveGroupResponse {
    }

    export interface MsgService {
        CreateGroup: (r:MsgCreateGroup) => MsgCreateGroupResponse;
        UpdateGroupMembers: (r:MsgUpdateGroupMembers) => MsgUpdateGroupMembersResponse;
        UpdateGroupAdmin: (r:MsgUpdateGroupAdmin) => MsgUpdateGroupAdminResponse;
        UpdateGroupMetadata: (r:MsgUpdateGroupMetadata) => MsgUpdateGroupMetadataResponse;
        CreateGroupPolicy: (r:MsgCreateGroupPolicy) => MsgCreateGroupPolicyResponse;
        CreateGroupWithPolicy: (r:MsgCreateGroupWithPolicy) => MsgCreateGroupWithPolicyResponse;
        UpdateGroupPolicyAdmin: (r:MsgUpdateGroupPolicyAdmin) => MsgUpdateGroupPolicyAdminResponse;
        UpdateGroupPolicyDecisionPolicy: (r:MsgUpdateGroupPolicyDecisionPolicy) => MsgUpdateGroupPolicyDecisionPolicyResponse;
        UpdateGroupPolicyMetadata: (r:MsgUpdateGroupPolicyMetadata) => MsgUpdateGroupPolicyMetadataResponse;
        SubmitProposal: (r:MsgSubmitProposal) => MsgSubmitProposalResponse;
        WithdrawProposal: (r:MsgWithdrawProposal) => MsgWithdrawProposalResponse;
        Vote: (r:MsgVote) => MsgVoteResponse;
        Exec: (r:MsgExec) => MsgExecResponse;
        LeaveGroup: (r:MsgLeaveGroup) => MsgLeaveGroupResponse;
    }
}

