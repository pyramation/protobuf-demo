// Code generated by protoc-gen-tstypes. DO NOT EDIT.

declare namespace cosmos.staking.v1beta1 {

    // QueryValidatorsRequest is request type for Query/Validators RPC method.
    export interface QueryValidatorsRequest {
        // status enables to query for validators matching a given status.
        status?: string;
        // pagination defines an optional pagination for the request.
        pagination?: cosmos.base.query.v1beta1.PageRequest;
    }

    // QueryValidatorsResponse is response type for the Query/Validators RPC method
    export interface QueryValidatorsResponse {
        // validators contains all the queried validators.
        validators?: Array<Validator>;
        // pagination defines the pagination in the response.
        pagination?: cosmos.base.query.v1beta1.PageResponse;
    }

    // QueryValidatorRequest is response type for the Query/Validator RPC method
    export interface QueryValidatorRequest {
        // validator_addr defines the validator address to query for.
        validator_addr?: string;
    }

    // QueryValidatorResponse is response type for the Query/Validator RPC method
    export interface QueryValidatorResponse {
        // validator defines the the validator info.
        validator?: Validator;
    }

    // QueryValidatorDelegationsRequest is request type for the
    // Query/ValidatorDelegations RPC method
    export interface QueryValidatorDelegationsRequest {
        // validator_addr defines the validator address to query for.
        validator_addr?: string;
        // pagination defines an optional pagination for the request.
        pagination?: cosmos.base.query.v1beta1.PageRequest;
    }

    // QueryValidatorDelegationsResponse is response type for the
    // Query/ValidatorDelegations RPC method
    export interface QueryValidatorDelegationsResponse {
        delegation_responses?: Array<DelegationResponse>;
        // pagination defines the pagination in the response.
        pagination?: cosmos.base.query.v1beta1.PageResponse;
    }

    // QueryValidatorUnbondingDelegationsRequest is required type for the
    // Query/ValidatorUnbondingDelegations RPC method
    export interface QueryValidatorUnbondingDelegationsRequest {
        // validator_addr defines the validator address to query for.
        validator_addr?: string;
        // pagination defines an optional pagination for the request.
        pagination?: cosmos.base.query.v1beta1.PageRequest;
    }

    // QueryValidatorUnbondingDelegationsResponse is response type for the
    // Query/ValidatorUnbondingDelegations RPC method.
    export interface QueryValidatorUnbondingDelegationsResponse {
        unbonding_responses?: Array<UnbondingDelegation>;
        // pagination defines the pagination in the response.
        pagination?: cosmos.base.query.v1beta1.PageResponse;
    }

    // QueryDelegationRequest is request type for the Query/Delegation RPC method.
    export interface QueryDelegationRequest {
        // delegator_addr defines the delegator address to query for.
        delegator_addr?: string;
        // validator_addr defines the validator address to query for.
        validator_addr?: string;
    }

    // QueryDelegationResponse is response type for the Query/Delegation RPC method.
    export interface QueryDelegationResponse {
        // delegation_responses defines the delegation info of a delegation.
        delegation_response?: DelegationResponse;
    }

    // QueryUnbondingDelegationRequest is request type for the
    // Query/UnbondingDelegation RPC method.
    export interface QueryUnbondingDelegationRequest {
        // delegator_addr defines the delegator address to query for.
        delegator_addr?: string;
        // validator_addr defines the validator address to query for.
        validator_addr?: string;
    }

    // QueryDelegationResponse is response type for the Query/UnbondingDelegation
    // RPC method.
    export interface QueryUnbondingDelegationResponse {
        // unbond defines the unbonding information of a delegation.
        unbond?: UnbondingDelegation;
    }

    // QueryDelegatorDelegationsRequest is request type for the
    // Query/DelegatorDelegations RPC method.
    export interface QueryDelegatorDelegationsRequest {
        // delegator_addr defines the delegator address to query for.
        delegator_addr?: string;
        // pagination defines an optional pagination for the request.
        pagination?: cosmos.base.query.v1beta1.PageRequest;
    }

    // QueryDelegatorDelegationsResponse is response type for the
    // Query/DelegatorDelegations RPC method.
    export interface QueryDelegatorDelegationsResponse {
        // delegation_responses defines all the delegations' info of a delegator.
        delegation_responses?: Array<DelegationResponse>;
        // pagination defines the pagination in the response.
        pagination?: cosmos.base.query.v1beta1.PageResponse;
    }

    // QueryDelegatorUnbondingDelegationsRequest is request type for the
    // Query/DelegatorUnbondingDelegations RPC method.
    export interface QueryDelegatorUnbondingDelegationsRequest {
        // delegator_addr defines the delegator address to query for.
        delegator_addr?: string;
        // pagination defines an optional pagination for the request.
        pagination?: cosmos.base.query.v1beta1.PageRequest;
    }

    // QueryUnbondingDelegatorDelegationsResponse is response type for the
    // Query/UnbondingDelegatorDelegations RPC method.
    export interface QueryDelegatorUnbondingDelegationsResponse {
        unbonding_responses?: Array<UnbondingDelegation>;
        // pagination defines the pagination in the response.
        pagination?: cosmos.base.query.v1beta1.PageResponse;
    }

    // QueryRedelegationsRequest is request type for the Query/Redelegations RPC
    // method.
    export interface QueryRedelegationsRequest {
        // delegator_addr defines the delegator address to query for.
        delegator_addr?: string;
        // src_validator_addr defines the validator address to redelegate from.
        src_validator_addr?: string;
        // dst_validator_addr defines the validator address to redelegate to.
        dst_validator_addr?: string;
        // pagination defines an optional pagination for the request.
        pagination?: cosmos.base.query.v1beta1.PageRequest;
    }

    // QueryRedelegationsResponse is response type for the Query/Redelegations RPC
    // method.
    export interface QueryRedelegationsResponse {
        redelegation_responses?: Array<RedelegationResponse>;
        // pagination defines the pagination in the response.
        pagination?: cosmos.base.query.v1beta1.PageResponse;
    }

    // QueryDelegatorValidatorsRequest is request type for the
    // Query/DelegatorValidators RPC method.
    export interface QueryDelegatorValidatorsRequest {
        // delegator_addr defines the delegator address to query for.
        delegator_addr?: string;
        // pagination defines an optional pagination for the request.
        pagination?: cosmos.base.query.v1beta1.PageRequest;
    }

    // QueryDelegatorValidatorsResponse is response type for the
    // Query/DelegatorValidators RPC method.
    export interface QueryDelegatorValidatorsResponse {
        // validators defines the the validators' info of a delegator.
        validators?: Array<Validator>;
        // pagination defines the pagination in the response.
        pagination?: cosmos.base.query.v1beta1.PageResponse;
    }

    // QueryDelegatorValidatorRequest is request type for the
    // Query/DelegatorValidator RPC method.
    export interface QueryDelegatorValidatorRequest {
        // delegator_addr defines the delegator address to query for.
        delegator_addr?: string;
        // validator_addr defines the validator address to query for.
        validator_addr?: string;
    }

    // QueryDelegatorValidatorResponse response type for the
    // Query/DelegatorValidator RPC method.
    export interface QueryDelegatorValidatorResponse {
        // validator defines the the validator info.
        validator?: Validator;
    }

    // QueryHistoricalInfoRequest is request type for the Query/HistoricalInfo RPC
    // method.
    export interface QueryHistoricalInfoRequest {
        // height defines at which height to query the historical info.
        height?: number;
    }

    // QueryHistoricalInfoResponse is response type for the Query/HistoricalInfo RPC
    // method.
    export interface QueryHistoricalInfoResponse {
        // hist defines the historical info at the given height.
        hist?: HistoricalInfo;
    }

    // QueryPoolRequest is request type for the Query/Pool RPC method.
    export interface QueryPoolRequest {
    }

    // QueryPoolResponse is response type for the Query/Pool RPC method.
    export interface QueryPoolResponse {
        // pool defines the pool info.
        pool?: Pool;
    }

    // QueryParamsRequest is request type for the Query/Params RPC method.
    export interface QueryParamsRequest {
    }

    // QueryParamsResponse is response type for the Query/Params RPC method.
    export interface QueryParamsResponse {
        // params holds all the parameters of this module.
        params?: Params;
    }

    export interface QueryService {
        Validators: (r:QueryValidatorsRequest) => QueryValidatorsResponse;
        Validator: (r:QueryValidatorRequest) => QueryValidatorResponse;
        ValidatorDelegations: (r:QueryValidatorDelegationsRequest) => QueryValidatorDelegationsResponse;
        ValidatorUnbondingDelegations: (r:QueryValidatorUnbondingDelegationsRequest) => QueryValidatorUnbondingDelegationsResponse;
        Delegation: (r:QueryDelegationRequest) => QueryDelegationResponse;
        UnbondingDelegation: (r:QueryUnbondingDelegationRequest) => QueryUnbondingDelegationResponse;
        DelegatorDelegations: (r:QueryDelegatorDelegationsRequest) => QueryDelegatorDelegationsResponse;
        DelegatorUnbondingDelegations: (r:QueryDelegatorUnbondingDelegationsRequest) => QueryDelegatorUnbondingDelegationsResponse;
        Redelegations: (r:QueryRedelegationsRequest) => QueryRedelegationsResponse;
        DelegatorValidators: (r:QueryDelegatorValidatorsRequest) => QueryDelegatorValidatorsResponse;
        DelegatorValidator: (r:QueryDelegatorValidatorRequest) => QueryDelegatorValidatorResponse;
        HistoricalInfo: (r:QueryHistoricalInfoRequest) => QueryHistoricalInfoResponse;
        Pool: (r:QueryPoolRequest) => QueryPoolResponse;
        Params: (r:QueryParamsRequest) => QueryParamsResponse;
    }
}

