// Code generated by protoc-gen-tstypes. DO NOT EDIT.

declare namespace cosmos.vesting.v1beta1 {

    // BaseVestingAccount implements the VestingAccount interface. It contains all
    // the necessary fields needed for any vesting account implementation.
    export interface BaseVestingAccount {
        base_account?: cosmos.auth.v1beta1.BaseAccount;
        original_vesting?: Array<cosmos.base.v1beta1.Coin>;
        delegated_free?: Array<cosmos.base.v1beta1.Coin>;
        delegated_vesting?: Array<cosmos.base.v1beta1.Coin>;
        end_time?: number;
    }

    // ContinuousVestingAccount implements the VestingAccount interface. It
    // continuously vests by unlocking coins linearly with respect to time.
    export interface ContinuousVestingAccount {
        base_vesting_account?: BaseVestingAccount;
        start_time?: number;
    }

    // DelayedVestingAccount implements the VestingAccount interface. It vests all
    // coins after a specific time, but non prior. In other words, it keeps them
    // locked until a specified time.
    export interface DelayedVestingAccount {
        base_vesting_account?: BaseVestingAccount;
    }

    // Period defines a length of time and amount of coins that will vest.
    export interface Period {
        length?: number;
        amount?: Array<cosmos.base.v1beta1.Coin>;
    }

    // PeriodicVestingAccount implements the VestingAccount interface. It
    // periodically vests by unlocking coins during each specified period.
    export interface PeriodicVestingAccount {
        base_vesting_account?: BaseVestingAccount;
        start_time?: number;
        vesting_periods?: Array<Period>;
    }

    // PermanentLockedAccount implements the VestingAccount interface. It does
    // not ever release coins, locking them indefinitely. Coins in this account can
    // still be used for delegating and for governance votes even while locked.
    //
    // Since: cosmos-sdk 0.43
    export interface PermanentLockedAccount {
        base_vesting_account?: BaseVestingAccount;
    }

}

