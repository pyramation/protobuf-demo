// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "osmosis/claim/v1beta1/query.proto" (package "osmosis.claim.v1beta1", syntax proto3),// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Query } from "./query";
import type { QueryTotalClaimableResponse } from "./query";
import type { QueryTotalClaimableRequest } from "./query";
import type { QueryClaimableForActionResponse } from "./query";
import type { QueryClaimableForActionRequest } from "./query";
import type { QueryClaimRecordResponse } from "./query";
import type { QueryClaimRecordRequest } from "./query";
import type { QueryParamsResponse } from "./query";
import type { QueryParamsRequest } from "./query";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { QueryModuleAccountBalanceResponse } from "./query";
import type { QueryModuleAccountBalanceRequest } from "./query";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service osmosis.claim.v1beta1.Query
 */
export interface IQueryClient {
    /**
     * @generated from protobuf rpc: ModuleAccountBalance(osmosis.claim.v1beta1.QueryModuleAccountBalanceRequest) returns (osmosis.claim.v1beta1.QueryModuleAccountBalanceResponse);
     */
    moduleAccountBalance(input: QueryModuleAccountBalanceRequest, options?: RpcOptions): UnaryCall<QueryModuleAccountBalanceRequest, QueryModuleAccountBalanceResponse>;
    /**
     * @generated from protobuf rpc: Params(osmosis.claim.v1beta1.QueryParamsRequest) returns (osmosis.claim.v1beta1.QueryParamsResponse);
     */
    params(input: QueryParamsRequest, options?: RpcOptions): UnaryCall<QueryParamsRequest, QueryParamsResponse>;
    /**
     * @generated from protobuf rpc: ClaimRecord(osmosis.claim.v1beta1.QueryClaimRecordRequest) returns (osmosis.claim.v1beta1.QueryClaimRecordResponse);
     */
    claimRecord(input: QueryClaimRecordRequest, options?: RpcOptions): UnaryCall<QueryClaimRecordRequest, QueryClaimRecordResponse>;
    /**
     * @generated from protobuf rpc: ClaimableForAction(osmosis.claim.v1beta1.QueryClaimableForActionRequest) returns (osmosis.claim.v1beta1.QueryClaimableForActionResponse);
     */
    claimableForAction(input: QueryClaimableForActionRequest, options?: RpcOptions): UnaryCall<QueryClaimableForActionRequest, QueryClaimableForActionResponse>;
    /**
     * @generated from protobuf rpc: TotalClaimable(osmosis.claim.v1beta1.QueryTotalClaimableRequest) returns (osmosis.claim.v1beta1.QueryTotalClaimableResponse);
     */
    totalClaimable(input: QueryTotalClaimableRequest, options?: RpcOptions): UnaryCall<QueryTotalClaimableRequest, QueryTotalClaimableResponse>;
}
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service osmosis.claim.v1beta1.Query
 */
export class QueryClient implements IQueryClient, ServiceInfo {
    typeName = Query.typeName;
    methods = Query.methods;
    options = Query.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ModuleAccountBalance(osmosis.claim.v1beta1.QueryModuleAccountBalanceRequest) returns (osmosis.claim.v1beta1.QueryModuleAccountBalanceResponse);
     */
    moduleAccountBalance(input: QueryModuleAccountBalanceRequest, options?: RpcOptions): UnaryCall<QueryModuleAccountBalanceRequest, QueryModuleAccountBalanceResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryModuleAccountBalanceRequest, QueryModuleAccountBalanceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Params(osmosis.claim.v1beta1.QueryParamsRequest) returns (osmosis.claim.v1beta1.QueryParamsResponse);
     */
    params(input: QueryParamsRequest, options?: RpcOptions): UnaryCall<QueryParamsRequest, QueryParamsResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryParamsRequest, QueryParamsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ClaimRecord(osmosis.claim.v1beta1.QueryClaimRecordRequest) returns (osmosis.claim.v1beta1.QueryClaimRecordResponse);
     */
    claimRecord(input: QueryClaimRecordRequest, options?: RpcOptions): UnaryCall<QueryClaimRecordRequest, QueryClaimRecordResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryClaimRecordRequest, QueryClaimRecordResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ClaimableForAction(osmosis.claim.v1beta1.QueryClaimableForActionRequest) returns (osmosis.claim.v1beta1.QueryClaimableForActionResponse);
     */
    claimableForAction(input: QueryClaimableForActionRequest, options?: RpcOptions): UnaryCall<QueryClaimableForActionRequest, QueryClaimableForActionResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryClaimableForActionRequest, QueryClaimableForActionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TotalClaimable(osmosis.claim.v1beta1.QueryTotalClaimableRequest) returns (osmosis.claim.v1beta1.QueryTotalClaimableResponse);
     */
    totalClaimable(input: QueryTotalClaimableRequest, options?: RpcOptions): UnaryCall<QueryTotalClaimableRequest, QueryTotalClaimableResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryTotalClaimableRequest, QueryTotalClaimableResponse>("unary", this._transport, method, opt, input);
    }
}
