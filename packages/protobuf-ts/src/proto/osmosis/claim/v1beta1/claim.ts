// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "osmosis/claim/v1beta1/claim.proto" (package "osmosis.claim.v1beta1", syntax proto3),// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
/**
 * A Claim Records is the metadata of claim data per address
 *
 * @generated from protobuf message osmosis.claim.v1beta1.ClaimRecord
 */
export interface ClaimRecord {
    /**
     * address of claim user
     *
     * @generated from protobuf field: string address = 1;
     */
    address: string;
    /**
     * total initial claimable amount for the user
     *
     * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin initial_claimable_amount = 2;
     */
    initialClaimableAmount: Coin[];
    /**
     * true if action is completed
     * index of bool in array refers to action enum #
     *
     * @generated from protobuf field: repeated bool action_completed = 3;
     */
    actionCompleted: boolean[];
}
/**
 * @generated from protobuf enum osmosis.claim.v1beta1.Action
 */
export enum Action {
    /**
     * @generated from protobuf enum value: ActionAddLiquidity = 0;
     */
    ActionAddLiquidity = 0,
    /**
     * @generated from protobuf enum value: ActionSwap = 1;
     */
    ActionSwap = 1,
    /**
     * @generated from protobuf enum value: ActionVote = 2;
     */
    ActionVote = 2,
    /**
     * @generated from protobuf enum value: ActionDelegateStake = 3;
     */
    ActionDelegateStake = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class ClaimRecord$Type extends MessageType<ClaimRecord> {
    constructor() {
        super("osmosis.claim.v1beta1.ClaimRecord", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"address\"" } },
            { no: 2, name: "initial_claimable_amount", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"initial_claimable_amount\"", "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } },
            { no: 3, name: "action_completed", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 8 /*ScalarType.BOOL*/, options: { "gogoproto.moretags": "yaml:\"action_completed\"" } }
        ]);
    }
    create(value?: PartialMessage<ClaimRecord>): ClaimRecord {
        const message = { address: "", initialClaimableAmount: [], actionCompleted: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClaimRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClaimRecord): ClaimRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* repeated cosmos.base.v1beta1.Coin initial_claimable_amount */ 2:
                    message.initialClaimableAmount.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated bool action_completed */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.actionCompleted.push(reader.bool());
                    else
                        message.actionCompleted.push(reader.bool());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClaimRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* repeated cosmos.base.v1beta1.Coin initial_claimable_amount = 2; */
        for (let i = 0; i < message.initialClaimableAmount.length; i++)
            Coin.internalBinaryWrite(message.initialClaimableAmount[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated bool action_completed = 3; */
        if (message.actionCompleted.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.actionCompleted.length; i++)
                writer.bool(message.actionCompleted[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.claim.v1beta1.ClaimRecord
 */
export const ClaimRecord = new ClaimRecord$Type();
