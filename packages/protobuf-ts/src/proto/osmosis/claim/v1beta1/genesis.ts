// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "osmosis/claim/v1beta1/genesis.proto" (package "osmosis.claim.v1beta1", syntax proto3),// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ClaimRecord } from "./claim";
import { Params } from "./params";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
/**
 * GenesisState defines the claim module's genesis state.
 *
 * @generated from protobuf message osmosis.claim.v1beta1.GenesisState
 */
export interface GenesisState {
    /**
     * balance of the claim module's account
     *
     * @generated from protobuf field: cosmos.base.v1beta1.Coin module_account_balance = 1;
     */
    moduleAccountBalance?: Coin;
    /**
     * params defines all the parameters of the module.
     *
     * @generated from protobuf field: osmosis.claim.v1beta1.Params params = 2;
     */
    params?: Params;
    /**
     * list of claim records, one for every airdrop recipient
     *
     * @generated from protobuf field: repeated osmosis.claim.v1beta1.ClaimRecord claim_records = 3;
     */
    claimRecords: ClaimRecord[];
}
// @generated message type with reflection information, may provide speed optimized methods
class GenesisState$Type extends MessageType<GenesisState> {
    constructor() {
        super("osmosis.claim.v1beta1.GenesisState", [
            { no: 1, name: "module_account_balance", kind: "message", T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"module_account_balance\"" } },
            { no: 2, name: "params", kind: "message", T: () => Params, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"params\"" } },
            { no: 3, name: "claim_records", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ClaimRecord, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"claim_records\"" } }
        ]);
    }
    create(value?: PartialMessage<GenesisState>): GenesisState {
        const message = { claimRecords: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GenesisState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenesisState): GenesisState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.base.v1beta1.Coin module_account_balance */ 1:
                    message.moduleAccountBalance = Coin.internalBinaryRead(reader, reader.uint32(), options, message.moduleAccountBalance);
                    break;
                case /* osmosis.claim.v1beta1.Params params */ 2:
                    message.params = Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                case /* repeated osmosis.claim.v1beta1.ClaimRecord claim_records */ 3:
                    message.claimRecords.push(ClaimRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GenesisState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.base.v1beta1.Coin module_account_balance = 1; */
        if (message.moduleAccountBalance)
            Coin.internalBinaryWrite(message.moduleAccountBalance, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* osmosis.claim.v1beta1.Params params = 2; */
        if (message.params)
            Params.internalBinaryWrite(message.params, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated osmosis.claim.v1beta1.ClaimRecord claim_records = 3; */
        for (let i = 0; i < message.claimRecords.length; i++)
            ClaimRecord.internalBinaryWrite(message.claimRecords[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.claim.v1beta1.GenesisState
 */
export const GenesisState = new GenesisState$Type();
