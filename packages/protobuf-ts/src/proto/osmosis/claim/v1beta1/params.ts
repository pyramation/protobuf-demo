// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "osmosis/claim/v1beta1/params.proto" (package "osmosis.claim.v1beta1", syntax proto3),// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../../google/protobuf/duration";
import { Timestamp } from "../../../google/protobuf/timestamp";
/**
 * Params defines the claim module's parameters.
 *
 * @generated from protobuf message osmosis.claim.v1beta1.Params
 */
export interface Params {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp airdrop_start_time = 1;
     */
    airdropStartTime?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Duration duration_until_decay = 2;
     */
    durationUntilDecay?: Duration;
    /**
     * @generated from protobuf field: google.protobuf.Duration duration_of_decay = 3;
     */
    durationOfDecay?: Duration;
    /**
     * denom of claimable asset
     *
     * @generated from protobuf field: string claim_denom = 4;
     */
    claimDenom: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Params$Type extends MessageType<Params> {
    constructor() {
        super("osmosis.claim.v1beta1.Params", [
            { no: 1, name: "airdrop_start_time", kind: "message", T: () => Timestamp, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"airdrop_start_time\"", "gogoproto.stdtime": true } },
            { no: 2, name: "duration_until_decay", kind: "message", T: () => Duration, options: { "gogoproto.nullable": false, "gogoproto.jsontag": "duration_until_decay,omitempty", "gogoproto.moretags": "yaml:\"duration_until_decay\"", "gogoproto.stdduration": true } },
            { no: 3, name: "duration_of_decay", kind: "message", T: () => Duration, options: { "gogoproto.nullable": false, "gogoproto.jsontag": "duration_of_decay,omitempty", "gogoproto.moretags": "yaml:\"duration_of_decay\"", "gogoproto.stdduration": true } },
            { no: 4, name: "claim_denom", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Params>): Params {
        const message = { claimDenom: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Params>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Params): Params {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp airdrop_start_time */ 1:
                    message.airdropStartTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.airdropStartTime);
                    break;
                case /* google.protobuf.Duration duration_until_decay */ 2:
                    message.durationUntilDecay = Duration.internalBinaryRead(reader, reader.uint32(), options, message.durationUntilDecay);
                    break;
                case /* google.protobuf.Duration duration_of_decay */ 3:
                    message.durationOfDecay = Duration.internalBinaryRead(reader, reader.uint32(), options, message.durationOfDecay);
                    break;
                case /* string claim_denom */ 4:
                    message.claimDenom = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Params, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp airdrop_start_time = 1; */
        if (message.airdropStartTime)
            Timestamp.internalBinaryWrite(message.airdropStartTime, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration duration_until_decay = 2; */
        if (message.durationUntilDecay)
            Duration.internalBinaryWrite(message.durationUntilDecay, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration duration_of_decay = 3; */
        if (message.durationOfDecay)
            Duration.internalBinaryWrite(message.durationOfDecay, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string claim_denom = 4; */
        if (message.claimDenom !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.claimDenom);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.claim.v1beta1.Params
 */
export const Params = new Params$Type();
