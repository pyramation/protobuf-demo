// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "osmosis/incentives/tx.proto" (package "osmosis.incentives", syntax proto3),// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../google/protobuf/timestamp";
import { Coin } from "../../cosmos/base/v1beta1/coin";
import { QueryCondition } from "../lockup/lock";
/**
 * @generated from protobuf message osmosis.incentives.MsgCreateGauge
 */
export interface MsgCreateGauge {
    /**
     * flag to show if it's perpetual or multi-epoch
     * distribution incentives by third party
     *
     * @generated from protobuf field: bool is_perpetual = 1;
     */
    isPerpetual: boolean;
    /**
     * @generated from protobuf field: string owner = 2;
     */
    owner: string;
    /**
     * distribute condition of a lock which meet one of these conditions
     *
     * @generated from protobuf field: osmosis.lockup.QueryCondition distribute_to = 3;
     */
    distributeTo?: QueryCondition;
    /**
     * can distribute multiple coins
     *
     * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin coins = 4;
     */
    coins: Coin[];
    /**
     * distribution start time
     *
     * @generated from protobuf field: google.protobuf.Timestamp start_time = 5;
     */
    startTime?: Timestamp;
    /**
     * number of epochs distribution will be done
     *
     * @generated from protobuf field: uint64 num_epochs_paid_over = 6;
     */
    numEpochsPaidOver: bigint;
}
/**
 * @generated from protobuf message osmosis.incentives.MsgCreateGaugeResponse
 */
export interface MsgCreateGaugeResponse {
}
/**
 * @generated from protobuf message osmosis.incentives.MsgAddToGauge
 */
export interface MsgAddToGauge {
    /**
     * @generated from protobuf field: string owner = 1;
     */
    owner: string;
    /**
     * @generated from protobuf field: uint64 gauge_id = 2;
     */
    gaugeId: bigint;
    /**
     * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin rewards = 3;
     */
    rewards: Coin[];
}
/**
 * @generated from protobuf message osmosis.incentives.MsgAddToGaugeResponse
 */
export interface MsgAddToGaugeResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class MsgCreateGauge$Type extends MessageType<MsgCreateGauge> {
    constructor() {
        super("osmosis.incentives.MsgCreateGauge", [
            { no: 1, name: "is_perpetual", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "owner", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"owner\"" } },
            { no: 3, name: "distribute_to", kind: "message", T: () => QueryCondition, options: { "gogoproto.nullable": false } },
            { no: 4, name: "coins", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } },
            { no: 5, name: "start_time", kind: "message", T: () => Timestamp, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"timestamp\"", "gogoproto.stdtime": true } },
            { no: 6, name: "num_epochs_paid_over", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MsgCreateGauge>): MsgCreateGauge {
        const message = { isPerpetual: false, owner: "", coins: [], numEpochsPaidOver: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgCreateGauge>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgCreateGauge): MsgCreateGauge {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_perpetual */ 1:
                    message.isPerpetual = reader.bool();
                    break;
                case /* string owner */ 2:
                    message.owner = reader.string();
                    break;
                case /* osmosis.lockup.QueryCondition distribute_to */ 3:
                    message.distributeTo = QueryCondition.internalBinaryRead(reader, reader.uint32(), options, message.distributeTo);
                    break;
                case /* repeated cosmos.base.v1beta1.Coin coins */ 4:
                    message.coins.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* google.protobuf.Timestamp start_time */ 5:
                    message.startTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.startTime);
                    break;
                case /* uint64 num_epochs_paid_over */ 6:
                    message.numEpochsPaidOver = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgCreateGauge, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_perpetual = 1; */
        if (message.isPerpetual !== false)
            writer.tag(1, WireType.Varint).bool(message.isPerpetual);
        /* string owner = 2; */
        if (message.owner !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.owner);
        /* osmosis.lockup.QueryCondition distribute_to = 3; */
        if (message.distributeTo)
            QueryCondition.internalBinaryWrite(message.distributeTo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.base.v1beta1.Coin coins = 4; */
        for (let i = 0; i < message.coins.length; i++)
            Coin.internalBinaryWrite(message.coins[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp start_time = 5; */
        if (message.startTime)
            Timestamp.internalBinaryWrite(message.startTime, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* uint64 num_epochs_paid_over = 6; */
        if (message.numEpochsPaidOver !== 0n)
            writer.tag(6, WireType.Varint).uint64(message.numEpochsPaidOver);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.incentives.MsgCreateGauge
 */
export const MsgCreateGauge = new MsgCreateGauge$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgCreateGaugeResponse$Type extends MessageType<MsgCreateGaugeResponse> {
    constructor() {
        super("osmosis.incentives.MsgCreateGaugeResponse", []);
    }
    create(value?: PartialMessage<MsgCreateGaugeResponse>): MsgCreateGaugeResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgCreateGaugeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgCreateGaugeResponse): MsgCreateGaugeResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MsgCreateGaugeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.incentives.MsgCreateGaugeResponse
 */
export const MsgCreateGaugeResponse = new MsgCreateGaugeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgAddToGauge$Type extends MessageType<MsgAddToGauge> {
    constructor() {
        super("osmosis.incentives.MsgAddToGauge", [
            { no: 1, name: "owner", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"owner\"" } },
            { no: 2, name: "gauge_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "rewards", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } }
        ]);
    }
    create(value?: PartialMessage<MsgAddToGauge>): MsgAddToGauge {
        const message = { owner: "", gaugeId: 0n, rewards: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgAddToGauge>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgAddToGauge): MsgAddToGauge {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string owner */ 1:
                    message.owner = reader.string();
                    break;
                case /* uint64 gauge_id */ 2:
                    message.gaugeId = reader.uint64().toBigInt();
                    break;
                case /* repeated cosmos.base.v1beta1.Coin rewards */ 3:
                    message.rewards.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgAddToGauge, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string owner = 1; */
        if (message.owner !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.owner);
        /* uint64 gauge_id = 2; */
        if (message.gaugeId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.gaugeId);
        /* repeated cosmos.base.v1beta1.Coin rewards = 3; */
        for (let i = 0; i < message.rewards.length; i++)
            Coin.internalBinaryWrite(message.rewards[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.incentives.MsgAddToGauge
 */
export const MsgAddToGauge = new MsgAddToGauge$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgAddToGaugeResponse$Type extends MessageType<MsgAddToGaugeResponse> {
    constructor() {
        super("osmosis.incentives.MsgAddToGaugeResponse", []);
    }
    create(value?: PartialMessage<MsgAddToGaugeResponse>): MsgAddToGaugeResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgAddToGaugeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgAddToGaugeResponse): MsgAddToGaugeResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MsgAddToGaugeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.incentives.MsgAddToGaugeResponse
 */
export const MsgAddToGaugeResponse = new MsgAddToGaugeResponse$Type();
/**
 * @generated ServiceType for protobuf service osmosis.incentives.Msg
 */
export const Msg = new ServiceType("osmosis.incentives.Msg", [
    { name: "CreateGauge", options: {}, I: MsgCreateGauge, O: MsgCreateGaugeResponse },
    { name: "AddToGauge", options: {}, I: MsgAddToGauge, O: MsgAddToGaugeResponse }
]);
