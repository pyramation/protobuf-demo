// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "osmosis/incentives/tx.proto" (package "osmosis.incentives", syntax proto3),// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Msg } from "./tx";
import type { MsgAddToGaugeResponse } from "./tx";
import type { MsgAddToGauge } from "./tx";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { MsgCreateGaugeResponse } from "./tx";
import type { MsgCreateGauge } from "./tx";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service osmosis.incentives.Msg
 */
export interface IMsgClient {
    /**
     * @generated from protobuf rpc: CreateGauge(osmosis.incentives.MsgCreateGauge) returns (osmosis.incentives.MsgCreateGaugeResponse);
     */
    createGauge(input: MsgCreateGauge, options?: RpcOptions): UnaryCall<MsgCreateGauge, MsgCreateGaugeResponse>;
    /**
     * @generated from protobuf rpc: AddToGauge(osmosis.incentives.MsgAddToGauge) returns (osmosis.incentives.MsgAddToGaugeResponse);
     */
    addToGauge(input: MsgAddToGauge, options?: RpcOptions): UnaryCall<MsgAddToGauge, MsgAddToGaugeResponse>;
}
/**
 * @generated from protobuf service osmosis.incentives.Msg
 */
export class MsgClient implements IMsgClient, ServiceInfo {
    typeName = Msg.typeName;
    methods = Msg.methods;
    options = Msg.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateGauge(osmosis.incentives.MsgCreateGauge) returns (osmosis.incentives.MsgCreateGaugeResponse);
     */
    createGauge(input: MsgCreateGauge, options?: RpcOptions): UnaryCall<MsgCreateGauge, MsgCreateGaugeResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgCreateGauge, MsgCreateGaugeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AddToGauge(osmosis.incentives.MsgAddToGauge) returns (osmosis.incentives.MsgAddToGaugeResponse);
     */
    addToGauge(input: MsgAddToGauge, options?: RpcOptions): UnaryCall<MsgAddToGauge, MsgAddToGaugeResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgAddToGauge, MsgAddToGaugeResponse>("unary", this._transport, method, opt, input);
    }
}
