// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "osmosis/txfees/v1beta1/query.proto" (package "osmosis.txfees.v1beta1", syntax proto3),// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { FeeToken } from "./feetoken";
/**
 * @generated from protobuf message osmosis.txfees.v1beta1.QueryFeeTokensRequest
 */
export interface QueryFeeTokensRequest {
}
/**
 * @generated from protobuf message osmosis.txfees.v1beta1.QueryFeeTokensResponse
 */
export interface QueryFeeTokensResponse {
    /**
     * @generated from protobuf field: repeated osmosis.txfees.v1beta1.FeeToken fee_tokens = 1;
     */
    feeTokens: FeeToken[];
}
/**
 * @generated from protobuf message osmosis.txfees.v1beta1.QueryDenomPoolIdRequest
 */
export interface QueryDenomPoolIdRequest {
    /**
     * @generated from protobuf field: string denom = 1;
     */
    denom: string;
}
/**
 * @generated from protobuf message osmosis.txfees.v1beta1.QueryDenomPoolIdResponse
 */
export interface QueryDenomPoolIdResponse {
    /**
     * @generated from protobuf field: uint64 poolID = 1;
     */
    poolID: bigint;
}
/**
 * @generated from protobuf message osmosis.txfees.v1beta1.QueryBaseDenomRequest
 */
export interface QueryBaseDenomRequest {
}
/**
 * @generated from protobuf message osmosis.txfees.v1beta1.QueryBaseDenomResponse
 */
export interface QueryBaseDenomResponse {
    /**
     * @generated from protobuf field: string base_denom = 1;
     */
    baseDenom: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class QueryFeeTokensRequest$Type extends MessageType<QueryFeeTokensRequest> {
    constructor() {
        super("osmosis.txfees.v1beta1.QueryFeeTokensRequest", []);
    }
    create(value?: PartialMessage<QueryFeeTokensRequest>): QueryFeeTokensRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryFeeTokensRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryFeeTokensRequest): QueryFeeTokensRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryFeeTokensRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.txfees.v1beta1.QueryFeeTokensRequest
 */
export const QueryFeeTokensRequest = new QueryFeeTokensRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryFeeTokensResponse$Type extends MessageType<QueryFeeTokensResponse> {
    constructor() {
        super("osmosis.txfees.v1beta1.QueryFeeTokensResponse", [
            { no: 1, name: "fee_tokens", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FeeToken, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"fee_tokens\"" } }
        ]);
    }
    create(value?: PartialMessage<QueryFeeTokensResponse>): QueryFeeTokensResponse {
        const message = { feeTokens: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryFeeTokensResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryFeeTokensResponse): QueryFeeTokensResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated osmosis.txfees.v1beta1.FeeToken fee_tokens */ 1:
                    message.feeTokens.push(FeeToken.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryFeeTokensResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated osmosis.txfees.v1beta1.FeeToken fee_tokens = 1; */
        for (let i = 0; i < message.feeTokens.length; i++)
            FeeToken.internalBinaryWrite(message.feeTokens[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.txfees.v1beta1.QueryFeeTokensResponse
 */
export const QueryFeeTokensResponse = new QueryFeeTokensResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDenomPoolIdRequest$Type extends MessageType<QueryDenomPoolIdRequest> {
    constructor() {
        super("osmosis.txfees.v1beta1.QueryDenomPoolIdRequest", [
            { no: 1, name: "denom", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"denom\"" } }
        ]);
    }
    create(value?: PartialMessage<QueryDenomPoolIdRequest>): QueryDenomPoolIdRequest {
        const message = { denom: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryDenomPoolIdRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryDenomPoolIdRequest): QueryDenomPoolIdRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string denom */ 1:
                    message.denom = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryDenomPoolIdRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string denom = 1; */
        if (message.denom !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.denom);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.txfees.v1beta1.QueryDenomPoolIdRequest
 */
export const QueryDenomPoolIdRequest = new QueryDenomPoolIdRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDenomPoolIdResponse$Type extends MessageType<QueryDenomPoolIdResponse> {
    constructor() {
        super("osmosis.txfees.v1beta1.QueryDenomPoolIdResponse", [
            { no: 1, name: "poolID", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/, options: { "gogoproto.moretags": "yaml:\"pool_id\"" } }
        ]);
    }
    create(value?: PartialMessage<QueryDenomPoolIdResponse>): QueryDenomPoolIdResponse {
        const message = { poolID: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryDenomPoolIdResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryDenomPoolIdResponse): QueryDenomPoolIdResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 poolID */ 1:
                    message.poolID = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryDenomPoolIdResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 poolID = 1; */
        if (message.poolID !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.poolID);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.txfees.v1beta1.QueryDenomPoolIdResponse
 */
export const QueryDenomPoolIdResponse = new QueryDenomPoolIdResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryBaseDenomRequest$Type extends MessageType<QueryBaseDenomRequest> {
    constructor() {
        super("osmosis.txfees.v1beta1.QueryBaseDenomRequest", []);
    }
    create(value?: PartialMessage<QueryBaseDenomRequest>): QueryBaseDenomRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryBaseDenomRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryBaseDenomRequest): QueryBaseDenomRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryBaseDenomRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.txfees.v1beta1.QueryBaseDenomRequest
 */
export const QueryBaseDenomRequest = new QueryBaseDenomRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryBaseDenomResponse$Type extends MessageType<QueryBaseDenomResponse> {
    constructor() {
        super("osmosis.txfees.v1beta1.QueryBaseDenomResponse", [
            { no: 1, name: "base_denom", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"base_denom\"" } }
        ]);
    }
    create(value?: PartialMessage<QueryBaseDenomResponse>): QueryBaseDenomResponse {
        const message = { baseDenom: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryBaseDenomResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryBaseDenomResponse): QueryBaseDenomResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string base_denom */ 1:
                    message.baseDenom = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryBaseDenomResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string base_denom = 1; */
        if (message.baseDenom !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.baseDenom);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.txfees.v1beta1.QueryBaseDenomResponse
 */
export const QueryBaseDenomResponse = new QueryBaseDenomResponse$Type();
/**
 * @generated ServiceType for protobuf service osmosis.txfees.v1beta1.Query
 */
export const Query = new ServiceType("osmosis.txfees.v1beta1.Query", [
    { name: "FeeTokens", options: { "google.api.http": { get: "/osmosis/txfees/v1beta1/fee_tokens" } }, I: QueryFeeTokensRequest, O: QueryFeeTokensResponse },
    { name: "DenomPoolId", options: { "google.api.http": { get: "/osmosis/txfees/v1beta1/denom_pool_id/{denom}" } }, I: QueryDenomPoolIdRequest, O: QueryDenomPoolIdResponse },
    { name: "BaseDenom", options: { "google.api.http": { get: "/osmosis/txfees/v1beta1/base_denom" } }, I: QueryBaseDenomRequest, O: QueryBaseDenomResponse }
]);
