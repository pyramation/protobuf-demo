// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "osmosis/txfees/v1beta1/query.proto" (package "osmosis.txfees.v1beta1", syntax proto3),// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Query } from "./query";
import type { QueryBaseDenomResponse } from "./query";
import type { QueryBaseDenomRequest } from "./query";
import type { QueryDenomPoolIdResponse } from "./query";
import type { QueryDenomPoolIdRequest } from "./query";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { QueryFeeTokensResponse } from "./query";
import type { QueryFeeTokensRequest } from "./query";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service osmosis.txfees.v1beta1.Query
 */
export interface IQueryClient {
    /**
     * FeeTokens returns a list of all the whitelisted fee tokens and their
     * corresponding pools It does not include the BaseDenom, which has its own
     * query endpoint
     *
     * @generated from protobuf rpc: FeeTokens(osmosis.txfees.v1beta1.QueryFeeTokensRequest) returns (osmosis.txfees.v1beta1.QueryFeeTokensResponse);
     */
    feeTokens(input: QueryFeeTokensRequest, options?: RpcOptions): UnaryCall<QueryFeeTokensRequest, QueryFeeTokensResponse>;
    /**
     * @generated from protobuf rpc: DenomPoolId(osmosis.txfees.v1beta1.QueryDenomPoolIdRequest) returns (osmosis.txfees.v1beta1.QueryDenomPoolIdResponse);
     */
    denomPoolId(input: QueryDenomPoolIdRequest, options?: RpcOptions): UnaryCall<QueryDenomPoolIdRequest, QueryDenomPoolIdResponse>;
    /**
     * @generated from protobuf rpc: BaseDenom(osmosis.txfees.v1beta1.QueryBaseDenomRequest) returns (osmosis.txfees.v1beta1.QueryBaseDenomResponse);
     */
    baseDenom(input: QueryBaseDenomRequest, options?: RpcOptions): UnaryCall<QueryBaseDenomRequest, QueryBaseDenomResponse>;
}
/**
 * @generated from protobuf service osmosis.txfees.v1beta1.Query
 */
export class QueryClient implements IQueryClient, ServiceInfo {
    typeName = Query.typeName;
    methods = Query.methods;
    options = Query.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * FeeTokens returns a list of all the whitelisted fee tokens and their
     * corresponding pools It does not include the BaseDenom, which has its own
     * query endpoint
     *
     * @generated from protobuf rpc: FeeTokens(osmosis.txfees.v1beta1.QueryFeeTokensRequest) returns (osmosis.txfees.v1beta1.QueryFeeTokensResponse);
     */
    feeTokens(input: QueryFeeTokensRequest, options?: RpcOptions): UnaryCall<QueryFeeTokensRequest, QueryFeeTokensResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryFeeTokensRequest, QueryFeeTokensResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DenomPoolId(osmosis.txfees.v1beta1.QueryDenomPoolIdRequest) returns (osmosis.txfees.v1beta1.QueryDenomPoolIdResponse);
     */
    denomPoolId(input: QueryDenomPoolIdRequest, options?: RpcOptions): UnaryCall<QueryDenomPoolIdRequest, QueryDenomPoolIdResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryDenomPoolIdRequest, QueryDenomPoolIdResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: BaseDenom(osmosis.txfees.v1beta1.QueryBaseDenomRequest) returns (osmosis.txfees.v1beta1.QueryBaseDenomResponse);
     */
    baseDenom(input: QueryBaseDenomRequest, options?: RpcOptions): UnaryCall<QueryBaseDenomRequest, QueryBaseDenomResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryBaseDenomRequest, QueryBaseDenomResponse>("unary", this._transport, method, opt, input);
    }
}
