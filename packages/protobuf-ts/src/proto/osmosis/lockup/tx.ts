// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "osmosis/lockup/tx.proto" (package "osmosis.lockup", syntax proto3),// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PeriodLock } from "./lock";
import { Coin } from "../../cosmos/base/v1beta1/coin";
import { Duration } from "../../google/protobuf/duration";
/**
 * @generated from protobuf message osmosis.lockup.MsgLockTokens
 */
export interface MsgLockTokens {
    /**
     * @generated from protobuf field: string owner = 1;
     */
    owner: string;
    /**
     * @generated from protobuf field: google.protobuf.Duration duration = 2;
     */
    duration?: Duration;
    /**
     * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin coins = 3;
     */
    coins: Coin[];
}
/**
 * @generated from protobuf message osmosis.lockup.MsgLockTokensResponse
 */
export interface MsgLockTokensResponse {
    /**
     * @generated from protobuf field: uint64 ID = 1 [json_name = "ID"];
     */
    iD: bigint;
}
/**
 * @generated from protobuf message osmosis.lockup.MsgBeginUnlockingAll
 */
export interface MsgBeginUnlockingAll {
    /**
     * @generated from protobuf field: string owner = 1;
     */
    owner: string;
}
/**
 * @generated from protobuf message osmosis.lockup.MsgBeginUnlockingAllResponse
 */
export interface MsgBeginUnlockingAllResponse {
    /**
     * @generated from protobuf field: repeated osmosis.lockup.PeriodLock unlocks = 1;
     */
    unlocks: PeriodLock[];
}
/**
 * @generated from protobuf message osmosis.lockup.MsgBeginUnlocking
 */
export interface MsgBeginUnlocking {
    /**
     * @generated from protobuf field: string owner = 1;
     */
    owner: string;
    /**
     * @generated from protobuf field: uint64 ID = 2 [json_name = "ID"];
     */
    iD: bigint;
    /**
     * Amount of unlocking coins. Unlock all if not set.
     *
     * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin coins = 3;
     */
    coins: Coin[];
}
/**
 * @generated from protobuf message osmosis.lockup.MsgBeginUnlockingResponse
 */
export interface MsgBeginUnlockingResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class MsgLockTokens$Type extends MessageType<MsgLockTokens> {
    constructor() {
        super("osmosis.lockup.MsgLockTokens", [
            { no: 1, name: "owner", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"owner\"" } },
            { no: 2, name: "duration", kind: "message", T: () => Duration, options: { "gogoproto.nullable": false, "gogoproto.jsontag": "duration,omitempty", "gogoproto.moretags": "yaml:\"duration\"", "gogoproto.stdduration": true } },
            { no: 3, name: "coins", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } }
        ]);
    }
    create(value?: PartialMessage<MsgLockTokens>): MsgLockTokens {
        const message = { owner: "", coins: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgLockTokens>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgLockTokens): MsgLockTokens {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string owner */ 1:
                    message.owner = reader.string();
                    break;
                case /* google.protobuf.Duration duration */ 2:
                    message.duration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.duration);
                    break;
                case /* repeated cosmos.base.v1beta1.Coin coins */ 3:
                    message.coins.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgLockTokens, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string owner = 1; */
        if (message.owner !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.owner);
        /* google.protobuf.Duration duration = 2; */
        if (message.duration)
            Duration.internalBinaryWrite(message.duration, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.base.v1beta1.Coin coins = 3; */
        for (let i = 0; i < message.coins.length; i++)
            Coin.internalBinaryWrite(message.coins[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.lockup.MsgLockTokens
 */
export const MsgLockTokens = new MsgLockTokens$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgLockTokensResponse$Type extends MessageType<MsgLockTokensResponse> {
    constructor() {
        super("osmosis.lockup.MsgLockTokensResponse", [
            { no: 1, name: "ID", kind: "scalar", jsonName: "ID", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MsgLockTokensResponse>): MsgLockTokensResponse {
        const message = { iD: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgLockTokensResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgLockTokensResponse): MsgLockTokensResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 ID = 1 [json_name = "ID"];*/ 1:
                    message.iD = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgLockTokensResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 ID = 1 [json_name = "ID"]; */
        if (message.iD !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.iD);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.lockup.MsgLockTokensResponse
 */
export const MsgLockTokensResponse = new MsgLockTokensResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgBeginUnlockingAll$Type extends MessageType<MsgBeginUnlockingAll> {
    constructor() {
        super("osmosis.lockup.MsgBeginUnlockingAll", [
            { no: 1, name: "owner", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"owner\"" } }
        ]);
    }
    create(value?: PartialMessage<MsgBeginUnlockingAll>): MsgBeginUnlockingAll {
        const message = { owner: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgBeginUnlockingAll>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgBeginUnlockingAll): MsgBeginUnlockingAll {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string owner */ 1:
                    message.owner = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgBeginUnlockingAll, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string owner = 1; */
        if (message.owner !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.owner);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.lockup.MsgBeginUnlockingAll
 */
export const MsgBeginUnlockingAll = new MsgBeginUnlockingAll$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgBeginUnlockingAllResponse$Type extends MessageType<MsgBeginUnlockingAllResponse> {
    constructor() {
        super("osmosis.lockup.MsgBeginUnlockingAllResponse", [
            { no: 1, name: "unlocks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PeriodLock }
        ]);
    }
    create(value?: PartialMessage<MsgBeginUnlockingAllResponse>): MsgBeginUnlockingAllResponse {
        const message = { unlocks: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgBeginUnlockingAllResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgBeginUnlockingAllResponse): MsgBeginUnlockingAllResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated osmosis.lockup.PeriodLock unlocks */ 1:
                    message.unlocks.push(PeriodLock.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgBeginUnlockingAllResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated osmosis.lockup.PeriodLock unlocks = 1; */
        for (let i = 0; i < message.unlocks.length; i++)
            PeriodLock.internalBinaryWrite(message.unlocks[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.lockup.MsgBeginUnlockingAllResponse
 */
export const MsgBeginUnlockingAllResponse = new MsgBeginUnlockingAllResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgBeginUnlocking$Type extends MessageType<MsgBeginUnlocking> {
    constructor() {
        super("osmosis.lockup.MsgBeginUnlocking", [
            { no: 1, name: "owner", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"owner\"" } },
            { no: 2, name: "ID", kind: "scalar", jsonName: "ID", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "coins", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } }
        ]);
    }
    create(value?: PartialMessage<MsgBeginUnlocking>): MsgBeginUnlocking {
        const message = { owner: "", iD: 0n, coins: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgBeginUnlocking>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgBeginUnlocking): MsgBeginUnlocking {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string owner */ 1:
                    message.owner = reader.string();
                    break;
                case /* uint64 ID = 2 [json_name = "ID"];*/ 2:
                    message.iD = reader.uint64().toBigInt();
                    break;
                case /* repeated cosmos.base.v1beta1.Coin coins */ 3:
                    message.coins.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgBeginUnlocking, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string owner = 1; */
        if (message.owner !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.owner);
        /* uint64 ID = 2 [json_name = "ID"]; */
        if (message.iD !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.iD);
        /* repeated cosmos.base.v1beta1.Coin coins = 3; */
        for (let i = 0; i < message.coins.length; i++)
            Coin.internalBinaryWrite(message.coins[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.lockup.MsgBeginUnlocking
 */
export const MsgBeginUnlocking = new MsgBeginUnlocking$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgBeginUnlockingResponse$Type extends MessageType<MsgBeginUnlockingResponse> {
    constructor() {
        super("osmosis.lockup.MsgBeginUnlockingResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<MsgBeginUnlockingResponse>): MsgBeginUnlockingResponse {
        const message = { success: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgBeginUnlockingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgBeginUnlockingResponse): MsgBeginUnlockingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgBeginUnlockingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.lockup.MsgBeginUnlockingResponse
 */
export const MsgBeginUnlockingResponse = new MsgBeginUnlockingResponse$Type();
/**
 * @generated ServiceType for protobuf service osmosis.lockup.Msg
 */
export const Msg = new ServiceType("osmosis.lockup.Msg", [
    { name: "LockTokens", options: {}, I: MsgLockTokens, O: MsgLockTokensResponse },
    { name: "BeginUnlockingAll", options: {}, I: MsgBeginUnlockingAll, O: MsgBeginUnlockingAllResponse },
    { name: "BeginUnlocking", options: {}, I: MsgBeginUnlocking, O: MsgBeginUnlockingResponse }
]);
