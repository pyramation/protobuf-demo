// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "osmosis/pool-incentives/v1beta1/query.proto" (package "osmosis.poolincentives.v1beta1", syntax proto3),// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Query } from "./query";
import type { QueryExternalIncentiveGaugesResponse } from "./query";
import type { QueryExternalIncentiveGaugesRequest } from "./query";
import type { QueryIncentivizedPoolsResponse } from "./query";
import type { QueryIncentivizedPoolsRequest } from "./query";
import type { QueryLockableDurationsResponse } from "./query";
import type { QueryLockableDurationsRequest } from "./query";
import type { QueryParamsResponse } from "./query";
import type { QueryParamsRequest } from "./query";
import type { QueryDistrInfoResponse } from "./query";
import type { QueryDistrInfoRequest } from "./query";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { QueryGaugeIdsResponse } from "./query";
import type { QueryGaugeIdsRequest } from "./query";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service osmosis.poolincentives.v1beta1.Query
 */
export interface IQueryClient {
    /**
     * GaugeIds takes the pool id and returns the matching gauge ids and durations
     *
     * @generated from protobuf rpc: GaugeIds(osmosis.poolincentives.v1beta1.QueryGaugeIdsRequest) returns (osmosis.poolincentives.v1beta1.QueryGaugeIdsResponse);
     */
    gaugeIds(input: QueryGaugeIdsRequest, options?: RpcOptions): UnaryCall<QueryGaugeIdsRequest, QueryGaugeIdsResponse>;
    /**
     * @generated from protobuf rpc: DistrInfo(osmosis.poolincentives.v1beta1.QueryDistrInfoRequest) returns (osmosis.poolincentives.v1beta1.QueryDistrInfoResponse);
     */
    distrInfo(input: QueryDistrInfoRequest, options?: RpcOptions): UnaryCall<QueryDistrInfoRequest, QueryDistrInfoResponse>;
    /**
     * @generated from protobuf rpc: Params(osmosis.poolincentives.v1beta1.QueryParamsRequest) returns (osmosis.poolincentives.v1beta1.QueryParamsResponse);
     */
    params(input: QueryParamsRequest, options?: RpcOptions): UnaryCall<QueryParamsRequest, QueryParamsResponse>;
    /**
     * @generated from protobuf rpc: LockableDurations(osmosis.poolincentives.v1beta1.QueryLockableDurationsRequest) returns (osmosis.poolincentives.v1beta1.QueryLockableDurationsResponse);
     */
    lockableDurations(input: QueryLockableDurationsRequest, options?: RpcOptions): UnaryCall<QueryLockableDurationsRequest, QueryLockableDurationsResponse>;
    /**
     * @generated from protobuf rpc: IncentivizedPools(osmosis.poolincentives.v1beta1.QueryIncentivizedPoolsRequest) returns (osmosis.poolincentives.v1beta1.QueryIncentivizedPoolsResponse);
     */
    incentivizedPools(input: QueryIncentivizedPoolsRequest, options?: RpcOptions): UnaryCall<QueryIncentivizedPoolsRequest, QueryIncentivizedPoolsResponse>;
    /**
     * @generated from protobuf rpc: ExternalIncentiveGauges(osmosis.poolincentives.v1beta1.QueryExternalIncentiveGaugesRequest) returns (osmosis.poolincentives.v1beta1.QueryExternalIncentiveGaugesResponse);
     */
    externalIncentiveGauges(input: QueryExternalIncentiveGaugesRequest, options?: RpcOptions): UnaryCall<QueryExternalIncentiveGaugesRequest, QueryExternalIncentiveGaugesResponse>;
}
/**
 * @generated from protobuf service osmosis.poolincentives.v1beta1.Query
 */
export class QueryClient implements IQueryClient, ServiceInfo {
    typeName = Query.typeName;
    methods = Query.methods;
    options = Query.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * GaugeIds takes the pool id and returns the matching gauge ids and durations
     *
     * @generated from protobuf rpc: GaugeIds(osmosis.poolincentives.v1beta1.QueryGaugeIdsRequest) returns (osmosis.poolincentives.v1beta1.QueryGaugeIdsResponse);
     */
    gaugeIds(input: QueryGaugeIdsRequest, options?: RpcOptions): UnaryCall<QueryGaugeIdsRequest, QueryGaugeIdsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryGaugeIdsRequest, QueryGaugeIdsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DistrInfo(osmosis.poolincentives.v1beta1.QueryDistrInfoRequest) returns (osmosis.poolincentives.v1beta1.QueryDistrInfoResponse);
     */
    distrInfo(input: QueryDistrInfoRequest, options?: RpcOptions): UnaryCall<QueryDistrInfoRequest, QueryDistrInfoResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryDistrInfoRequest, QueryDistrInfoResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Params(osmosis.poolincentives.v1beta1.QueryParamsRequest) returns (osmosis.poolincentives.v1beta1.QueryParamsResponse);
     */
    params(input: QueryParamsRequest, options?: RpcOptions): UnaryCall<QueryParamsRequest, QueryParamsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryParamsRequest, QueryParamsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: LockableDurations(osmosis.poolincentives.v1beta1.QueryLockableDurationsRequest) returns (osmosis.poolincentives.v1beta1.QueryLockableDurationsResponse);
     */
    lockableDurations(input: QueryLockableDurationsRequest, options?: RpcOptions): UnaryCall<QueryLockableDurationsRequest, QueryLockableDurationsResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryLockableDurationsRequest, QueryLockableDurationsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: IncentivizedPools(osmosis.poolincentives.v1beta1.QueryIncentivizedPoolsRequest) returns (osmosis.poolincentives.v1beta1.QueryIncentivizedPoolsResponse);
     */
    incentivizedPools(input: QueryIncentivizedPoolsRequest, options?: RpcOptions): UnaryCall<QueryIncentivizedPoolsRequest, QueryIncentivizedPoolsResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryIncentivizedPoolsRequest, QueryIncentivizedPoolsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ExternalIncentiveGauges(osmosis.poolincentives.v1beta1.QueryExternalIncentiveGaugesRequest) returns (osmosis.poolincentives.v1beta1.QueryExternalIncentiveGaugesResponse);
     */
    externalIncentiveGauges(input: QueryExternalIncentiveGaugesRequest, options?: RpcOptions): UnaryCall<QueryExternalIncentiveGaugesRequest, QueryExternalIncentiveGaugesResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryExternalIncentiveGaugesRequest, QueryExternalIncentiveGaugesResponse>("unary", this._transport, method, opt, input);
    }
}
