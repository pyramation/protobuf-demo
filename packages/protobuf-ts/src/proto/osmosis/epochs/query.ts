// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "osmosis/epochs/query.proto" (package "osmosis.epochs.v1beta1", syntax proto3),// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { EpochInfo } from "./genesis";
/**
 * @generated from protobuf message osmosis.epochs.v1beta1.QueryEpochsInfoRequest
 */
export interface QueryEpochsInfoRequest {
}
/**
 * @generated from protobuf message osmosis.epochs.v1beta1.QueryEpochsInfoResponse
 */
export interface QueryEpochsInfoResponse {
    /**
     * @generated from protobuf field: repeated osmosis.epochs.v1beta1.EpochInfo epochs = 1;
     */
    epochs: EpochInfo[];
}
/**
 * @generated from protobuf message osmosis.epochs.v1beta1.QueryCurrentEpochRequest
 */
export interface QueryCurrentEpochRequest {
    /**
     * @generated from protobuf field: string identifier = 1;
     */
    identifier: string;
}
/**
 * @generated from protobuf message osmosis.epochs.v1beta1.QueryCurrentEpochResponse
 */
export interface QueryCurrentEpochResponse {
    /**
     * @generated from protobuf field: int64 current_epoch = 1;
     */
    currentEpoch: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class QueryEpochsInfoRequest$Type extends MessageType<QueryEpochsInfoRequest> {
    constructor() {
        super("osmosis.epochs.v1beta1.QueryEpochsInfoRequest", []);
    }
    create(value?: PartialMessage<QueryEpochsInfoRequest>): QueryEpochsInfoRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryEpochsInfoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryEpochsInfoRequest): QueryEpochsInfoRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryEpochsInfoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.epochs.v1beta1.QueryEpochsInfoRequest
 */
export const QueryEpochsInfoRequest = new QueryEpochsInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryEpochsInfoResponse$Type extends MessageType<QueryEpochsInfoResponse> {
    constructor() {
        super("osmosis.epochs.v1beta1.QueryEpochsInfoResponse", [
            { no: 1, name: "epochs", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => EpochInfo, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<QueryEpochsInfoResponse>): QueryEpochsInfoResponse {
        const message = { epochs: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryEpochsInfoResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryEpochsInfoResponse): QueryEpochsInfoResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated osmosis.epochs.v1beta1.EpochInfo epochs */ 1:
                    message.epochs.push(EpochInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryEpochsInfoResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated osmosis.epochs.v1beta1.EpochInfo epochs = 1; */
        for (let i = 0; i < message.epochs.length; i++)
            EpochInfo.internalBinaryWrite(message.epochs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.epochs.v1beta1.QueryEpochsInfoResponse
 */
export const QueryEpochsInfoResponse = new QueryEpochsInfoResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryCurrentEpochRequest$Type extends MessageType<QueryCurrentEpochRequest> {
    constructor() {
        super("osmosis.epochs.v1beta1.QueryCurrentEpochRequest", [
            { no: 1, name: "identifier", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryCurrentEpochRequest>): QueryCurrentEpochRequest {
        const message = { identifier: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryCurrentEpochRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryCurrentEpochRequest): QueryCurrentEpochRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string identifier */ 1:
                    message.identifier = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryCurrentEpochRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string identifier = 1; */
        if (message.identifier !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.identifier);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.epochs.v1beta1.QueryCurrentEpochRequest
 */
export const QueryCurrentEpochRequest = new QueryCurrentEpochRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryCurrentEpochResponse$Type extends MessageType<QueryCurrentEpochResponse> {
    constructor() {
        super("osmosis.epochs.v1beta1.QueryCurrentEpochResponse", [
            { no: 1, name: "current_epoch", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<QueryCurrentEpochResponse>): QueryCurrentEpochResponse {
        const message = { currentEpoch: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryCurrentEpochResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryCurrentEpochResponse): QueryCurrentEpochResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 current_epoch */ 1:
                    message.currentEpoch = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryCurrentEpochResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 current_epoch = 1; */
        if (message.currentEpoch !== 0n)
            writer.tag(1, WireType.Varint).int64(message.currentEpoch);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.epochs.v1beta1.QueryCurrentEpochResponse
 */
export const QueryCurrentEpochResponse = new QueryCurrentEpochResponse$Type();
/**
 * @generated ServiceType for protobuf service osmosis.epochs.v1beta1.Query
 */
export const Query = new ServiceType("osmosis.epochs.v1beta1.Query", [
    { name: "EpochInfos", options: { "google.api.http": { get: "/osmosis/epochs/v1beta1/epochs" } }, I: QueryEpochsInfoRequest, O: QueryEpochsInfoResponse },
    { name: "CurrentEpoch", options: { "google.api.http": { get: "/osmosis/epochs/v1beta1/current_epoch" } }, I: QueryCurrentEpochRequest, O: QueryCurrentEpochResponse }
]);
