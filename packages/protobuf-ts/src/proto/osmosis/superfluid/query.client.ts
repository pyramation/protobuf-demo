// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "osmosis/superfluid/query.proto" (package "osmosis.superfluid", syntax proto3),// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Query } from "./query";
import type { EstimateSuperfluidDelegatedAmountByValidatorDenomResponse } from "./query";
import type { EstimateSuperfluidDelegatedAmountByValidatorDenomRequest } from "./query";
import type { SuperfluidDelegationsByValidatorDenomResponse } from "./query";
import type { SuperfluidDelegationsByValidatorDenomRequest } from "./query";
import type { SuperfluidUndelegationsByDelegatorResponse } from "./query";
import type { SuperfluidUndelegationsByDelegatorRequest } from "./query";
import type { SuperfluidDelegationsByDelegatorResponse } from "./query";
import type { SuperfluidDelegationsByDelegatorRequest } from "./query";
import type { SuperfluidDelegationAmountResponse } from "./query";
import type { SuperfluidDelegationAmountRequest } from "./query";
import type { TotalSuperfluidDelegationsResponse } from "./query";
import type { TotalSuperfluidDelegationsRequest } from "./query";
import type { ConnectedIntermediaryAccountResponse } from "./query";
import type { ConnectedIntermediaryAccountRequest } from "./query";
import type { AllIntermediaryAccountsResponse } from "./query";
import type { AllIntermediaryAccountsRequest } from "./query";
import type { AssetMultiplierResponse } from "./query";
import type { AssetMultiplierRequest } from "./query";
import type { AllAssetsResponse } from "./query";
import type { AllAssetsRequest } from "./query";
import type { AssetTypeResponse } from "./query";
import type { AssetTypeRequest } from "./query";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { QueryParamsResponse } from "./query";
import type { QueryParamsRequest } from "./query";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service osmosis.superfluid.Query
 */
export interface IQueryClient {
    /**
     * Params returns the total set of minting parameters.
     *
     * @generated from protobuf rpc: Params(osmosis.superfluid.QueryParamsRequest) returns (osmosis.superfluid.QueryParamsResponse);
     */
    params(input: QueryParamsRequest, options?: RpcOptions): UnaryCall<QueryParamsRequest, QueryParamsResponse>;
    /**
     * Returns superfluid asset type
     *
     * @generated from protobuf rpc: AssetType(osmosis.superfluid.AssetTypeRequest) returns (osmosis.superfluid.AssetTypeResponse);
     */
    assetType(input: AssetTypeRequest, options?: RpcOptions): UnaryCall<AssetTypeRequest, AssetTypeResponse>;
    /**
     * Returns all superfluid asset types
     *
     * @generated from protobuf rpc: AllAssets(osmosis.superfluid.AllAssetsRequest) returns (osmosis.superfluid.AllAssetsResponse);
     */
    allAssets(input: AllAssetsRequest, options?: RpcOptions): UnaryCall<AllAssetsRequest, AllAssetsResponse>;
    /**
     * Returns superfluid asset Multiplier
     *
     * @generated from protobuf rpc: AssetMultiplier(osmosis.superfluid.AssetMultiplierRequest) returns (osmosis.superfluid.AssetMultiplierResponse);
     */
    assetMultiplier(input: AssetMultiplierRequest, options?: RpcOptions): UnaryCall<AssetMultiplierRequest, AssetMultiplierResponse>;
    /**
     * Returns all superfluid intermediary account
     *
     * @generated from protobuf rpc: AllIntermediaryAccounts(osmosis.superfluid.AllIntermediaryAccountsRequest) returns (osmosis.superfluid.AllIntermediaryAccountsResponse);
     */
    allIntermediaryAccounts(input: AllIntermediaryAccountsRequest, options?: RpcOptions): UnaryCall<AllIntermediaryAccountsRequest, AllIntermediaryAccountsResponse>;
    /**
     * Returns intermediary account connected to a superfluid staked lock by id
     *
     * @generated from protobuf rpc: ConnectedIntermediaryAccount(osmosis.superfluid.ConnectedIntermediaryAccountRequest) returns (osmosis.superfluid.ConnectedIntermediaryAccountResponse);
     */
    connectedIntermediaryAccount(input: ConnectedIntermediaryAccountRequest, options?: RpcOptions): UnaryCall<ConnectedIntermediaryAccountRequest, ConnectedIntermediaryAccountResponse>;
    /**
     * Returns the total amount of osmo superfluidly staked
     * response denominated in uosmo
     *
     * @generated from protobuf rpc: TotalSuperfluidDelegations(osmosis.superfluid.TotalSuperfluidDelegationsRequest) returns (osmosis.superfluid.TotalSuperfluidDelegationsResponse);
     */
    totalSuperfluidDelegations(input: TotalSuperfluidDelegationsRequest, options?: RpcOptions): UnaryCall<TotalSuperfluidDelegationsRequest, TotalSuperfluidDelegationsResponse>;
    /**
     * Returns the coins superfluid delegated for a delegator, validator, denom
     * triplet
     *
     * @generated from protobuf rpc: SuperfluidDelegationAmount(osmosis.superfluid.SuperfluidDelegationAmountRequest) returns (osmosis.superfluid.SuperfluidDelegationAmountResponse);
     */
    superfluidDelegationAmount(input: SuperfluidDelegationAmountRequest, options?: RpcOptions): UnaryCall<SuperfluidDelegationAmountRequest, SuperfluidDelegationAmountResponse>;
    /**
     * Returns all the superfluid poistions for a specific delegator
     *
     * @generated from protobuf rpc: SuperfluidDelegationsByDelegator(osmosis.superfluid.SuperfluidDelegationsByDelegatorRequest) returns (osmosis.superfluid.SuperfluidDelegationsByDelegatorResponse);
     */
    superfluidDelegationsByDelegator(input: SuperfluidDelegationsByDelegatorRequest, options?: RpcOptions): UnaryCall<SuperfluidDelegationsByDelegatorRequest, SuperfluidDelegationsByDelegatorResponse>;
    /**
     * @generated from protobuf rpc: SuperfluidUndelegationsByDelegator(osmosis.superfluid.SuperfluidUndelegationsByDelegatorRequest) returns (osmosis.superfluid.SuperfluidUndelegationsByDelegatorResponse);
     */
    superfluidUndelegationsByDelegator(input: SuperfluidUndelegationsByDelegatorRequest, options?: RpcOptions): UnaryCall<SuperfluidUndelegationsByDelegatorRequest, SuperfluidUndelegationsByDelegatorResponse>;
    /**
     * Returns all the superfluid positions of a specific denom delegated to one
     * validator
     *
     * @generated from protobuf rpc: SuperfluidDelegationsByValidatorDenom(osmosis.superfluid.SuperfluidDelegationsByValidatorDenomRequest) returns (osmosis.superfluid.SuperfluidDelegationsByValidatorDenomResponse);
     */
    superfluidDelegationsByValidatorDenom(input: SuperfluidDelegationsByValidatorDenomRequest, options?: RpcOptions): UnaryCall<SuperfluidDelegationsByValidatorDenomRequest, SuperfluidDelegationsByValidatorDenomResponse>;
    /**
     * Returns the amount of a specific denom delegated to a specific validator
     * This is labeled an estimate, because the way it calculates the amount can
     * lead rounding errors from the true delegated amount
     *
     * @generated from protobuf rpc: EstimateSuperfluidDelegatedAmountByValidatorDenom(osmosis.superfluid.EstimateSuperfluidDelegatedAmountByValidatorDenomRequest) returns (osmosis.superfluid.EstimateSuperfluidDelegatedAmountByValidatorDenomResponse);
     */
    estimateSuperfluidDelegatedAmountByValidatorDenom(input: EstimateSuperfluidDelegatedAmountByValidatorDenomRequest, options?: RpcOptions): UnaryCall<EstimateSuperfluidDelegatedAmountByValidatorDenomRequest, EstimateSuperfluidDelegatedAmountByValidatorDenomResponse>;
}
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service osmosis.superfluid.Query
 */
export class QueryClient implements IQueryClient, ServiceInfo {
    typeName = Query.typeName;
    methods = Query.methods;
    options = Query.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Params returns the total set of minting parameters.
     *
     * @generated from protobuf rpc: Params(osmosis.superfluid.QueryParamsRequest) returns (osmosis.superfluid.QueryParamsResponse);
     */
    params(input: QueryParamsRequest, options?: RpcOptions): UnaryCall<QueryParamsRequest, QueryParamsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryParamsRequest, QueryParamsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns superfluid asset type
     *
     * @generated from protobuf rpc: AssetType(osmosis.superfluid.AssetTypeRequest) returns (osmosis.superfluid.AssetTypeResponse);
     */
    assetType(input: AssetTypeRequest, options?: RpcOptions): UnaryCall<AssetTypeRequest, AssetTypeResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<AssetTypeRequest, AssetTypeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns all superfluid asset types
     *
     * @generated from protobuf rpc: AllAssets(osmosis.superfluid.AllAssetsRequest) returns (osmosis.superfluid.AllAssetsResponse);
     */
    allAssets(input: AllAssetsRequest, options?: RpcOptions): UnaryCall<AllAssetsRequest, AllAssetsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<AllAssetsRequest, AllAssetsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns superfluid asset Multiplier
     *
     * @generated from protobuf rpc: AssetMultiplier(osmosis.superfluid.AssetMultiplierRequest) returns (osmosis.superfluid.AssetMultiplierResponse);
     */
    assetMultiplier(input: AssetMultiplierRequest, options?: RpcOptions): UnaryCall<AssetMultiplierRequest, AssetMultiplierResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<AssetMultiplierRequest, AssetMultiplierResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns all superfluid intermediary account
     *
     * @generated from protobuf rpc: AllIntermediaryAccounts(osmosis.superfluid.AllIntermediaryAccountsRequest) returns (osmosis.superfluid.AllIntermediaryAccountsResponse);
     */
    allIntermediaryAccounts(input: AllIntermediaryAccountsRequest, options?: RpcOptions): UnaryCall<AllIntermediaryAccountsRequest, AllIntermediaryAccountsResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<AllIntermediaryAccountsRequest, AllIntermediaryAccountsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns intermediary account connected to a superfluid staked lock by id
     *
     * @generated from protobuf rpc: ConnectedIntermediaryAccount(osmosis.superfluid.ConnectedIntermediaryAccountRequest) returns (osmosis.superfluid.ConnectedIntermediaryAccountResponse);
     */
    connectedIntermediaryAccount(input: ConnectedIntermediaryAccountRequest, options?: RpcOptions): UnaryCall<ConnectedIntermediaryAccountRequest, ConnectedIntermediaryAccountResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<ConnectedIntermediaryAccountRequest, ConnectedIntermediaryAccountResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns the total amount of osmo superfluidly staked
     * response denominated in uosmo
     *
     * @generated from protobuf rpc: TotalSuperfluidDelegations(osmosis.superfluid.TotalSuperfluidDelegationsRequest) returns (osmosis.superfluid.TotalSuperfluidDelegationsResponse);
     */
    totalSuperfluidDelegations(input: TotalSuperfluidDelegationsRequest, options?: RpcOptions): UnaryCall<TotalSuperfluidDelegationsRequest, TotalSuperfluidDelegationsResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<TotalSuperfluidDelegationsRequest, TotalSuperfluidDelegationsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns the coins superfluid delegated for a delegator, validator, denom
     * triplet
     *
     * @generated from protobuf rpc: SuperfluidDelegationAmount(osmosis.superfluid.SuperfluidDelegationAmountRequest) returns (osmosis.superfluid.SuperfluidDelegationAmountResponse);
     */
    superfluidDelegationAmount(input: SuperfluidDelegationAmountRequest, options?: RpcOptions): UnaryCall<SuperfluidDelegationAmountRequest, SuperfluidDelegationAmountResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<SuperfluidDelegationAmountRequest, SuperfluidDelegationAmountResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns all the superfluid poistions for a specific delegator
     *
     * @generated from protobuf rpc: SuperfluidDelegationsByDelegator(osmosis.superfluid.SuperfluidDelegationsByDelegatorRequest) returns (osmosis.superfluid.SuperfluidDelegationsByDelegatorResponse);
     */
    superfluidDelegationsByDelegator(input: SuperfluidDelegationsByDelegatorRequest, options?: RpcOptions): UnaryCall<SuperfluidDelegationsByDelegatorRequest, SuperfluidDelegationsByDelegatorResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<SuperfluidDelegationsByDelegatorRequest, SuperfluidDelegationsByDelegatorResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SuperfluidUndelegationsByDelegator(osmosis.superfluid.SuperfluidUndelegationsByDelegatorRequest) returns (osmosis.superfluid.SuperfluidUndelegationsByDelegatorResponse);
     */
    superfluidUndelegationsByDelegator(input: SuperfluidUndelegationsByDelegatorRequest, options?: RpcOptions): UnaryCall<SuperfluidUndelegationsByDelegatorRequest, SuperfluidUndelegationsByDelegatorResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<SuperfluidUndelegationsByDelegatorRequest, SuperfluidUndelegationsByDelegatorResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns all the superfluid positions of a specific denom delegated to one
     * validator
     *
     * @generated from protobuf rpc: SuperfluidDelegationsByValidatorDenom(osmosis.superfluid.SuperfluidDelegationsByValidatorDenomRequest) returns (osmosis.superfluid.SuperfluidDelegationsByValidatorDenomResponse);
     */
    superfluidDelegationsByValidatorDenom(input: SuperfluidDelegationsByValidatorDenomRequest, options?: RpcOptions): UnaryCall<SuperfluidDelegationsByValidatorDenomRequest, SuperfluidDelegationsByValidatorDenomResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<SuperfluidDelegationsByValidatorDenomRequest, SuperfluidDelegationsByValidatorDenomResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns the amount of a specific denom delegated to a specific validator
     * This is labeled an estimate, because the way it calculates the amount can
     * lead rounding errors from the true delegated amount
     *
     * @generated from protobuf rpc: EstimateSuperfluidDelegatedAmountByValidatorDenom(osmosis.superfluid.EstimateSuperfluidDelegatedAmountByValidatorDenomRequest) returns (osmosis.superfluid.EstimateSuperfluidDelegatedAmountByValidatorDenomResponse);
     */
    estimateSuperfluidDelegatedAmountByValidatorDenom(input: EstimateSuperfluidDelegatedAmountByValidatorDenomRequest, options?: RpcOptions): UnaryCall<EstimateSuperfluidDelegatedAmountByValidatorDenomRequest, EstimateSuperfluidDelegatedAmountByValidatorDenomResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<EstimateSuperfluidDelegatedAmountByValidatorDenomRequest, EstimateSuperfluidDelegatedAmountByValidatorDenomResponse>("unary", this._transport, method, opt, input);
    }
}
