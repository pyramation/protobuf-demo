// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "osmosis/superfluid/query.proto" (package "osmosis.superfluid", syntax proto3),// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SyntheticLock } from "../lockup/lock";
import { SuperfluidDelegationRecord } from "./superfluid";
import { Coin } from "../../cosmos/base/v1beta1/coin";
import { PageResponse } from "../../cosmos/base/query/v1beta1/pagination";
import { PageRequest } from "../../cosmos/base/query/v1beta1/pagination";
import { OsmoEquivalentMultiplierRecord } from "./superfluid";
import { SuperfluidAsset } from "./superfluid";
import { SuperfluidAssetType } from "./superfluid";
import { Params } from "./params";
/**
 * @generated from protobuf message osmosis.superfluid.QueryParamsRequest
 */
export interface QueryParamsRequest {
}
/**
 * @generated from protobuf message osmosis.superfluid.QueryParamsResponse
 */
export interface QueryParamsResponse {
    /**
     * params defines the parameters of the module.
     *
     * @generated from protobuf field: osmosis.superfluid.Params params = 1;
     */
    params?: Params;
}
/**
 * @generated from protobuf message osmosis.superfluid.AssetTypeRequest
 */
export interface AssetTypeRequest {
    /**
     * @generated from protobuf field: string denom = 1;
     */
    denom: string;
}
/**
 * @generated from protobuf message osmosis.superfluid.AssetTypeResponse
 */
export interface AssetTypeResponse {
    /**
     * @generated from protobuf field: osmosis.superfluid.SuperfluidAssetType asset_type = 1;
     */
    assetType: SuperfluidAssetType;
}
/**
 * @generated from protobuf message osmosis.superfluid.AllAssetsRequest
 */
export interface AllAssetsRequest {
}
/**
 * @generated from protobuf message osmosis.superfluid.AllAssetsResponse
 */
export interface AllAssetsResponse {
    /**
     * @generated from protobuf field: repeated osmosis.superfluid.SuperfluidAsset assets = 1;
     */
    assets: SuperfluidAsset[];
}
/**
 * @generated from protobuf message osmosis.superfluid.AssetMultiplierRequest
 */
export interface AssetMultiplierRequest {
    /**
     * @generated from protobuf field: string denom = 1;
     */
    denom: string;
}
/**
 * @generated from protobuf message osmosis.superfluid.AssetMultiplierResponse
 */
export interface AssetMultiplierResponse {
    /**
     * @generated from protobuf field: osmosis.superfluid.OsmoEquivalentMultiplierRecord osmo_equivalent_multiplier = 1;
     */
    osmoEquivalentMultiplier?: OsmoEquivalentMultiplierRecord;
}
/**
 * @generated from protobuf message osmosis.superfluid.SuperfluidIntermediaryAccountInfo
 */
export interface SuperfluidIntermediaryAccountInfo {
    /**
     * @generated from protobuf field: string denom = 1;
     */
    denom: string;
    /**
     * @generated from protobuf field: string val_addr = 2;
     */
    valAddr: string;
    /**
     * @generated from protobuf field: uint64 gauge_id = 3;
     */
    gaugeId: bigint;
    /**
     * @generated from protobuf field: string address = 4;
     */
    address: string;
}
/**
 * @generated from protobuf message osmosis.superfluid.AllIntermediaryAccountsRequest
 */
export interface AllIntermediaryAccountsRequest {
    /**
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
     */
    pagination?: PageRequest;
}
/**
 * @generated from protobuf message osmosis.superfluid.AllIntermediaryAccountsResponse
 */
export interface AllIntermediaryAccountsResponse {
    /**
     * @generated from protobuf field: repeated osmosis.superfluid.SuperfluidIntermediaryAccountInfo accounts = 1;
     */
    accounts: SuperfluidIntermediaryAccountInfo[];
    /**
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
     */
    pagination?: PageResponse;
}
/**
 * @generated from protobuf message osmosis.superfluid.ConnectedIntermediaryAccountRequest
 */
export interface ConnectedIntermediaryAccountRequest {
    /**
     * @generated from protobuf field: uint64 lock_id = 1;
     */
    lockId: bigint;
}
/**
 * @generated from protobuf message osmosis.superfluid.ConnectedIntermediaryAccountResponse
 */
export interface ConnectedIntermediaryAccountResponse {
    /**
     * @generated from protobuf field: osmosis.superfluid.SuperfluidIntermediaryAccountInfo account = 1;
     */
    account?: SuperfluidIntermediaryAccountInfo;
}
/**
 * @generated from protobuf message osmosis.superfluid.TotalSuperfluidDelegationsRequest
 */
export interface TotalSuperfluidDelegationsRequest {
}
/**
 * @generated from protobuf message osmosis.superfluid.TotalSuperfluidDelegationsResponse
 */
export interface TotalSuperfluidDelegationsResponse {
    /**
     * @generated from protobuf field: string totalDelegations = 1;
     */
    totalDelegations: string;
}
/**
 * @generated from protobuf message osmosis.superfluid.SuperfluidDelegationAmountRequest
 */
export interface SuperfluidDelegationAmountRequest {
    /**
     * @generated from protobuf field: string delegator_address = 1;
     */
    delegatorAddress: string;
    /**
     * @generated from protobuf field: string validator_address = 2;
     */
    validatorAddress: string;
    /**
     * @generated from protobuf field: string denom = 3;
     */
    denom: string;
}
/**
 * @generated from protobuf message osmosis.superfluid.SuperfluidDelegationAmountResponse
 */
export interface SuperfluidDelegationAmountResponse {
    /**
     * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin amount = 1;
     */
    amount: Coin[];
}
/**
 * @generated from protobuf message osmosis.superfluid.SuperfluidDelegationsByDelegatorRequest
 */
export interface SuperfluidDelegationsByDelegatorRequest {
    /**
     * @generated from protobuf field: string delegator_address = 1;
     */
    delegatorAddress: string;
}
/**
 * @generated from protobuf message osmosis.superfluid.SuperfluidDelegationsByDelegatorResponse
 */
export interface SuperfluidDelegationsByDelegatorResponse {
    /**
     * @generated from protobuf field: repeated osmosis.superfluid.SuperfluidDelegationRecord superfluid_delegation_records = 1;
     */
    superfluidDelegationRecords: SuperfluidDelegationRecord[];
    /**
     * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin total_delegated_coins = 2;
     */
    totalDelegatedCoins: Coin[];
}
/**
 * @generated from protobuf message osmosis.superfluid.SuperfluidUndelegationsByDelegatorRequest
 */
export interface SuperfluidUndelegationsByDelegatorRequest {
    /**
     * @generated from protobuf field: string delegator_address = 1;
     */
    delegatorAddress: string;
    /**
     * @generated from protobuf field: string denom = 2;
     */
    denom: string;
}
/**
 * @generated from protobuf message osmosis.superfluid.SuperfluidUndelegationsByDelegatorResponse
 */
export interface SuperfluidUndelegationsByDelegatorResponse {
    /**
     * @generated from protobuf field: repeated osmosis.superfluid.SuperfluidDelegationRecord superfluid_delegation_records = 1;
     */
    superfluidDelegationRecords: SuperfluidDelegationRecord[];
    /**
     * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin total_undelegated_coins = 2;
     */
    totalUndelegatedCoins: Coin[];
    /**
     * @generated from protobuf field: repeated osmosis.lockup.SyntheticLock synthetic_locks = 3;
     */
    syntheticLocks: SyntheticLock[];
}
/**
 * @generated from protobuf message osmosis.superfluid.SuperfluidDelegationsByValidatorDenomRequest
 */
export interface SuperfluidDelegationsByValidatorDenomRequest {
    /**
     * @generated from protobuf field: string validator_address = 1;
     */
    validatorAddress: string;
    /**
     * @generated from protobuf field: string denom = 2;
     */
    denom: string;
}
/**
 * @generated from protobuf message osmosis.superfluid.SuperfluidDelegationsByValidatorDenomResponse
 */
export interface SuperfluidDelegationsByValidatorDenomResponse {
    /**
     * @generated from protobuf field: repeated osmosis.superfluid.SuperfluidDelegationRecord superfluid_delegation_records = 1;
     */
    superfluidDelegationRecords: SuperfluidDelegationRecord[];
}
/**
 * @generated from protobuf message osmosis.superfluid.EstimateSuperfluidDelegatedAmountByValidatorDenomRequest
 */
export interface EstimateSuperfluidDelegatedAmountByValidatorDenomRequest {
    /**
     * @generated from protobuf field: string validator_address = 1;
     */
    validatorAddress: string;
    /**
     * @generated from protobuf field: string denom = 2;
     */
    denom: string;
}
/**
 * @generated from protobuf message osmosis.superfluid.EstimateSuperfluidDelegatedAmountByValidatorDenomResponse
 */
export interface EstimateSuperfluidDelegatedAmountByValidatorDenomResponse {
    /**
     * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin total_delegated_coins = 1;
     */
    totalDelegatedCoins: Coin[];
}
// @generated message type with reflection information, may provide speed optimized methods
class QueryParamsRequest$Type extends MessageType<QueryParamsRequest> {
    constructor() {
        super("osmosis.superfluid.QueryParamsRequest", []);
    }
    create(value?: PartialMessage<QueryParamsRequest>): QueryParamsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryParamsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryParamsRequest): QueryParamsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryParamsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.QueryParamsRequest
 */
export const QueryParamsRequest = new QueryParamsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryParamsResponse$Type extends MessageType<QueryParamsResponse> {
    constructor() {
        super("osmosis.superfluid.QueryParamsResponse", [
            { no: 1, name: "params", kind: "message", T: () => Params, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<QueryParamsResponse>): QueryParamsResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryParamsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryParamsResponse): QueryParamsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* osmosis.superfluid.Params params */ 1:
                    message.params = Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryParamsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* osmosis.superfluid.Params params = 1; */
        if (message.params)
            Params.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.QueryParamsResponse
 */
export const QueryParamsResponse = new QueryParamsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AssetTypeRequest$Type extends MessageType<AssetTypeRequest> {
    constructor() {
        super("osmosis.superfluid.AssetTypeRequest", [
            { no: 1, name: "denom", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AssetTypeRequest>): AssetTypeRequest {
        const message = { denom: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AssetTypeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AssetTypeRequest): AssetTypeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string denom */ 1:
                    message.denom = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AssetTypeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string denom = 1; */
        if (message.denom !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.denom);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.AssetTypeRequest
 */
export const AssetTypeRequest = new AssetTypeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AssetTypeResponse$Type extends MessageType<AssetTypeResponse> {
    constructor() {
        super("osmosis.superfluid.AssetTypeResponse", [
            { no: 1, name: "asset_type", kind: "enum", T: () => ["osmosis.superfluid.SuperfluidAssetType", SuperfluidAssetType] }
        ]);
    }
    create(value?: PartialMessage<AssetTypeResponse>): AssetTypeResponse {
        const message = { assetType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AssetTypeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AssetTypeResponse): AssetTypeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* osmosis.superfluid.SuperfluidAssetType asset_type */ 1:
                    message.assetType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AssetTypeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* osmosis.superfluid.SuperfluidAssetType asset_type = 1; */
        if (message.assetType !== 0)
            writer.tag(1, WireType.Varint).int32(message.assetType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.AssetTypeResponse
 */
export const AssetTypeResponse = new AssetTypeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AllAssetsRequest$Type extends MessageType<AllAssetsRequest> {
    constructor() {
        super("osmosis.superfluid.AllAssetsRequest", []);
    }
    create(value?: PartialMessage<AllAssetsRequest>): AllAssetsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AllAssetsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AllAssetsRequest): AllAssetsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: AllAssetsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.AllAssetsRequest
 */
export const AllAssetsRequest = new AllAssetsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AllAssetsResponse$Type extends MessageType<AllAssetsResponse> {
    constructor() {
        super("osmosis.superfluid.AllAssetsResponse", [
            { no: 1, name: "assets", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SuperfluidAsset, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<AllAssetsResponse>): AllAssetsResponse {
        const message = { assets: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AllAssetsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AllAssetsResponse): AllAssetsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated osmosis.superfluid.SuperfluidAsset assets */ 1:
                    message.assets.push(SuperfluidAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AllAssetsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated osmosis.superfluid.SuperfluidAsset assets = 1; */
        for (let i = 0; i < message.assets.length; i++)
            SuperfluidAsset.internalBinaryWrite(message.assets[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.AllAssetsResponse
 */
export const AllAssetsResponse = new AllAssetsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AssetMultiplierRequest$Type extends MessageType<AssetMultiplierRequest> {
    constructor() {
        super("osmosis.superfluid.AssetMultiplierRequest", [
            { no: 1, name: "denom", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AssetMultiplierRequest>): AssetMultiplierRequest {
        const message = { denom: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AssetMultiplierRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AssetMultiplierRequest): AssetMultiplierRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string denom */ 1:
                    message.denom = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AssetMultiplierRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string denom = 1; */
        if (message.denom !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.denom);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.AssetMultiplierRequest
 */
export const AssetMultiplierRequest = new AssetMultiplierRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AssetMultiplierResponse$Type extends MessageType<AssetMultiplierResponse> {
    constructor() {
        super("osmosis.superfluid.AssetMultiplierResponse", [
            { no: 1, name: "osmo_equivalent_multiplier", kind: "message", T: () => OsmoEquivalentMultiplierRecord }
        ]);
    }
    create(value?: PartialMessage<AssetMultiplierResponse>): AssetMultiplierResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AssetMultiplierResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AssetMultiplierResponse): AssetMultiplierResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* osmosis.superfluid.OsmoEquivalentMultiplierRecord osmo_equivalent_multiplier */ 1:
                    message.osmoEquivalentMultiplier = OsmoEquivalentMultiplierRecord.internalBinaryRead(reader, reader.uint32(), options, message.osmoEquivalentMultiplier);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AssetMultiplierResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* osmosis.superfluid.OsmoEquivalentMultiplierRecord osmo_equivalent_multiplier = 1; */
        if (message.osmoEquivalentMultiplier)
            OsmoEquivalentMultiplierRecord.internalBinaryWrite(message.osmoEquivalentMultiplier, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.AssetMultiplierResponse
 */
export const AssetMultiplierResponse = new AssetMultiplierResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SuperfluidIntermediaryAccountInfo$Type extends MessageType<SuperfluidIntermediaryAccountInfo> {
    constructor() {
        super("osmosis.superfluid.SuperfluidIntermediaryAccountInfo", [
            { no: 1, name: "denom", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "val_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "gauge_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SuperfluidIntermediaryAccountInfo>): SuperfluidIntermediaryAccountInfo {
        const message = { denom: "", valAddr: "", gaugeId: 0n, address: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SuperfluidIntermediaryAccountInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SuperfluidIntermediaryAccountInfo): SuperfluidIntermediaryAccountInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string denom */ 1:
                    message.denom = reader.string();
                    break;
                case /* string val_addr */ 2:
                    message.valAddr = reader.string();
                    break;
                case /* uint64 gauge_id */ 3:
                    message.gaugeId = reader.uint64().toBigInt();
                    break;
                case /* string address */ 4:
                    message.address = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SuperfluidIntermediaryAccountInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string denom = 1; */
        if (message.denom !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.denom);
        /* string val_addr = 2; */
        if (message.valAddr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.valAddr);
        /* uint64 gauge_id = 3; */
        if (message.gaugeId !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.gaugeId);
        /* string address = 4; */
        if (message.address !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.address);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.SuperfluidIntermediaryAccountInfo
 */
export const SuperfluidIntermediaryAccountInfo = new SuperfluidIntermediaryAccountInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AllIntermediaryAccountsRequest$Type extends MessageType<AllIntermediaryAccountsRequest> {
    constructor() {
        super("osmosis.superfluid.AllIntermediaryAccountsRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value?: PartialMessage<AllIntermediaryAccountsRequest>): AllIntermediaryAccountsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AllIntermediaryAccountsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AllIntermediaryAccountsRequest): AllIntermediaryAccountsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 1:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AllIntermediaryAccountsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.base.query.v1beta1.PageRequest pagination = 1; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.AllIntermediaryAccountsRequest
 */
export const AllIntermediaryAccountsRequest = new AllIntermediaryAccountsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AllIntermediaryAccountsResponse$Type extends MessageType<AllIntermediaryAccountsResponse> {
    constructor() {
        super("osmosis.superfluid.AllIntermediaryAccountsResponse", [
            { no: 1, name: "accounts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SuperfluidIntermediaryAccountInfo, options: { "gogoproto.nullable": false } },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value?: PartialMessage<AllIntermediaryAccountsResponse>): AllIntermediaryAccountsResponse {
        const message = { accounts: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AllIntermediaryAccountsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AllIntermediaryAccountsResponse): AllIntermediaryAccountsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated osmosis.superfluid.SuperfluidIntermediaryAccountInfo accounts */ 1:
                    message.accounts.push(SuperfluidIntermediaryAccountInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AllIntermediaryAccountsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated osmosis.superfluid.SuperfluidIntermediaryAccountInfo accounts = 1; */
        for (let i = 0; i < message.accounts.length; i++)
            SuperfluidIntermediaryAccountInfo.internalBinaryWrite(message.accounts[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.AllIntermediaryAccountsResponse
 */
export const AllIntermediaryAccountsResponse = new AllIntermediaryAccountsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConnectedIntermediaryAccountRequest$Type extends MessageType<ConnectedIntermediaryAccountRequest> {
    constructor() {
        super("osmosis.superfluid.ConnectedIntermediaryAccountRequest", [
            { no: 1, name: "lock_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ConnectedIntermediaryAccountRequest>): ConnectedIntermediaryAccountRequest {
        const message = { lockId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ConnectedIntermediaryAccountRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConnectedIntermediaryAccountRequest): ConnectedIntermediaryAccountRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 lock_id */ 1:
                    message.lockId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConnectedIntermediaryAccountRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 lock_id = 1; */
        if (message.lockId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.lockId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.ConnectedIntermediaryAccountRequest
 */
export const ConnectedIntermediaryAccountRequest = new ConnectedIntermediaryAccountRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConnectedIntermediaryAccountResponse$Type extends MessageType<ConnectedIntermediaryAccountResponse> {
    constructor() {
        super("osmosis.superfluid.ConnectedIntermediaryAccountResponse", [
            { no: 1, name: "account", kind: "message", T: () => SuperfluidIntermediaryAccountInfo }
        ]);
    }
    create(value?: PartialMessage<ConnectedIntermediaryAccountResponse>): ConnectedIntermediaryAccountResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ConnectedIntermediaryAccountResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConnectedIntermediaryAccountResponse): ConnectedIntermediaryAccountResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* osmosis.superfluid.SuperfluidIntermediaryAccountInfo account */ 1:
                    message.account = SuperfluidIntermediaryAccountInfo.internalBinaryRead(reader, reader.uint32(), options, message.account);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConnectedIntermediaryAccountResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* osmosis.superfluid.SuperfluidIntermediaryAccountInfo account = 1; */
        if (message.account)
            SuperfluidIntermediaryAccountInfo.internalBinaryWrite(message.account, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.ConnectedIntermediaryAccountResponse
 */
export const ConnectedIntermediaryAccountResponse = new ConnectedIntermediaryAccountResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TotalSuperfluidDelegationsRequest$Type extends MessageType<TotalSuperfluidDelegationsRequest> {
    constructor() {
        super("osmosis.superfluid.TotalSuperfluidDelegationsRequest", []);
    }
    create(value?: PartialMessage<TotalSuperfluidDelegationsRequest>): TotalSuperfluidDelegationsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TotalSuperfluidDelegationsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TotalSuperfluidDelegationsRequest): TotalSuperfluidDelegationsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: TotalSuperfluidDelegationsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.TotalSuperfluidDelegationsRequest
 */
export const TotalSuperfluidDelegationsRequest = new TotalSuperfluidDelegationsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TotalSuperfluidDelegationsResponse$Type extends MessageType<TotalSuperfluidDelegationsResponse> {
    constructor() {
        super("osmosis.superfluid.TotalSuperfluidDelegationsResponse", [
            { no: 1, name: "totalDelegations", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int", "gogoproto.moretags": "yaml:\"total_superfluid_delegations\"" } }
        ]);
    }
    create(value?: PartialMessage<TotalSuperfluidDelegationsResponse>): TotalSuperfluidDelegationsResponse {
        const message = { totalDelegations: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TotalSuperfluidDelegationsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TotalSuperfluidDelegationsResponse): TotalSuperfluidDelegationsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string totalDelegations */ 1:
                    message.totalDelegations = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TotalSuperfluidDelegationsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string totalDelegations = 1; */
        if (message.totalDelegations !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.totalDelegations);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.TotalSuperfluidDelegationsResponse
 */
export const TotalSuperfluidDelegationsResponse = new TotalSuperfluidDelegationsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SuperfluidDelegationAmountRequest$Type extends MessageType<SuperfluidDelegationAmountRequest> {
    constructor() {
        super("osmosis.superfluid.SuperfluidDelegationAmountRequest", [
            { no: 1, name: "delegator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "validator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "denom", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SuperfluidDelegationAmountRequest>): SuperfluidDelegationAmountRequest {
        const message = { delegatorAddress: "", validatorAddress: "", denom: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SuperfluidDelegationAmountRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SuperfluidDelegationAmountRequest): SuperfluidDelegationAmountRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string delegator_address */ 1:
                    message.delegatorAddress = reader.string();
                    break;
                case /* string validator_address */ 2:
                    message.validatorAddress = reader.string();
                    break;
                case /* string denom */ 3:
                    message.denom = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SuperfluidDelegationAmountRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string delegator_address = 1; */
        if (message.delegatorAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.delegatorAddress);
        /* string validator_address = 2; */
        if (message.validatorAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.validatorAddress);
        /* string denom = 3; */
        if (message.denom !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.denom);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.SuperfluidDelegationAmountRequest
 */
export const SuperfluidDelegationAmountRequest = new SuperfluidDelegationAmountRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SuperfluidDelegationAmountResponse$Type extends MessageType<SuperfluidDelegationAmountResponse> {
    constructor() {
        super("osmosis.superfluid.SuperfluidDelegationAmountResponse", [
            { no: 1, name: "amount", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } }
        ]);
    }
    create(value?: PartialMessage<SuperfluidDelegationAmountResponse>): SuperfluidDelegationAmountResponse {
        const message = { amount: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SuperfluidDelegationAmountResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SuperfluidDelegationAmountResponse): SuperfluidDelegationAmountResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.base.v1beta1.Coin amount */ 1:
                    message.amount.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SuperfluidDelegationAmountResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated cosmos.base.v1beta1.Coin amount = 1; */
        for (let i = 0; i < message.amount.length; i++)
            Coin.internalBinaryWrite(message.amount[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.SuperfluidDelegationAmountResponse
 */
export const SuperfluidDelegationAmountResponse = new SuperfluidDelegationAmountResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SuperfluidDelegationsByDelegatorRequest$Type extends MessageType<SuperfluidDelegationsByDelegatorRequest> {
    constructor() {
        super("osmosis.superfluid.SuperfluidDelegationsByDelegatorRequest", [
            { no: 1, name: "delegator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SuperfluidDelegationsByDelegatorRequest>): SuperfluidDelegationsByDelegatorRequest {
        const message = { delegatorAddress: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SuperfluidDelegationsByDelegatorRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SuperfluidDelegationsByDelegatorRequest): SuperfluidDelegationsByDelegatorRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string delegator_address */ 1:
                    message.delegatorAddress = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SuperfluidDelegationsByDelegatorRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string delegator_address = 1; */
        if (message.delegatorAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.delegatorAddress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.SuperfluidDelegationsByDelegatorRequest
 */
export const SuperfluidDelegationsByDelegatorRequest = new SuperfluidDelegationsByDelegatorRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SuperfluidDelegationsByDelegatorResponse$Type extends MessageType<SuperfluidDelegationsByDelegatorResponse> {
    constructor() {
        super("osmosis.superfluid.SuperfluidDelegationsByDelegatorResponse", [
            { no: 1, name: "superfluid_delegation_records", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SuperfluidDelegationRecord, options: { "gogoproto.nullable": false } },
            { no: 2, name: "total_delegated_coins", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } }
        ]);
    }
    create(value?: PartialMessage<SuperfluidDelegationsByDelegatorResponse>): SuperfluidDelegationsByDelegatorResponse {
        const message = { superfluidDelegationRecords: [], totalDelegatedCoins: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SuperfluidDelegationsByDelegatorResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SuperfluidDelegationsByDelegatorResponse): SuperfluidDelegationsByDelegatorResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated osmosis.superfluid.SuperfluidDelegationRecord superfluid_delegation_records */ 1:
                    message.superfluidDelegationRecords.push(SuperfluidDelegationRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated cosmos.base.v1beta1.Coin total_delegated_coins */ 2:
                    message.totalDelegatedCoins.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SuperfluidDelegationsByDelegatorResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated osmosis.superfluid.SuperfluidDelegationRecord superfluid_delegation_records = 1; */
        for (let i = 0; i < message.superfluidDelegationRecords.length; i++)
            SuperfluidDelegationRecord.internalBinaryWrite(message.superfluidDelegationRecords[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.base.v1beta1.Coin total_delegated_coins = 2; */
        for (let i = 0; i < message.totalDelegatedCoins.length; i++)
            Coin.internalBinaryWrite(message.totalDelegatedCoins[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.SuperfluidDelegationsByDelegatorResponse
 */
export const SuperfluidDelegationsByDelegatorResponse = new SuperfluidDelegationsByDelegatorResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SuperfluidUndelegationsByDelegatorRequest$Type extends MessageType<SuperfluidUndelegationsByDelegatorRequest> {
    constructor() {
        super("osmosis.superfluid.SuperfluidUndelegationsByDelegatorRequest", [
            { no: 1, name: "delegator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "denom", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SuperfluidUndelegationsByDelegatorRequest>): SuperfluidUndelegationsByDelegatorRequest {
        const message = { delegatorAddress: "", denom: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SuperfluidUndelegationsByDelegatorRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SuperfluidUndelegationsByDelegatorRequest): SuperfluidUndelegationsByDelegatorRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string delegator_address */ 1:
                    message.delegatorAddress = reader.string();
                    break;
                case /* string denom */ 2:
                    message.denom = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SuperfluidUndelegationsByDelegatorRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string delegator_address = 1; */
        if (message.delegatorAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.delegatorAddress);
        /* string denom = 2; */
        if (message.denom !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.denom);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.SuperfluidUndelegationsByDelegatorRequest
 */
export const SuperfluidUndelegationsByDelegatorRequest = new SuperfluidUndelegationsByDelegatorRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SuperfluidUndelegationsByDelegatorResponse$Type extends MessageType<SuperfluidUndelegationsByDelegatorResponse> {
    constructor() {
        super("osmosis.superfluid.SuperfluidUndelegationsByDelegatorResponse", [
            { no: 1, name: "superfluid_delegation_records", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SuperfluidDelegationRecord, options: { "gogoproto.nullable": false } },
            { no: 2, name: "total_undelegated_coins", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } },
            { no: 3, name: "synthetic_locks", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SyntheticLock, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<SuperfluidUndelegationsByDelegatorResponse>): SuperfluidUndelegationsByDelegatorResponse {
        const message = { superfluidDelegationRecords: [], totalUndelegatedCoins: [], syntheticLocks: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SuperfluidUndelegationsByDelegatorResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SuperfluidUndelegationsByDelegatorResponse): SuperfluidUndelegationsByDelegatorResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated osmosis.superfluid.SuperfluidDelegationRecord superfluid_delegation_records */ 1:
                    message.superfluidDelegationRecords.push(SuperfluidDelegationRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated cosmos.base.v1beta1.Coin total_undelegated_coins */ 2:
                    message.totalUndelegatedCoins.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated osmosis.lockup.SyntheticLock synthetic_locks */ 3:
                    message.syntheticLocks.push(SyntheticLock.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SuperfluidUndelegationsByDelegatorResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated osmosis.superfluid.SuperfluidDelegationRecord superfluid_delegation_records = 1; */
        for (let i = 0; i < message.superfluidDelegationRecords.length; i++)
            SuperfluidDelegationRecord.internalBinaryWrite(message.superfluidDelegationRecords[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.base.v1beta1.Coin total_undelegated_coins = 2; */
        for (let i = 0; i < message.totalUndelegatedCoins.length; i++)
            Coin.internalBinaryWrite(message.totalUndelegatedCoins[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated osmosis.lockup.SyntheticLock synthetic_locks = 3; */
        for (let i = 0; i < message.syntheticLocks.length; i++)
            SyntheticLock.internalBinaryWrite(message.syntheticLocks[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.SuperfluidUndelegationsByDelegatorResponse
 */
export const SuperfluidUndelegationsByDelegatorResponse = new SuperfluidUndelegationsByDelegatorResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SuperfluidDelegationsByValidatorDenomRequest$Type extends MessageType<SuperfluidDelegationsByValidatorDenomRequest> {
    constructor() {
        super("osmosis.superfluid.SuperfluidDelegationsByValidatorDenomRequest", [
            { no: 1, name: "validator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "denom", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SuperfluidDelegationsByValidatorDenomRequest>): SuperfluidDelegationsByValidatorDenomRequest {
        const message = { validatorAddress: "", denom: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SuperfluidDelegationsByValidatorDenomRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SuperfluidDelegationsByValidatorDenomRequest): SuperfluidDelegationsByValidatorDenomRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string validator_address */ 1:
                    message.validatorAddress = reader.string();
                    break;
                case /* string denom */ 2:
                    message.denom = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SuperfluidDelegationsByValidatorDenomRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string validator_address = 1; */
        if (message.validatorAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.validatorAddress);
        /* string denom = 2; */
        if (message.denom !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.denom);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.SuperfluidDelegationsByValidatorDenomRequest
 */
export const SuperfluidDelegationsByValidatorDenomRequest = new SuperfluidDelegationsByValidatorDenomRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SuperfluidDelegationsByValidatorDenomResponse$Type extends MessageType<SuperfluidDelegationsByValidatorDenomResponse> {
    constructor() {
        super("osmosis.superfluid.SuperfluidDelegationsByValidatorDenomResponse", [
            { no: 1, name: "superfluid_delegation_records", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SuperfluidDelegationRecord, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<SuperfluidDelegationsByValidatorDenomResponse>): SuperfluidDelegationsByValidatorDenomResponse {
        const message = { superfluidDelegationRecords: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SuperfluidDelegationsByValidatorDenomResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SuperfluidDelegationsByValidatorDenomResponse): SuperfluidDelegationsByValidatorDenomResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated osmosis.superfluid.SuperfluidDelegationRecord superfluid_delegation_records */ 1:
                    message.superfluidDelegationRecords.push(SuperfluidDelegationRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SuperfluidDelegationsByValidatorDenomResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated osmosis.superfluid.SuperfluidDelegationRecord superfluid_delegation_records = 1; */
        for (let i = 0; i < message.superfluidDelegationRecords.length; i++)
            SuperfluidDelegationRecord.internalBinaryWrite(message.superfluidDelegationRecords[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.SuperfluidDelegationsByValidatorDenomResponse
 */
export const SuperfluidDelegationsByValidatorDenomResponse = new SuperfluidDelegationsByValidatorDenomResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EstimateSuperfluidDelegatedAmountByValidatorDenomRequest$Type extends MessageType<EstimateSuperfluidDelegatedAmountByValidatorDenomRequest> {
    constructor() {
        super("osmosis.superfluid.EstimateSuperfluidDelegatedAmountByValidatorDenomRequest", [
            { no: 1, name: "validator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "denom", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EstimateSuperfluidDelegatedAmountByValidatorDenomRequest>): EstimateSuperfluidDelegatedAmountByValidatorDenomRequest {
        const message = { validatorAddress: "", denom: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EstimateSuperfluidDelegatedAmountByValidatorDenomRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EstimateSuperfluidDelegatedAmountByValidatorDenomRequest): EstimateSuperfluidDelegatedAmountByValidatorDenomRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string validator_address */ 1:
                    message.validatorAddress = reader.string();
                    break;
                case /* string denom */ 2:
                    message.denom = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EstimateSuperfluidDelegatedAmountByValidatorDenomRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string validator_address = 1; */
        if (message.validatorAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.validatorAddress);
        /* string denom = 2; */
        if (message.denom !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.denom);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.EstimateSuperfluidDelegatedAmountByValidatorDenomRequest
 */
export const EstimateSuperfluidDelegatedAmountByValidatorDenomRequest = new EstimateSuperfluidDelegatedAmountByValidatorDenomRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EstimateSuperfluidDelegatedAmountByValidatorDenomResponse$Type extends MessageType<EstimateSuperfluidDelegatedAmountByValidatorDenomResponse> {
    constructor() {
        super("osmosis.superfluid.EstimateSuperfluidDelegatedAmountByValidatorDenomResponse", [
            { no: 1, name: "total_delegated_coins", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } }
        ]);
    }
    create(value?: PartialMessage<EstimateSuperfluidDelegatedAmountByValidatorDenomResponse>): EstimateSuperfluidDelegatedAmountByValidatorDenomResponse {
        const message = { totalDelegatedCoins: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EstimateSuperfluidDelegatedAmountByValidatorDenomResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EstimateSuperfluidDelegatedAmountByValidatorDenomResponse): EstimateSuperfluidDelegatedAmountByValidatorDenomResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.base.v1beta1.Coin total_delegated_coins */ 1:
                    message.totalDelegatedCoins.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EstimateSuperfluidDelegatedAmountByValidatorDenomResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated cosmos.base.v1beta1.Coin total_delegated_coins = 1; */
        for (let i = 0; i < message.totalDelegatedCoins.length; i++)
            Coin.internalBinaryWrite(message.totalDelegatedCoins[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.EstimateSuperfluidDelegatedAmountByValidatorDenomResponse
 */
export const EstimateSuperfluidDelegatedAmountByValidatorDenomResponse = new EstimateSuperfluidDelegatedAmountByValidatorDenomResponse$Type();
/**
 * @generated ServiceType for protobuf service osmosis.superfluid.Query
 */
export const Query = new ServiceType("osmosis.superfluid.Query", [
    { name: "Params", options: { "google.api.http": { get: "/osmosis/superfluid/v1beta1/params" } }, I: QueryParamsRequest, O: QueryParamsResponse },
    { name: "AssetType", options: { "google.api.http": { get: "/osmosis/superfluid/v1beta1/asset_type" } }, I: AssetTypeRequest, O: AssetTypeResponse },
    { name: "AllAssets", options: { "google.api.http": { get: "/osmosis/superfluid/v1beta1/all_assets" } }, I: AllAssetsRequest, O: AllAssetsResponse },
    { name: "AssetMultiplier", options: { "google.api.http": { get: "/osmosis/superfluid/v1beta1/asset_multiplier" } }, I: AssetMultiplierRequest, O: AssetMultiplierResponse },
    { name: "AllIntermediaryAccounts", options: { "google.api.http": { get: "/osmosis/superfluid/v1beta1/all_intermediary_accounts" } }, I: AllIntermediaryAccountsRequest, O: AllIntermediaryAccountsResponse },
    { name: "ConnectedIntermediaryAccount", options: { "google.api.http": { get: "/osmosis/superfluid/v1beta1/connected_intermediary_account/{lock_id}" } }, I: ConnectedIntermediaryAccountRequest, O: ConnectedIntermediaryAccountResponse },
    { name: "TotalSuperfluidDelegations", options: { "google.api.http": { get: "/osmosis/superfluid/v1beta1/all_superfluid_delegations" } }, I: TotalSuperfluidDelegationsRequest, O: TotalSuperfluidDelegationsResponse },
    { name: "SuperfluidDelegationAmount", options: { "google.api.http": { get: "/osmosis/superfluid/v1beta1/superfluid_delegation_amount" } }, I: SuperfluidDelegationAmountRequest, O: SuperfluidDelegationAmountResponse },
    { name: "SuperfluidDelegationsByDelegator", options: { "google.api.http": { get: "/osmosis/superfluid/v1beta1/superfluid_delegations/{delegator_address}" } }, I: SuperfluidDelegationsByDelegatorRequest, O: SuperfluidDelegationsByDelegatorResponse },
    { name: "SuperfluidUndelegationsByDelegator", options: { "google.api.http": { get: "/osmosis/superfluid/v1beta1/superfluid_undelegations_by_delegator/{delegator_address}" } }, I: SuperfluidUndelegationsByDelegatorRequest, O: SuperfluidUndelegationsByDelegatorResponse },
    { name: "SuperfluidDelegationsByValidatorDenom", options: { "google.api.http": { get: "/osmosis/superfluid/v1beta1/superfluid_delegations_by_validator_denom" } }, I: SuperfluidDelegationsByValidatorDenomRequest, O: SuperfluidDelegationsByValidatorDenomResponse },
    { name: "EstimateSuperfluidDelegatedAmountByValidatorDenom", options: { "google.api.http": { get: "/osmosis/superfluid/v1beta1/estimate_superfluid_delegation_amount_by_validator_denom" } }, I: EstimateSuperfluidDelegatedAmountByValidatorDenomRequest, O: EstimateSuperfluidDelegatedAmountByValidatorDenomResponse }
]);
