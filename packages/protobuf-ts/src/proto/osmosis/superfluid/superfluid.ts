// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "osmosis/superfluid/superfluid.proto" (package "osmosis.superfluid", syntax proto3),// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Coin } from "../../cosmos/base/v1beta1/coin";
/**
 * SuperfluidAsset stores the pair of superfluid asset type and denom pair
 *
 * @generated from protobuf message osmosis.superfluid.SuperfluidAsset
 */
export interface SuperfluidAsset {
    /**
     * @generated from protobuf field: string denom = 1;
     */
    denom: string;
    /**
     * @generated from protobuf field: osmosis.superfluid.SuperfluidAssetType asset_type = 2;
     */
    assetType: SuperfluidAssetType;
}
/**
 * SuperfluidIntermediaryAccount takes the role of intermediary between LP token
 * and OSMO tokens for superfluid staking
 *
 * @generated from protobuf message osmosis.superfluid.SuperfluidIntermediaryAccount
 */
export interface SuperfluidIntermediaryAccount {
    /**
     * @generated from protobuf field: string denom = 1;
     */
    denom: string;
    /**
     * @generated from protobuf field: string val_addr = 2;
     */
    valAddr: string;
    /**
     * perpetual gauge for rewards distribution
     *
     * @generated from protobuf field: uint64 gauge_id = 3;
     */
    gaugeId: bigint;
}
/**
 * The Osmo-Equivalent-Multiplier Record for epoch N refers to the osmo worth we
 * treat an LP share as having, for all of epoch N. Eventually this is intended
 * to be set as the Time-weighted-average-osmo-backing for the entire duration
 * of epoch N-1. (Thereby locking whats in use for epoch N as based on the prior
 * epochs rewards) However for now, this is not the TWAP but instead the spot
 * price at the boundary.  For different types of assets in the future, it could
 * change.
 *
 * @generated from protobuf message osmosis.superfluid.OsmoEquivalentMultiplierRecord
 */
export interface OsmoEquivalentMultiplierRecord {
    /**
     * @generated from protobuf field: int64 epoch_number = 1;
     */
    epochNumber: bigint;
    /**
     * superfluid asset denom, can be LP token or native token
     *
     * @generated from protobuf field: string denom = 2;
     */
    denom: string;
    /**
     * @generated from protobuf field: string multiplier = 3;
     */
    multiplier: string;
}
/**
 * SuperfluidDelegationRecord takes the role of intermediary between LP token
 * and OSMO tokens for superfluid staking
 *
 * @generated from protobuf message osmosis.superfluid.SuperfluidDelegationRecord
 */
export interface SuperfluidDelegationRecord {
    /**
     * @generated from protobuf field: string delegator_address = 1;
     */
    delegatorAddress: string;
    /**
     * @generated from protobuf field: string validator_address = 2;
     */
    validatorAddress: string;
    /**
     * @generated from protobuf field: cosmos.base.v1beta1.Coin delegation_amount = 3;
     */
    delegationAmount?: Coin;
}
/**
 * @generated from protobuf message osmosis.superfluid.LockIdIntermediaryAccountConnection
 */
export interface LockIdIntermediaryAccountConnection {
    /**
     * @generated from protobuf field: uint64 lock_id = 1;
     */
    lockId: bigint;
    /**
     * @generated from protobuf field: string intermediary_account = 2;
     */
    intermediaryAccount: string;
}
/**
 * @generated from protobuf enum osmosis.superfluid.SuperfluidAssetType
 */
export enum SuperfluidAssetType {
    /**
     * @generated from protobuf enum value: SuperfluidAssetTypeNative = 0;
     */
    SuperfluidAssetTypeNative = 0,
    /**
     * SuperfluidAssetTypeLendingShare = 2; // for now not exist
     *
     * @generated from protobuf enum value: SuperfluidAssetTypeLPShare = 1;
     */
    SuperfluidAssetTypeLPShare = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class SuperfluidAsset$Type extends MessageType<SuperfluidAsset> {
    constructor() {
        super("osmosis.superfluid.SuperfluidAsset", [
            { no: 1, name: "denom", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "asset_type", kind: "enum", T: () => ["osmosis.superfluid.SuperfluidAssetType", SuperfluidAssetType] }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": true });
    }
    create(value?: PartialMessage<SuperfluidAsset>): SuperfluidAsset {
        const message = { denom: "", assetType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SuperfluidAsset>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SuperfluidAsset): SuperfluidAsset {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string denom */ 1:
                    message.denom = reader.string();
                    break;
                case /* osmosis.superfluid.SuperfluidAssetType asset_type */ 2:
                    message.assetType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SuperfluidAsset, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string denom = 1; */
        if (message.denom !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.denom);
        /* osmosis.superfluid.SuperfluidAssetType asset_type = 2; */
        if (message.assetType !== 0)
            writer.tag(2, WireType.Varint).int32(message.assetType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.SuperfluidAsset
 */
export const SuperfluidAsset = new SuperfluidAsset$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SuperfluidIntermediaryAccount$Type extends MessageType<SuperfluidIntermediaryAccount> {
    constructor() {
        super("osmosis.superfluid.SuperfluidIntermediaryAccount", [
            { no: 1, name: "denom", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "val_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "gauge_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SuperfluidIntermediaryAccount>): SuperfluidIntermediaryAccount {
        const message = { denom: "", valAddr: "", gaugeId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SuperfluidIntermediaryAccount>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SuperfluidIntermediaryAccount): SuperfluidIntermediaryAccount {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string denom */ 1:
                    message.denom = reader.string();
                    break;
                case /* string val_addr */ 2:
                    message.valAddr = reader.string();
                    break;
                case /* uint64 gauge_id */ 3:
                    message.gaugeId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SuperfluidIntermediaryAccount, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string denom = 1; */
        if (message.denom !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.denom);
        /* string val_addr = 2; */
        if (message.valAddr !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.valAddr);
        /* uint64 gauge_id = 3; */
        if (message.gaugeId !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.gaugeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.SuperfluidIntermediaryAccount
 */
export const SuperfluidIntermediaryAccount = new SuperfluidIntermediaryAccount$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OsmoEquivalentMultiplierRecord$Type extends MessageType<OsmoEquivalentMultiplierRecord> {
    constructor() {
        super("osmosis.superfluid.OsmoEquivalentMultiplierRecord", [
            { no: 1, name: "epoch_number", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "denom", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "multiplier", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Dec", "gogoproto.moretags": "yaml:\"multiplier\"" } }
        ]);
    }
    create(value?: PartialMessage<OsmoEquivalentMultiplierRecord>): OsmoEquivalentMultiplierRecord {
        const message = { epochNumber: 0n, denom: "", multiplier: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OsmoEquivalentMultiplierRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OsmoEquivalentMultiplierRecord): OsmoEquivalentMultiplierRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 epoch_number */ 1:
                    message.epochNumber = reader.int64().toBigInt();
                    break;
                case /* string denom */ 2:
                    message.denom = reader.string();
                    break;
                case /* string multiplier */ 3:
                    message.multiplier = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OsmoEquivalentMultiplierRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 epoch_number = 1; */
        if (message.epochNumber !== 0n)
            writer.tag(1, WireType.Varint).int64(message.epochNumber);
        /* string denom = 2; */
        if (message.denom !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.denom);
        /* string multiplier = 3; */
        if (message.multiplier !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.multiplier);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.OsmoEquivalentMultiplierRecord
 */
export const OsmoEquivalentMultiplierRecord = new OsmoEquivalentMultiplierRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SuperfluidDelegationRecord$Type extends MessageType<SuperfluidDelegationRecord> {
    constructor() {
        super("osmosis.superfluid.SuperfluidDelegationRecord", [
            { no: 1, name: "delegator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "validator_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "delegation_amount", kind: "message", T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coin" } }
        ]);
    }
    create(value?: PartialMessage<SuperfluidDelegationRecord>): SuperfluidDelegationRecord {
        const message = { delegatorAddress: "", validatorAddress: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SuperfluidDelegationRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SuperfluidDelegationRecord): SuperfluidDelegationRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string delegator_address */ 1:
                    message.delegatorAddress = reader.string();
                    break;
                case /* string validator_address */ 2:
                    message.validatorAddress = reader.string();
                    break;
                case /* cosmos.base.v1beta1.Coin delegation_amount */ 3:
                    message.delegationAmount = Coin.internalBinaryRead(reader, reader.uint32(), options, message.delegationAmount);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SuperfluidDelegationRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string delegator_address = 1; */
        if (message.delegatorAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.delegatorAddress);
        /* string validator_address = 2; */
        if (message.validatorAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.validatorAddress);
        /* cosmos.base.v1beta1.Coin delegation_amount = 3; */
        if (message.delegationAmount)
            Coin.internalBinaryWrite(message.delegationAmount, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.SuperfluidDelegationRecord
 */
export const SuperfluidDelegationRecord = new SuperfluidDelegationRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LockIdIntermediaryAccountConnection$Type extends MessageType<LockIdIntermediaryAccountConnection> {
    constructor() {
        super("osmosis.superfluid.LockIdIntermediaryAccountConnection", [
            { no: 1, name: "lock_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "intermediary_account", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LockIdIntermediaryAccountConnection>): LockIdIntermediaryAccountConnection {
        const message = { lockId: 0n, intermediaryAccount: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LockIdIntermediaryAccountConnection>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LockIdIntermediaryAccountConnection): LockIdIntermediaryAccountConnection {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 lock_id */ 1:
                    message.lockId = reader.uint64().toBigInt();
                    break;
                case /* string intermediary_account */ 2:
                    message.intermediaryAccount = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LockIdIntermediaryAccountConnection, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 lock_id = 1; */
        if (message.lockId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.lockId);
        /* string intermediary_account = 2; */
        if (message.intermediaryAccount !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.intermediaryAccount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.LockIdIntermediaryAccountConnection
 */
export const LockIdIntermediaryAccountConnection = new LockIdIntermediaryAccountConnection$Type();
