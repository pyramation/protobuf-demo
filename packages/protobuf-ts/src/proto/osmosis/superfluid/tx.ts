// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "osmosis/superfluid/tx.proto" (package "osmosis.superfluid", syntax proto3),// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Coin } from "../../cosmos/base/v1beta1/coin";
/**
 * @generated from protobuf message osmosis.superfluid.MsgSuperfluidDelegate
 */
export interface MsgSuperfluidDelegate {
    /**
     * @generated from protobuf field: string sender = 1;
     */
    sender: string;
    /**
     * @generated from protobuf field: uint64 lock_id = 2;
     */
    lockId: bigint;
    /**
     * @generated from protobuf field: string val_addr = 3;
     */
    valAddr: string;
}
/**
 * @generated from protobuf message osmosis.superfluid.MsgSuperfluidDelegateResponse
 */
export interface MsgSuperfluidDelegateResponse {
}
/**
 * @generated from protobuf message osmosis.superfluid.MsgSuperfluidUndelegate
 */
export interface MsgSuperfluidUndelegate {
    /**
     * @generated from protobuf field: string sender = 1;
     */
    sender: string;
    /**
     * @generated from protobuf field: uint64 lock_id = 2;
     */
    lockId: bigint;
}
/**
 * @generated from protobuf message osmosis.superfluid.MsgSuperfluidUndelegateResponse
 */
export interface MsgSuperfluidUndelegateResponse {
}
/**
 * @generated from protobuf message osmosis.superfluid.MsgSuperfluidUnbondLock
 */
export interface MsgSuperfluidUnbondLock {
    /**
     * @generated from protobuf field: string sender = 1;
     */
    sender: string;
    /**
     * @generated from protobuf field: uint64 lock_id = 2;
     */
    lockId: bigint;
}
/**
 * @generated from protobuf message osmosis.superfluid.MsgSuperfluidUnbondLockResponse
 */
export interface MsgSuperfluidUnbondLockResponse {
}
// message MsgSuperfluidRedelegate {
//   string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];
//   uint64 lock_id = 2;
//   string new_val_addr = 3;
// }
// message MsgSuperfluidRedelegateResponse {}

/**
 * MsgLockAndSuperfluidDelegate locks coins with the unbonding period duration,
 * and then does a superfluid lock from the newly created lockup, to the
 * specified validator addr.
 *
 * @generated from protobuf message osmosis.superfluid.MsgLockAndSuperfluidDelegate
 */
export interface MsgLockAndSuperfluidDelegate {
    /**
     * @generated from protobuf field: string sender = 1;
     */
    sender: string;
    /**
     * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin coins = 2;
     */
    coins: Coin[];
    /**
     * @generated from protobuf field: string val_addr = 3;
     */
    valAddr: string;
}
/**
 * @generated from protobuf message osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse
 */
export interface MsgLockAndSuperfluidDelegateResponse {
    /**
     * @generated from protobuf field: uint64 ID = 1 [json_name = "ID"];
     */
    iD: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class MsgSuperfluidDelegate$Type extends MessageType<MsgSuperfluidDelegate> {
    constructor() {
        super("osmosis.superfluid.MsgSuperfluidDelegate", [
            { no: 1, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"sender\"" } },
            { no: 2, name: "lock_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "val_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MsgSuperfluidDelegate>): MsgSuperfluidDelegate {
        const message = { sender: "", lockId: 0n, valAddr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgSuperfluidDelegate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgSuperfluidDelegate): MsgSuperfluidDelegate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sender */ 1:
                    message.sender = reader.string();
                    break;
                case /* uint64 lock_id */ 2:
                    message.lockId = reader.uint64().toBigInt();
                    break;
                case /* string val_addr */ 3:
                    message.valAddr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgSuperfluidDelegate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sender = 1; */
        if (message.sender !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sender);
        /* uint64 lock_id = 2; */
        if (message.lockId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.lockId);
        /* string val_addr = 3; */
        if (message.valAddr !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.valAddr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.MsgSuperfluidDelegate
 */
export const MsgSuperfluidDelegate = new MsgSuperfluidDelegate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgSuperfluidDelegateResponse$Type extends MessageType<MsgSuperfluidDelegateResponse> {
    constructor() {
        super("osmosis.superfluid.MsgSuperfluidDelegateResponse", []);
    }
    create(value?: PartialMessage<MsgSuperfluidDelegateResponse>): MsgSuperfluidDelegateResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgSuperfluidDelegateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgSuperfluidDelegateResponse): MsgSuperfluidDelegateResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MsgSuperfluidDelegateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.MsgSuperfluidDelegateResponse
 */
export const MsgSuperfluidDelegateResponse = new MsgSuperfluidDelegateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgSuperfluidUndelegate$Type extends MessageType<MsgSuperfluidUndelegate> {
    constructor() {
        super("osmosis.superfluid.MsgSuperfluidUndelegate", [
            { no: 1, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"sender\"" } },
            { no: 2, name: "lock_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MsgSuperfluidUndelegate>): MsgSuperfluidUndelegate {
        const message = { sender: "", lockId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgSuperfluidUndelegate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgSuperfluidUndelegate): MsgSuperfluidUndelegate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sender */ 1:
                    message.sender = reader.string();
                    break;
                case /* uint64 lock_id */ 2:
                    message.lockId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgSuperfluidUndelegate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sender = 1; */
        if (message.sender !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sender);
        /* uint64 lock_id = 2; */
        if (message.lockId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.lockId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.MsgSuperfluidUndelegate
 */
export const MsgSuperfluidUndelegate = new MsgSuperfluidUndelegate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgSuperfluidUndelegateResponse$Type extends MessageType<MsgSuperfluidUndelegateResponse> {
    constructor() {
        super("osmosis.superfluid.MsgSuperfluidUndelegateResponse", []);
    }
    create(value?: PartialMessage<MsgSuperfluidUndelegateResponse>): MsgSuperfluidUndelegateResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgSuperfluidUndelegateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgSuperfluidUndelegateResponse): MsgSuperfluidUndelegateResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MsgSuperfluidUndelegateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.MsgSuperfluidUndelegateResponse
 */
export const MsgSuperfluidUndelegateResponse = new MsgSuperfluidUndelegateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgSuperfluidUnbondLock$Type extends MessageType<MsgSuperfluidUnbondLock> {
    constructor() {
        super("osmosis.superfluid.MsgSuperfluidUnbondLock", [
            { no: 1, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"sender\"" } },
            { no: 2, name: "lock_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MsgSuperfluidUnbondLock>): MsgSuperfluidUnbondLock {
        const message = { sender: "", lockId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgSuperfluidUnbondLock>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgSuperfluidUnbondLock): MsgSuperfluidUnbondLock {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sender */ 1:
                    message.sender = reader.string();
                    break;
                case /* uint64 lock_id */ 2:
                    message.lockId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgSuperfluidUnbondLock, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sender = 1; */
        if (message.sender !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sender);
        /* uint64 lock_id = 2; */
        if (message.lockId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.lockId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.MsgSuperfluidUnbondLock
 */
export const MsgSuperfluidUnbondLock = new MsgSuperfluidUnbondLock$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgSuperfluidUnbondLockResponse$Type extends MessageType<MsgSuperfluidUnbondLockResponse> {
    constructor() {
        super("osmosis.superfluid.MsgSuperfluidUnbondLockResponse", []);
    }
    create(value?: PartialMessage<MsgSuperfluidUnbondLockResponse>): MsgSuperfluidUnbondLockResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgSuperfluidUnbondLockResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgSuperfluidUnbondLockResponse): MsgSuperfluidUnbondLockResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MsgSuperfluidUnbondLockResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.MsgSuperfluidUnbondLockResponse
 */
export const MsgSuperfluidUnbondLockResponse = new MsgSuperfluidUnbondLockResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgLockAndSuperfluidDelegate$Type extends MessageType<MsgLockAndSuperfluidDelegate> {
    constructor() {
        super("osmosis.superfluid.MsgLockAndSuperfluidDelegate", [
            { no: 1, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"sender\"" } },
            { no: 2, name: "coins", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } },
            { no: 3, name: "val_addr", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MsgLockAndSuperfluidDelegate>): MsgLockAndSuperfluidDelegate {
        const message = { sender: "", coins: [], valAddr: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgLockAndSuperfluidDelegate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgLockAndSuperfluidDelegate): MsgLockAndSuperfluidDelegate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sender */ 1:
                    message.sender = reader.string();
                    break;
                case /* repeated cosmos.base.v1beta1.Coin coins */ 2:
                    message.coins.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string val_addr */ 3:
                    message.valAddr = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgLockAndSuperfluidDelegate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sender = 1; */
        if (message.sender !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sender);
        /* repeated cosmos.base.v1beta1.Coin coins = 2; */
        for (let i = 0; i < message.coins.length; i++)
            Coin.internalBinaryWrite(message.coins[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string val_addr = 3; */
        if (message.valAddr !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.valAddr);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.MsgLockAndSuperfluidDelegate
 */
export const MsgLockAndSuperfluidDelegate = new MsgLockAndSuperfluidDelegate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgLockAndSuperfluidDelegateResponse$Type extends MessageType<MsgLockAndSuperfluidDelegateResponse> {
    constructor() {
        super("osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse", [
            { no: 1, name: "ID", kind: "scalar", jsonName: "ID", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MsgLockAndSuperfluidDelegateResponse>): MsgLockAndSuperfluidDelegateResponse {
        const message = { iD: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgLockAndSuperfluidDelegateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgLockAndSuperfluidDelegateResponse): MsgLockAndSuperfluidDelegateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 ID = 1 [json_name = "ID"];*/ 1:
                    message.iD = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgLockAndSuperfluidDelegateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 ID = 1 [json_name = "ID"]; */
        if (message.iD !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.iD);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse
 */
export const MsgLockAndSuperfluidDelegateResponse = new MsgLockAndSuperfluidDelegateResponse$Type();
/**
 * @generated ServiceType for protobuf service osmosis.superfluid.Msg
 */
export const Msg = new ServiceType("osmosis.superfluid.Msg", [
    { name: "SuperfluidDelegate", options: {}, I: MsgSuperfluidDelegate, O: MsgSuperfluidDelegateResponse },
    { name: "SuperfluidUndelegate", options: {}, I: MsgSuperfluidUndelegate, O: MsgSuperfluidUndelegateResponse },
    { name: "SuperfluidUnbondLock", options: {}, I: MsgSuperfluidUnbondLock, O: MsgSuperfluidUnbondLockResponse },
    { name: "LockAndSuperfluidDelegate", options: {}, I: MsgLockAndSuperfluidDelegate, O: MsgLockAndSuperfluidDelegateResponse }
]);
