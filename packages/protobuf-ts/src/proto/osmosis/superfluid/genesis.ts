// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "osmosis/superfluid/genesis.proto" (package "osmosis.superfluid", syntax proto3),// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { LockIdIntermediaryAccountConnection } from "./superfluid";
import { SuperfluidIntermediaryAccount } from "./superfluid";
import { OsmoEquivalentMultiplierRecord } from "./superfluid";
import { SuperfluidAsset } from "./superfluid";
import { Params } from "./params";
/**
 * GenesisState defines the module's genesis state.
 *
 * @generated from protobuf message osmosis.superfluid.GenesisState
 */
export interface GenesisState {
    /**
     * @generated from protobuf field: osmosis.superfluid.Params params = 1;
     */
    params?: Params;
    /**
     * @generated from protobuf field: repeated osmosis.superfluid.SuperfluidAsset superfluid_assets = 2;
     */
    superfluidAssets: SuperfluidAsset[];
    /**
     * @generated from protobuf field: repeated osmosis.superfluid.OsmoEquivalentMultiplierRecord osmo_equivalent_multipliers = 3;
     */
    osmoEquivalentMultipliers: OsmoEquivalentMultiplierRecord[];
    /**
     * @generated from protobuf field: repeated osmosis.superfluid.SuperfluidIntermediaryAccount intermediary_accounts = 4;
     */
    intermediaryAccounts: SuperfluidIntermediaryAccount[];
    /**
     * @generated from protobuf field: repeated osmosis.superfluid.LockIdIntermediaryAccountConnection intemediary_account_connections = 5;
     */
    intemediaryAccountConnections: LockIdIntermediaryAccountConnection[];
}
// @generated message type with reflection information, may provide speed optimized methods
class GenesisState$Type extends MessageType<GenesisState> {
    constructor() {
        super("osmosis.superfluid.GenesisState", [
            { no: 1, name: "params", kind: "message", T: () => Params, options: { "gogoproto.nullable": false } },
            { no: 2, name: "superfluid_assets", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SuperfluidAsset, options: { "gogoproto.nullable": false } },
            { no: 3, name: "osmo_equivalent_multipliers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => OsmoEquivalentMultiplierRecord, options: { "gogoproto.nullable": false } },
            { no: 4, name: "intermediary_accounts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SuperfluidIntermediaryAccount, options: { "gogoproto.nullable": false } },
            { no: 5, name: "intemediary_account_connections", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => LockIdIntermediaryAccountConnection, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<GenesisState>): GenesisState {
        const message = { superfluidAssets: [], osmoEquivalentMultipliers: [], intermediaryAccounts: [], intemediaryAccountConnections: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GenesisState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenesisState): GenesisState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* osmosis.superfluid.Params params */ 1:
                    message.params = Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                case /* repeated osmosis.superfluid.SuperfluidAsset superfluid_assets */ 2:
                    message.superfluidAssets.push(SuperfluidAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated osmosis.superfluid.OsmoEquivalentMultiplierRecord osmo_equivalent_multipliers */ 3:
                    message.osmoEquivalentMultipliers.push(OsmoEquivalentMultiplierRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated osmosis.superfluid.SuperfluidIntermediaryAccount intermediary_accounts */ 4:
                    message.intermediaryAccounts.push(SuperfluidIntermediaryAccount.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated osmosis.superfluid.LockIdIntermediaryAccountConnection intemediary_account_connections */ 5:
                    message.intemediaryAccountConnections.push(LockIdIntermediaryAccountConnection.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GenesisState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* osmosis.superfluid.Params params = 1; */
        if (message.params)
            Params.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated osmosis.superfluid.SuperfluidAsset superfluid_assets = 2; */
        for (let i = 0; i < message.superfluidAssets.length; i++)
            SuperfluidAsset.internalBinaryWrite(message.superfluidAssets[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated osmosis.superfluid.OsmoEquivalentMultiplierRecord osmo_equivalent_multipliers = 3; */
        for (let i = 0; i < message.osmoEquivalentMultipliers.length; i++)
            OsmoEquivalentMultiplierRecord.internalBinaryWrite(message.osmoEquivalentMultipliers[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated osmosis.superfluid.SuperfluidIntermediaryAccount intermediary_accounts = 4; */
        for (let i = 0; i < message.intermediaryAccounts.length; i++)
            SuperfluidIntermediaryAccount.internalBinaryWrite(message.intermediaryAccounts[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated osmosis.superfluid.LockIdIntermediaryAccountConnection intemediary_account_connections = 5; */
        for (let i = 0; i < message.intemediaryAccountConnections.length; i++)
            LockIdIntermediaryAccountConnection.internalBinaryWrite(message.intemediaryAccountConnections[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.superfluid.GenesisState
 */
export const GenesisState = new GenesisState$Type();
