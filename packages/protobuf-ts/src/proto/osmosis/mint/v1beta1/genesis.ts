// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "osmosis/mint/v1beta1/genesis.proto" (package "osmosis.mint.v1beta1", syntax proto3),// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Params } from "./mint";
import { Minter } from "./mint";
/**
 * GenesisState defines the mint module's genesis state.
 *
 * @generated from protobuf message osmosis.mint.v1beta1.GenesisState
 */
export interface GenesisState {
    /**
     * minter is a space for holding current rewards information.
     *
     * @generated from protobuf field: osmosis.mint.v1beta1.Minter minter = 1;
     */
    minter?: Minter;
    /**
     * params defines all the paramaters of the module.
     *
     * @generated from protobuf field: osmosis.mint.v1beta1.Params params = 2;
     */
    params?: Params;
    /**
     * current halven period start epoch
     *
     * @generated from protobuf field: int64 halven_started_epoch = 3;
     */
    halvenStartedEpoch: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class GenesisState$Type extends MessageType<GenesisState> {
    constructor() {
        super("osmosis.mint.v1beta1.GenesisState", [
            { no: 1, name: "minter", kind: "message", T: () => Minter, options: { "gogoproto.nullable": false } },
            { no: 2, name: "params", kind: "message", T: () => Params, options: { "gogoproto.nullable": false } },
            { no: 3, name: "halven_started_epoch", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/, options: { "gogoproto.moretags": "yaml:\"halven_started_epoch\"" } }
        ]);
    }
    create(value?: PartialMessage<GenesisState>): GenesisState {
        const message = { halvenStartedEpoch: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GenesisState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenesisState): GenesisState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* osmosis.mint.v1beta1.Minter minter */ 1:
                    message.minter = Minter.internalBinaryRead(reader, reader.uint32(), options, message.minter);
                    break;
                case /* osmosis.mint.v1beta1.Params params */ 2:
                    message.params = Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                case /* int64 halven_started_epoch */ 3:
                    message.halvenStartedEpoch = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GenesisState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* osmosis.mint.v1beta1.Minter minter = 1; */
        if (message.minter)
            Minter.internalBinaryWrite(message.minter, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* osmosis.mint.v1beta1.Params params = 2; */
        if (message.params)
            Params.internalBinaryWrite(message.params, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 halven_started_epoch = 3; */
        if (message.halvenStartedEpoch !== 0n)
            writer.tag(3, WireType.Varint).int64(message.halvenStartedEpoch);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.mint.v1beta1.GenesisState
 */
export const GenesisState = new GenesisState$Type();
