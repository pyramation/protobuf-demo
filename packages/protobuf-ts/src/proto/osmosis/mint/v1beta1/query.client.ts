// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "osmosis/mint/v1beta1/query.proto" (package "osmosis.mint.v1beta1", syntax proto3),// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Query } from "./query";
import type { QueryEpochProvisionsResponse } from "./query";
import type { QueryEpochProvisionsRequest } from "./query";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { QueryParamsResponse } from "./query";
import type { QueryParamsRequest } from "./query";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Query provides defines the gRPC querier service.
 *
 * @generated from protobuf service osmosis.mint.v1beta1.Query
 */
export interface IQueryClient {
    /**
     * Params returns the total set of minting parameters.
     *
     * @generated from protobuf rpc: Params(osmosis.mint.v1beta1.QueryParamsRequest) returns (osmosis.mint.v1beta1.QueryParamsResponse);
     */
    params(input: QueryParamsRequest, options?: RpcOptions): UnaryCall<QueryParamsRequest, QueryParamsResponse>;
    /**
     * EpochProvisions current minting epoch provisions value.
     *
     * @generated from protobuf rpc: EpochProvisions(osmosis.mint.v1beta1.QueryEpochProvisionsRequest) returns (osmosis.mint.v1beta1.QueryEpochProvisionsResponse);
     */
    epochProvisions(input: QueryEpochProvisionsRequest, options?: RpcOptions): UnaryCall<QueryEpochProvisionsRequest, QueryEpochProvisionsResponse>;
}
/**
 * Query provides defines the gRPC querier service.
 *
 * @generated from protobuf service osmosis.mint.v1beta1.Query
 */
export class QueryClient implements IQueryClient, ServiceInfo {
    typeName = Query.typeName;
    methods = Query.methods;
    options = Query.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Params returns the total set of minting parameters.
     *
     * @generated from protobuf rpc: Params(osmosis.mint.v1beta1.QueryParamsRequest) returns (osmosis.mint.v1beta1.QueryParamsResponse);
     */
    params(input: QueryParamsRequest, options?: RpcOptions): UnaryCall<QueryParamsRequest, QueryParamsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryParamsRequest, QueryParamsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * EpochProvisions current minting epoch provisions value.
     *
     * @generated from protobuf rpc: EpochProvisions(osmosis.mint.v1beta1.QueryEpochProvisionsRequest) returns (osmosis.mint.v1beta1.QueryEpochProvisionsResponse);
     */
    epochProvisions(input: QueryEpochProvisionsRequest, options?: RpcOptions): UnaryCall<QueryEpochProvisionsRequest, QueryEpochProvisionsResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryEpochProvisionsRequest, QueryEpochProvisionsResponse>("unary", this._transport, method, opt, input);
    }
}
