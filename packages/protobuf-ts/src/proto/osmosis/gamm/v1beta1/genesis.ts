// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "osmosis/gamm/v1beta1/genesis.proto" (package "osmosis.gamm.v1beta1", syntax proto3),// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../../../google/protobuf/any";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
/**
 * Params holds parameters for the incentives module
 *
 * @generated from protobuf message osmosis.gamm.v1beta1.Params
 */
export interface Params {
    /**
     * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin pool_creation_fee = 1;
     */
    poolCreationFee: Coin[];
}
/**
 * GenesisState defines the gamm module's genesis state.
 *
 * @generated from protobuf message osmosis.gamm.v1beta1.GenesisState
 */
export interface GenesisState {
    /**
     * @generated from protobuf field: repeated google.protobuf.Any pools = 1;
     */
    pools: Any[];
    /**
     * @generated from protobuf field: uint64 next_pool_number = 2;
     */
    nextPoolNumber: bigint;
    /**
     * @generated from protobuf field: osmosis.gamm.v1beta1.Params params = 3;
     */
    params?: Params;
}
// @generated message type with reflection information, may provide speed optimized methods
class Params$Type extends MessageType<Params> {
    constructor() {
        super("osmosis.gamm.v1beta1.Params", [
            { no: 1, name: "pool_creation_fee", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"pool_creation_fee\"", "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } }
        ]);
    }
    create(value?: PartialMessage<Params>): Params {
        const message = { poolCreationFee: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Params>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Params): Params {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.base.v1beta1.Coin pool_creation_fee */ 1:
                    message.poolCreationFee.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Params, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated cosmos.base.v1beta1.Coin pool_creation_fee = 1; */
        for (let i = 0; i < message.poolCreationFee.length; i++)
            Coin.internalBinaryWrite(message.poolCreationFee[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.gamm.v1beta1.Params
 */
export const Params = new Params$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GenesisState$Type extends MessageType<GenesisState> {
    constructor() {
        super("osmosis.gamm.v1beta1.GenesisState", [
            { no: 1, name: "pools", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Any, options: { "cosmos_proto.accepts_interface": "PoolI" } },
            { no: 2, name: "next_pool_number", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "params", kind: "message", T: () => Params, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<GenesisState>): GenesisState {
        const message = { pools: [], nextPoolNumber: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GenesisState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenesisState): GenesisState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.protobuf.Any pools */ 1:
                    message.pools.push(Any.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint64 next_pool_number */ 2:
                    message.nextPoolNumber = reader.uint64().toBigInt();
                    break;
                case /* osmosis.gamm.v1beta1.Params params */ 3:
                    message.params = Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GenesisState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.protobuf.Any pools = 1; */
        for (let i = 0; i < message.pools.length; i++)
            Any.internalBinaryWrite(message.pools[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 next_pool_number = 2; */
        if (message.nextPoolNumber !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.nextPoolNumber);
        /* osmosis.gamm.v1beta1.Params params = 3; */
        if (message.params)
            Params.internalBinaryWrite(message.params, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.gamm.v1beta1.GenesisState
 */
export const GenesisState = new GenesisState$Type();
