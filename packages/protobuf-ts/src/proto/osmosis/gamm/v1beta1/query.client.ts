// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "osmosis/gamm/v1beta1/query.proto" (package "osmosis.gamm.v1beta1", syntax proto3),// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Query } from "./query";
import type { QuerySwapExactAmountOutResponse } from "./query";
import type { QuerySwapExactAmountOutRequest } from "./query";
import type { QuerySwapExactAmountInResponse } from "./query";
import type { QuerySwapExactAmountInRequest } from "./query";
import type { QuerySpotPriceResponse } from "./query";
import type { QuerySpotPriceRequest } from "./query";
import type { QueryTotalSharesResponse } from "./query";
import type { QueryTotalSharesRequest } from "./query";
import type { QueryTotalPoolLiquidityResponse } from "./query";
import type { QueryTotalPoolLiquidityRequest } from "./query";
import type { QueryPoolParamsResponse } from "./query";
import type { QueryPoolParamsRequest } from "./query";
import type { QueryPoolResponse } from "./query";
import type { QueryPoolRequest } from "./query";
import type { QueryTotalLiquidityResponse } from "./query";
import type { QueryTotalLiquidityRequest } from "./query";
import type { QueryNumPoolsResponse } from "./query";
import type { QueryNumPoolsRequest } from "./query";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { QueryPoolsResponse } from "./query";
import type { QueryPoolsRequest } from "./query";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service osmosis.gamm.v1beta1.Query
 */
export interface IQueryClient {
    /**
     * @generated from protobuf rpc: Pools(osmosis.gamm.v1beta1.QueryPoolsRequest) returns (osmosis.gamm.v1beta1.QueryPoolsResponse);
     */
    pools(input: QueryPoolsRequest, options?: RpcOptions): UnaryCall<QueryPoolsRequest, QueryPoolsResponse>;
    /**
     * @generated from protobuf rpc: NumPools(osmosis.gamm.v1beta1.QueryNumPoolsRequest) returns (osmosis.gamm.v1beta1.QueryNumPoolsResponse);
     */
    numPools(input: QueryNumPoolsRequest, options?: RpcOptions): UnaryCall<QueryNumPoolsRequest, QueryNumPoolsResponse>;
    /**
     * @generated from protobuf rpc: TotalLiquidity(osmosis.gamm.v1beta1.QueryTotalLiquidityRequest) returns (osmosis.gamm.v1beta1.QueryTotalLiquidityResponse);
     */
    totalLiquidity(input: QueryTotalLiquidityRequest, options?: RpcOptions): UnaryCall<QueryTotalLiquidityRequest, QueryTotalLiquidityResponse>;
    /**
     * Per Pool gRPC Endpoints
     *
     * @generated from protobuf rpc: Pool(osmosis.gamm.v1beta1.QueryPoolRequest) returns (osmosis.gamm.v1beta1.QueryPoolResponse);
     */
    pool(input: QueryPoolRequest, options?: RpcOptions): UnaryCall<QueryPoolRequest, QueryPoolResponse>;
    /**
     * @generated from protobuf rpc: PoolParams(osmosis.gamm.v1beta1.QueryPoolParamsRequest) returns (osmosis.gamm.v1beta1.QueryPoolParamsResponse);
     */
    poolParams(input: QueryPoolParamsRequest, options?: RpcOptions): UnaryCall<QueryPoolParamsRequest, QueryPoolParamsResponse>;
    /**
     * @generated from protobuf rpc: TotalPoolLiquidity(osmosis.gamm.v1beta1.QueryTotalPoolLiquidityRequest) returns (osmosis.gamm.v1beta1.QueryTotalPoolLiquidityResponse);
     */
    totalPoolLiquidity(input: QueryTotalPoolLiquidityRequest, options?: RpcOptions): UnaryCall<QueryTotalPoolLiquidityRequest, QueryTotalPoolLiquidityResponse>;
    /**
     * @generated from protobuf rpc: TotalShares(osmosis.gamm.v1beta1.QueryTotalSharesRequest) returns (osmosis.gamm.v1beta1.QueryTotalSharesResponse);
     */
    totalShares(input: QueryTotalSharesRequest, options?: RpcOptions): UnaryCall<QueryTotalSharesRequest, QueryTotalSharesResponse>;
    /**
     * @generated from protobuf rpc: SpotPrice(osmosis.gamm.v1beta1.QuerySpotPriceRequest) returns (osmosis.gamm.v1beta1.QuerySpotPriceResponse);
     */
    spotPrice(input: QuerySpotPriceRequest, options?: RpcOptions): UnaryCall<QuerySpotPriceRequest, QuerySpotPriceResponse>;
    /**
     * Estimate the swap.
     *
     * @generated from protobuf rpc: EstimateSwapExactAmountIn(osmosis.gamm.v1beta1.QuerySwapExactAmountInRequest) returns (osmosis.gamm.v1beta1.QuerySwapExactAmountInResponse);
     */
    estimateSwapExactAmountIn(input: QuerySwapExactAmountInRequest, options?: RpcOptions): UnaryCall<QuerySwapExactAmountInRequest, QuerySwapExactAmountInResponse>;
    /**
     * @generated from protobuf rpc: EstimateSwapExactAmountOut(osmosis.gamm.v1beta1.QuerySwapExactAmountOutRequest) returns (osmosis.gamm.v1beta1.QuerySwapExactAmountOutResponse);
     */
    estimateSwapExactAmountOut(input: QuerySwapExactAmountOutRequest, options?: RpcOptions): UnaryCall<QuerySwapExactAmountOutRequest, QuerySwapExactAmountOutResponse>;
}
/**
 * @generated from protobuf service osmosis.gamm.v1beta1.Query
 */
export class QueryClient implements IQueryClient, ServiceInfo {
    typeName = Query.typeName;
    methods = Query.methods;
    options = Query.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Pools(osmosis.gamm.v1beta1.QueryPoolsRequest) returns (osmosis.gamm.v1beta1.QueryPoolsResponse);
     */
    pools(input: QueryPoolsRequest, options?: RpcOptions): UnaryCall<QueryPoolsRequest, QueryPoolsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryPoolsRequest, QueryPoolsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: NumPools(osmosis.gamm.v1beta1.QueryNumPoolsRequest) returns (osmosis.gamm.v1beta1.QueryNumPoolsResponse);
     */
    numPools(input: QueryNumPoolsRequest, options?: RpcOptions): UnaryCall<QueryNumPoolsRequest, QueryNumPoolsResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryNumPoolsRequest, QueryNumPoolsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TotalLiquidity(osmosis.gamm.v1beta1.QueryTotalLiquidityRequest) returns (osmosis.gamm.v1beta1.QueryTotalLiquidityResponse);
     */
    totalLiquidity(input: QueryTotalLiquidityRequest, options?: RpcOptions): UnaryCall<QueryTotalLiquidityRequest, QueryTotalLiquidityResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryTotalLiquidityRequest, QueryTotalLiquidityResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Per Pool gRPC Endpoints
     *
     * @generated from protobuf rpc: Pool(osmosis.gamm.v1beta1.QueryPoolRequest) returns (osmosis.gamm.v1beta1.QueryPoolResponse);
     */
    pool(input: QueryPoolRequest, options?: RpcOptions): UnaryCall<QueryPoolRequest, QueryPoolResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryPoolRequest, QueryPoolResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PoolParams(osmosis.gamm.v1beta1.QueryPoolParamsRequest) returns (osmosis.gamm.v1beta1.QueryPoolParamsResponse);
     */
    poolParams(input: QueryPoolParamsRequest, options?: RpcOptions): UnaryCall<QueryPoolParamsRequest, QueryPoolParamsResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryPoolParamsRequest, QueryPoolParamsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TotalPoolLiquidity(osmosis.gamm.v1beta1.QueryTotalPoolLiquidityRequest) returns (osmosis.gamm.v1beta1.QueryTotalPoolLiquidityResponse);
     */
    totalPoolLiquidity(input: QueryTotalPoolLiquidityRequest, options?: RpcOptions): UnaryCall<QueryTotalPoolLiquidityRequest, QueryTotalPoolLiquidityResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryTotalPoolLiquidityRequest, QueryTotalPoolLiquidityResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TotalShares(osmosis.gamm.v1beta1.QueryTotalSharesRequest) returns (osmosis.gamm.v1beta1.QueryTotalSharesResponse);
     */
    totalShares(input: QueryTotalSharesRequest, options?: RpcOptions): UnaryCall<QueryTotalSharesRequest, QueryTotalSharesResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryTotalSharesRequest, QueryTotalSharesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SpotPrice(osmosis.gamm.v1beta1.QuerySpotPriceRequest) returns (osmosis.gamm.v1beta1.QuerySpotPriceResponse);
     */
    spotPrice(input: QuerySpotPriceRequest, options?: RpcOptions): UnaryCall<QuerySpotPriceRequest, QuerySpotPriceResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<QuerySpotPriceRequest, QuerySpotPriceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Estimate the swap.
     *
     * @generated from protobuf rpc: EstimateSwapExactAmountIn(osmosis.gamm.v1beta1.QuerySwapExactAmountInRequest) returns (osmosis.gamm.v1beta1.QuerySwapExactAmountInResponse);
     */
    estimateSwapExactAmountIn(input: QuerySwapExactAmountInRequest, options?: RpcOptions): UnaryCall<QuerySwapExactAmountInRequest, QuerySwapExactAmountInResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<QuerySwapExactAmountInRequest, QuerySwapExactAmountInResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: EstimateSwapExactAmountOut(osmosis.gamm.v1beta1.QuerySwapExactAmountOutRequest) returns (osmosis.gamm.v1beta1.QuerySwapExactAmountOutResponse);
     */
    estimateSwapExactAmountOut(input: QuerySwapExactAmountOutRequest, options?: RpcOptions): UnaryCall<QuerySwapExactAmountOutRequest, QuerySwapExactAmountOutResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<QuerySwapExactAmountOutRequest, QuerySwapExactAmountOutResponse>("unary", this._transport, method, opt, input);
    }
}
