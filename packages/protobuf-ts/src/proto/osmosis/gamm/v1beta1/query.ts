// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "osmosis/gamm/v1beta1/query.proto" (package "osmosis.gamm.v1beta1", syntax proto3),// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SwapAmountOutRoute } from "./tx";
import { SwapAmountInRoute } from "./tx";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { PageRequest } from "../../../cosmos/base/query/v1beta1/pagination";
import { Any } from "../../../google/protobuf/any";
/**
 * =============================== Pool
 *
 * @generated from protobuf message osmosis.gamm.v1beta1.QueryPoolRequest
 */
export interface QueryPoolRequest {
    /**
     * @generated from protobuf field: uint64 poolId = 1;
     */
    poolId: bigint;
}
/**
 * @generated from protobuf message osmosis.gamm.v1beta1.QueryPoolResponse
 */
export interface QueryPoolResponse {
    /**
     * @generated from protobuf field: google.protobuf.Any pool = 1;
     */
    pool?: Any;
}
/**
 * =============================== Pools
 *
 * @generated from protobuf message osmosis.gamm.v1beta1.QueryPoolsRequest
 */
export interface QueryPoolsRequest {
    /**
     * pagination defines an optional pagination for the request.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
     */
    pagination?: PageRequest;
}
/**
 * @generated from protobuf message osmosis.gamm.v1beta1.QueryPoolsResponse
 */
export interface QueryPoolsResponse {
    /**
     * @generated from protobuf field: repeated google.protobuf.Any pools = 1;
     */
    pools: Any[];
    /**
     * pagination defines the pagination in the response.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
     */
    pagination?: PageResponse;
}
/**
 * =============================== NumPools
 *
 * @generated from protobuf message osmosis.gamm.v1beta1.QueryNumPoolsRequest
 */
export interface QueryNumPoolsRequest {
}
/**
 * @generated from protobuf message osmosis.gamm.v1beta1.QueryNumPoolsResponse
 */
export interface QueryNumPoolsResponse {
    /**
     * @generated from protobuf field: uint64 numPools = 1;
     */
    numPools: bigint;
}
/**
 * =============================== PoolParams
 *
 * @generated from protobuf message osmosis.gamm.v1beta1.QueryPoolParamsRequest
 */
export interface QueryPoolParamsRequest {
    /**
     * @generated from protobuf field: uint64 poolId = 1;
     */
    poolId: bigint;
}
/**
 * @generated from protobuf message osmosis.gamm.v1beta1.QueryPoolParamsResponse
 */
export interface QueryPoolParamsResponse {
    /**
     * @generated from protobuf field: google.protobuf.Any params = 1;
     */
    params?: Any;
}
/**
 * =============================== PoolLiquidity
 *
 * @generated from protobuf message osmosis.gamm.v1beta1.QueryTotalPoolLiquidityRequest
 */
export interface QueryTotalPoolLiquidityRequest {
    /**
     * @generated from protobuf field: uint64 poolId = 1;
     */
    poolId: bigint;
}
/**
 * @generated from protobuf message osmosis.gamm.v1beta1.QueryTotalPoolLiquidityResponse
 */
export interface QueryTotalPoolLiquidityResponse {
    /**
     * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin liquidity = 1;
     */
    liquidity: Coin[];
}
/**
 * =============================== TotalShares
 *
 * @generated from protobuf message osmosis.gamm.v1beta1.QueryTotalSharesRequest
 */
export interface QueryTotalSharesRequest {
    /**
     * @generated from protobuf field: uint64 poolId = 1;
     */
    poolId: bigint;
}
/**
 * @generated from protobuf message osmosis.gamm.v1beta1.QueryTotalSharesResponse
 */
export interface QueryTotalSharesResponse {
    /**
     * @generated from protobuf field: cosmos.base.v1beta1.Coin totalShares = 1;
     */
    totalShares?: Coin;
}
/**
 * =============================== SpotPrice
 *
 * @generated from protobuf message osmosis.gamm.v1beta1.QuerySpotPriceRequest
 */
export interface QuerySpotPriceRequest {
    /**
     * @generated from protobuf field: uint64 poolId = 1;
     */
    poolId: bigint;
    /**
     * @generated from protobuf field: string tokenInDenom = 2;
     */
    tokenInDenom: string;
    /**
     * @generated from protobuf field: string tokenOutDenom = 3;
     */
    tokenOutDenom: string;
}
/**
 * @generated from protobuf message osmosis.gamm.v1beta1.QuerySpotPriceResponse
 */
export interface QuerySpotPriceResponse {
    /**
     * String of the Dec. Ex) 10.203uatom
     *
     * @generated from protobuf field: string spotPrice = 1;
     */
    spotPrice: string;
}
/**
 * =============================== EstimateSwapExactAmountIn
 *
 * @generated from protobuf message osmosis.gamm.v1beta1.QuerySwapExactAmountInRequest
 */
export interface QuerySwapExactAmountInRequest {
    /**
     * @generated from protobuf field: string sender = 1;
     */
    sender: string;
    /**
     * @generated from protobuf field: uint64 poolId = 2;
     */
    poolId: bigint;
    /**
     * @generated from protobuf field: string tokenIn = 3;
     */
    tokenIn: string;
    /**
     * @generated from protobuf field: repeated osmosis.gamm.v1beta1.SwapAmountInRoute routes = 4;
     */
    routes: SwapAmountInRoute[];
}
/**
 * @generated from protobuf message osmosis.gamm.v1beta1.QuerySwapExactAmountInResponse
 */
export interface QuerySwapExactAmountInResponse {
    /**
     * @generated from protobuf field: string tokenOutAmount = 1;
     */
    tokenOutAmount: string;
}
/**
 * =============================== EstimateSwapExactAmountOut
 *
 * @generated from protobuf message osmosis.gamm.v1beta1.QuerySwapExactAmountOutRequest
 */
export interface QuerySwapExactAmountOutRequest {
    /**
     * @generated from protobuf field: string sender = 1;
     */
    sender: string;
    /**
     * @generated from protobuf field: uint64 poolId = 2;
     */
    poolId: bigint;
    /**
     * @generated from protobuf field: repeated osmosis.gamm.v1beta1.SwapAmountOutRoute routes = 3;
     */
    routes: SwapAmountOutRoute[];
    /**
     * @generated from protobuf field: string tokenOut = 4;
     */
    tokenOut: string;
}
/**
 * @generated from protobuf message osmosis.gamm.v1beta1.QuerySwapExactAmountOutResponse
 */
export interface QuerySwapExactAmountOutResponse {
    /**
     * @generated from protobuf field: string tokenInAmount = 1;
     */
    tokenInAmount: string;
}
/**
 * @generated from protobuf message osmosis.gamm.v1beta1.QueryTotalLiquidityRequest
 */
export interface QueryTotalLiquidityRequest {
}
/**
 * @generated from protobuf message osmosis.gamm.v1beta1.QueryTotalLiquidityResponse
 */
export interface QueryTotalLiquidityResponse {
    /**
     * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin liquidity = 1;
     */
    liquidity: Coin[];
}
// @generated message type with reflection information, may provide speed optimized methods
class QueryPoolRequest$Type extends MessageType<QueryPoolRequest> {
    constructor() {
        super("osmosis.gamm.v1beta1.QueryPoolRequest", [
            { no: 1, name: "poolId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/, options: { "gogoproto.moretags": "yaml:\"pool_id\"" } }
        ]);
    }
    create(value?: PartialMessage<QueryPoolRequest>): QueryPoolRequest {
        const message = { poolId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryPoolRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryPoolRequest): QueryPoolRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 poolId */ 1:
                    message.poolId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryPoolRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 poolId = 1; */
        if (message.poolId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.poolId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.gamm.v1beta1.QueryPoolRequest
 */
export const QueryPoolRequest = new QueryPoolRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryPoolResponse$Type extends MessageType<QueryPoolResponse> {
    constructor() {
        super("osmosis.gamm.v1beta1.QueryPoolResponse", [
            { no: 1, name: "pool", kind: "message", T: () => Any, options: { "cosmos_proto.accepts_interface": "PoolI" } }
        ]);
    }
    create(value?: PartialMessage<QueryPoolResponse>): QueryPoolResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryPoolResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryPoolResponse): QueryPoolResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Any pool */ 1:
                    message.pool = Any.internalBinaryRead(reader, reader.uint32(), options, message.pool);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryPoolResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Any pool = 1; */
        if (message.pool)
            Any.internalBinaryWrite(message.pool, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.gamm.v1beta1.QueryPoolResponse
 */
export const QueryPoolResponse = new QueryPoolResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryPoolsRequest$Type extends MessageType<QueryPoolsRequest> {
    constructor() {
        super("osmosis.gamm.v1beta1.QueryPoolsRequest", [
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value?: PartialMessage<QueryPoolsRequest>): QueryPoolsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryPoolsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryPoolsRequest): QueryPoolsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryPoolsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.gamm.v1beta1.QueryPoolsRequest
 */
export const QueryPoolsRequest = new QueryPoolsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryPoolsResponse$Type extends MessageType<QueryPoolsResponse> {
    constructor() {
        super("osmosis.gamm.v1beta1.QueryPoolsResponse", [
            { no: 1, name: "pools", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Any, options: { "cosmos_proto.accepts_interface": "PoolI" } },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value?: PartialMessage<QueryPoolsResponse>): QueryPoolsResponse {
        const message = { pools: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryPoolsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryPoolsResponse): QueryPoolsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.protobuf.Any pools */ 1:
                    message.pools.push(Any.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryPoolsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.protobuf.Any pools = 1; */
        for (let i = 0; i < message.pools.length; i++)
            Any.internalBinaryWrite(message.pools[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.gamm.v1beta1.QueryPoolsResponse
 */
export const QueryPoolsResponse = new QueryPoolsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryNumPoolsRequest$Type extends MessageType<QueryNumPoolsRequest> {
    constructor() {
        super("osmosis.gamm.v1beta1.QueryNumPoolsRequest", []);
    }
    create(value?: PartialMessage<QueryNumPoolsRequest>): QueryNumPoolsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryNumPoolsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryNumPoolsRequest): QueryNumPoolsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryNumPoolsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.gamm.v1beta1.QueryNumPoolsRequest
 */
export const QueryNumPoolsRequest = new QueryNumPoolsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryNumPoolsResponse$Type extends MessageType<QueryNumPoolsResponse> {
    constructor() {
        super("osmosis.gamm.v1beta1.QueryNumPoolsResponse", [
            { no: 1, name: "numPools", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/, options: { "gogoproto.moretags": "yaml:\"num_pools\"" } }
        ]);
    }
    create(value?: PartialMessage<QueryNumPoolsResponse>): QueryNumPoolsResponse {
        const message = { numPools: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryNumPoolsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryNumPoolsResponse): QueryNumPoolsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 numPools */ 1:
                    message.numPools = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryNumPoolsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 numPools = 1; */
        if (message.numPools !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.numPools);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.gamm.v1beta1.QueryNumPoolsResponse
 */
export const QueryNumPoolsResponse = new QueryNumPoolsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryPoolParamsRequest$Type extends MessageType<QueryPoolParamsRequest> {
    constructor() {
        super("osmosis.gamm.v1beta1.QueryPoolParamsRequest", [
            { no: 1, name: "poolId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/, options: { "gogoproto.moretags": "yaml:\"pool_id\"" } }
        ]);
    }
    create(value?: PartialMessage<QueryPoolParamsRequest>): QueryPoolParamsRequest {
        const message = { poolId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryPoolParamsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryPoolParamsRequest): QueryPoolParamsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 poolId */ 1:
                    message.poolId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryPoolParamsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 poolId = 1; */
        if (message.poolId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.poolId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.gamm.v1beta1.QueryPoolParamsRequest
 */
export const QueryPoolParamsRequest = new QueryPoolParamsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryPoolParamsResponse$Type extends MessageType<QueryPoolParamsResponse> {
    constructor() {
        super("osmosis.gamm.v1beta1.QueryPoolParamsResponse", [
            { no: 1, name: "params", kind: "message", T: () => Any }
        ]);
    }
    create(value?: PartialMessage<QueryPoolParamsResponse>): QueryPoolParamsResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryPoolParamsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryPoolParamsResponse): QueryPoolParamsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Any params */ 1:
                    message.params = Any.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryPoolParamsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Any params = 1; */
        if (message.params)
            Any.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.gamm.v1beta1.QueryPoolParamsResponse
 */
export const QueryPoolParamsResponse = new QueryPoolParamsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryTotalPoolLiquidityRequest$Type extends MessageType<QueryTotalPoolLiquidityRequest> {
    constructor() {
        super("osmosis.gamm.v1beta1.QueryTotalPoolLiquidityRequest", [
            { no: 1, name: "poolId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/, options: { "gogoproto.moretags": "yaml:\"pool_id\"" } }
        ]);
    }
    create(value?: PartialMessage<QueryTotalPoolLiquidityRequest>): QueryTotalPoolLiquidityRequest {
        const message = { poolId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryTotalPoolLiquidityRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryTotalPoolLiquidityRequest): QueryTotalPoolLiquidityRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 poolId */ 1:
                    message.poolId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryTotalPoolLiquidityRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 poolId = 1; */
        if (message.poolId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.poolId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.gamm.v1beta1.QueryTotalPoolLiquidityRequest
 */
export const QueryTotalPoolLiquidityRequest = new QueryTotalPoolLiquidityRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryTotalPoolLiquidityResponse$Type extends MessageType<QueryTotalPoolLiquidityResponse> {
    constructor() {
        super("osmosis.gamm.v1beta1.QueryTotalPoolLiquidityResponse", [
            { no: 1, name: "liquidity", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"liquidity\"", "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } }
        ]);
    }
    create(value?: PartialMessage<QueryTotalPoolLiquidityResponse>): QueryTotalPoolLiquidityResponse {
        const message = { liquidity: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryTotalPoolLiquidityResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryTotalPoolLiquidityResponse): QueryTotalPoolLiquidityResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.base.v1beta1.Coin liquidity */ 1:
                    message.liquidity.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryTotalPoolLiquidityResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated cosmos.base.v1beta1.Coin liquidity = 1; */
        for (let i = 0; i < message.liquidity.length; i++)
            Coin.internalBinaryWrite(message.liquidity[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.gamm.v1beta1.QueryTotalPoolLiquidityResponse
 */
export const QueryTotalPoolLiquidityResponse = new QueryTotalPoolLiquidityResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryTotalSharesRequest$Type extends MessageType<QueryTotalSharesRequest> {
    constructor() {
        super("osmosis.gamm.v1beta1.QueryTotalSharesRequest", [
            { no: 1, name: "poolId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/, options: { "gogoproto.moretags": "yaml:\"pool_id\"" } }
        ]);
    }
    create(value?: PartialMessage<QueryTotalSharesRequest>): QueryTotalSharesRequest {
        const message = { poolId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryTotalSharesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryTotalSharesRequest): QueryTotalSharesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 poolId */ 1:
                    message.poolId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryTotalSharesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 poolId = 1; */
        if (message.poolId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.poolId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.gamm.v1beta1.QueryTotalSharesRequest
 */
export const QueryTotalSharesRequest = new QueryTotalSharesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryTotalSharesResponse$Type extends MessageType<QueryTotalSharesResponse> {
    constructor() {
        super("osmosis.gamm.v1beta1.QueryTotalSharesResponse", [
            { no: 1, name: "totalShares", kind: "message", T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"total_shares\"" } }
        ]);
    }
    create(value?: PartialMessage<QueryTotalSharesResponse>): QueryTotalSharesResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryTotalSharesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryTotalSharesResponse): QueryTotalSharesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.base.v1beta1.Coin totalShares */ 1:
                    message.totalShares = Coin.internalBinaryRead(reader, reader.uint32(), options, message.totalShares);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryTotalSharesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.base.v1beta1.Coin totalShares = 1; */
        if (message.totalShares)
            Coin.internalBinaryWrite(message.totalShares, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.gamm.v1beta1.QueryTotalSharesResponse
 */
export const QueryTotalSharesResponse = new QueryTotalSharesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuerySpotPriceRequest$Type extends MessageType<QuerySpotPriceRequest> {
    constructor() {
        super("osmosis.gamm.v1beta1.QuerySpotPriceRequest", [
            { no: 1, name: "poolId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/, options: { "gogoproto.moretags": "yaml:\"pool_id\"" } },
            { no: 2, name: "tokenInDenom", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"token_in_denom\"" } },
            { no: 3, name: "tokenOutDenom", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"token_out_denom\"" } }
        ]);
    }
    create(value?: PartialMessage<QuerySpotPriceRequest>): QuerySpotPriceRequest {
        const message = { poolId: 0n, tokenInDenom: "", tokenOutDenom: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuerySpotPriceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuerySpotPriceRequest): QuerySpotPriceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 poolId */ 1:
                    message.poolId = reader.uint64().toBigInt();
                    break;
                case /* string tokenInDenom */ 2:
                    message.tokenInDenom = reader.string();
                    break;
                case /* string tokenOutDenom */ 3:
                    message.tokenOutDenom = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuerySpotPriceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 poolId = 1; */
        if (message.poolId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.poolId);
        /* string tokenInDenom = 2; */
        if (message.tokenInDenom !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.tokenInDenom);
        /* string tokenOutDenom = 3; */
        if (message.tokenOutDenom !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.tokenOutDenom);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.gamm.v1beta1.QuerySpotPriceRequest
 */
export const QuerySpotPriceRequest = new QuerySpotPriceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuerySpotPriceResponse$Type extends MessageType<QuerySpotPriceResponse> {
    constructor() {
        super("osmosis.gamm.v1beta1.QuerySpotPriceResponse", [
            { no: 1, name: "spotPrice", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"spot_price\"" } }
        ]);
    }
    create(value?: PartialMessage<QuerySpotPriceResponse>): QuerySpotPriceResponse {
        const message = { spotPrice: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuerySpotPriceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuerySpotPriceResponse): QuerySpotPriceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string spotPrice */ 1:
                    message.spotPrice = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuerySpotPriceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string spotPrice = 1; */
        if (message.spotPrice !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.spotPrice);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.gamm.v1beta1.QuerySpotPriceResponse
 */
export const QuerySpotPriceResponse = new QuerySpotPriceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuerySwapExactAmountInRequest$Type extends MessageType<QuerySwapExactAmountInRequest> {
    constructor() {
        super("osmosis.gamm.v1beta1.QuerySwapExactAmountInRequest", [
            { no: 1, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"sender\"" } },
            { no: 2, name: "poolId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/, options: { "gogoproto.moretags": "yaml:\"pool_id\"" } },
            { no: 3, name: "tokenIn", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"token_in\"" } },
            { no: 4, name: "routes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SwapAmountInRoute, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"routes\"" } }
        ]);
    }
    create(value?: PartialMessage<QuerySwapExactAmountInRequest>): QuerySwapExactAmountInRequest {
        const message = { sender: "", poolId: 0n, tokenIn: "", routes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuerySwapExactAmountInRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuerySwapExactAmountInRequest): QuerySwapExactAmountInRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sender */ 1:
                    message.sender = reader.string();
                    break;
                case /* uint64 poolId */ 2:
                    message.poolId = reader.uint64().toBigInt();
                    break;
                case /* string tokenIn */ 3:
                    message.tokenIn = reader.string();
                    break;
                case /* repeated osmosis.gamm.v1beta1.SwapAmountInRoute routes */ 4:
                    message.routes.push(SwapAmountInRoute.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuerySwapExactAmountInRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sender = 1; */
        if (message.sender !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sender);
        /* uint64 poolId = 2; */
        if (message.poolId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.poolId);
        /* string tokenIn = 3; */
        if (message.tokenIn !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.tokenIn);
        /* repeated osmosis.gamm.v1beta1.SwapAmountInRoute routes = 4; */
        for (let i = 0; i < message.routes.length; i++)
            SwapAmountInRoute.internalBinaryWrite(message.routes[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.gamm.v1beta1.QuerySwapExactAmountInRequest
 */
export const QuerySwapExactAmountInRequest = new QuerySwapExactAmountInRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuerySwapExactAmountInResponse$Type extends MessageType<QuerySwapExactAmountInResponse> {
    constructor() {
        super("osmosis.gamm.v1beta1.QuerySwapExactAmountInResponse", [
            { no: 1, name: "tokenOutAmount", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int", "gogoproto.moretags": "yaml:\"token_out_amount\"" } }
        ]);
    }
    create(value?: PartialMessage<QuerySwapExactAmountInResponse>): QuerySwapExactAmountInResponse {
        const message = { tokenOutAmount: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuerySwapExactAmountInResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuerySwapExactAmountInResponse): QuerySwapExactAmountInResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string tokenOutAmount */ 1:
                    message.tokenOutAmount = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuerySwapExactAmountInResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string tokenOutAmount = 1; */
        if (message.tokenOutAmount !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.tokenOutAmount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.gamm.v1beta1.QuerySwapExactAmountInResponse
 */
export const QuerySwapExactAmountInResponse = new QuerySwapExactAmountInResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuerySwapExactAmountOutRequest$Type extends MessageType<QuerySwapExactAmountOutRequest> {
    constructor() {
        super("osmosis.gamm.v1beta1.QuerySwapExactAmountOutRequest", [
            { no: 1, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"sender\"" } },
            { no: 2, name: "poolId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/, options: { "gogoproto.moretags": "yaml:\"pool_id\"" } },
            { no: 3, name: "routes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SwapAmountOutRoute, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"routes\"" } },
            { no: 4, name: "tokenOut", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"token_out\"" } }
        ]);
    }
    create(value?: PartialMessage<QuerySwapExactAmountOutRequest>): QuerySwapExactAmountOutRequest {
        const message = { sender: "", poolId: 0n, routes: [], tokenOut: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuerySwapExactAmountOutRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuerySwapExactAmountOutRequest): QuerySwapExactAmountOutRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sender */ 1:
                    message.sender = reader.string();
                    break;
                case /* uint64 poolId */ 2:
                    message.poolId = reader.uint64().toBigInt();
                    break;
                case /* repeated osmosis.gamm.v1beta1.SwapAmountOutRoute routes */ 3:
                    message.routes.push(SwapAmountOutRoute.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string tokenOut */ 4:
                    message.tokenOut = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuerySwapExactAmountOutRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sender = 1; */
        if (message.sender !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sender);
        /* uint64 poolId = 2; */
        if (message.poolId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.poolId);
        /* repeated osmosis.gamm.v1beta1.SwapAmountOutRoute routes = 3; */
        for (let i = 0; i < message.routes.length; i++)
            SwapAmountOutRoute.internalBinaryWrite(message.routes[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string tokenOut = 4; */
        if (message.tokenOut !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.tokenOut);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.gamm.v1beta1.QuerySwapExactAmountOutRequest
 */
export const QuerySwapExactAmountOutRequest = new QuerySwapExactAmountOutRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuerySwapExactAmountOutResponse$Type extends MessageType<QuerySwapExactAmountOutResponse> {
    constructor() {
        super("osmosis.gamm.v1beta1.QuerySwapExactAmountOutResponse", [
            { no: 1, name: "tokenInAmount", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.nullable": false, "gogoproto.customtype": "github.com/cosmos/cosmos-sdk/types.Int", "gogoproto.moretags": "yaml:\"token_in_amount\"" } }
        ]);
    }
    create(value?: PartialMessage<QuerySwapExactAmountOutResponse>): QuerySwapExactAmountOutResponse {
        const message = { tokenInAmount: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuerySwapExactAmountOutResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuerySwapExactAmountOutResponse): QuerySwapExactAmountOutResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string tokenInAmount */ 1:
                    message.tokenInAmount = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuerySwapExactAmountOutResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string tokenInAmount = 1; */
        if (message.tokenInAmount !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.tokenInAmount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.gamm.v1beta1.QuerySwapExactAmountOutResponse
 */
export const QuerySwapExactAmountOutResponse = new QuerySwapExactAmountOutResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryTotalLiquidityRequest$Type extends MessageType<QueryTotalLiquidityRequest> {
    constructor() {
        super("osmosis.gamm.v1beta1.QueryTotalLiquidityRequest", []);
    }
    create(value?: PartialMessage<QueryTotalLiquidityRequest>): QueryTotalLiquidityRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryTotalLiquidityRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryTotalLiquidityRequest): QueryTotalLiquidityRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryTotalLiquidityRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.gamm.v1beta1.QueryTotalLiquidityRequest
 */
export const QueryTotalLiquidityRequest = new QueryTotalLiquidityRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryTotalLiquidityResponse$Type extends MessageType<QueryTotalLiquidityResponse> {
    constructor() {
        super("osmosis.gamm.v1beta1.QueryTotalLiquidityResponse", [
            { no: 1, name: "liquidity", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.moretags": "yaml:\"liquidity\"", "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } }
        ]);
    }
    create(value?: PartialMessage<QueryTotalLiquidityResponse>): QueryTotalLiquidityResponse {
        const message = { liquidity: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryTotalLiquidityResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryTotalLiquidityResponse): QueryTotalLiquidityResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.base.v1beta1.Coin liquidity */ 1:
                    message.liquidity.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryTotalLiquidityResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated cosmos.base.v1beta1.Coin liquidity = 1; */
        for (let i = 0; i < message.liquidity.length; i++)
            Coin.internalBinaryWrite(message.liquidity[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.gamm.v1beta1.QueryTotalLiquidityResponse
 */
export const QueryTotalLiquidityResponse = new QueryTotalLiquidityResponse$Type();
/**
 * @generated ServiceType for protobuf service osmosis.gamm.v1beta1.Query
 */
export const Query = new ServiceType("osmosis.gamm.v1beta1.Query", [
    { name: "Pools", options: { "google.api.http": { get: "/osmosis/gamm/v1beta1/pools" } }, I: QueryPoolsRequest, O: QueryPoolsResponse },
    { name: "NumPools", options: { "google.api.http": { get: "/osmosis/gamm/v1beta1/num_pools" } }, I: QueryNumPoolsRequest, O: QueryNumPoolsResponse },
    { name: "TotalLiquidity", options: { "google.api.http": { get: "/osmosis/gamm/v1beta1/total_liquidity" } }, I: QueryTotalLiquidityRequest, O: QueryTotalLiquidityResponse },
    { name: "Pool", options: { "google.api.http": { get: "/osmosis/gamm/v1beta1/pools/{poolId}" } }, I: QueryPoolRequest, O: QueryPoolResponse },
    { name: "PoolParams", options: { "google.api.http": { get: "/osmosis/gamm/v1beta1/pools/{poolId}/params" } }, I: QueryPoolParamsRequest, O: QueryPoolParamsResponse },
    { name: "TotalPoolLiquidity", options: { "google.api.http": { get: "/osmosis/gamm/v1beta1/pools/{poolId}/total_pool_liquidity" } }, I: QueryTotalPoolLiquidityRequest, O: QueryTotalPoolLiquidityResponse },
    { name: "TotalShares", options: { "google.api.http": { get: "/osmosis/gamm/v1beta1/pools/{poolId}/total_shares" } }, I: QueryTotalSharesRequest, O: QueryTotalSharesResponse },
    { name: "SpotPrice", options: { "google.api.http": { get: "/osmosis/gamm/v1beta1/pools/{poolId}/prices" } }, I: QuerySpotPriceRequest, O: QuerySpotPriceResponse },
    { name: "EstimateSwapExactAmountIn", options: { "google.api.http": { get: "/osmosis/gamm/v1beta1/{poolId}/estimate/swap_exact_amount_in" } }, I: QuerySwapExactAmountInRequest, O: QuerySwapExactAmountInResponse },
    { name: "EstimateSwapExactAmountOut", options: { "google.api.http": { get: "/osmosis/gamm/v1beta1/{poolId}/estimate/swap_exact_amount_out" } }, I: QuerySwapExactAmountOutRequest, O: QuerySwapExactAmountOutResponse }
]);
