// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "osmosis/gamm/pool-models/balancer/tx.proto" (package "osmosis.gamm.v1beta1", syntax proto3),// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PoolAsset } from "./balancerPool";
import { PoolParams } from "./balancerPool";
/**
 * ===================== MsgCreatePool
 *
 * @generated from protobuf message osmosis.gamm.v1beta1.MsgCreateBalancerPool
 */
export interface MsgCreateBalancerPool {
    /**
     * @generated from protobuf field: string sender = 1;
     */
    sender: string;
    /**
     * @generated from protobuf field: osmosis.gamm.v1beta1.PoolParams poolParams = 2;
     */
    poolParams?: PoolParams;
    /**
     * @generated from protobuf field: repeated osmosis.gamm.v1beta1.PoolAsset poolAssets = 3;
     */
    poolAssets: PoolAsset[];
    /**
     * @generated from protobuf field: string future_pool_governor = 4;
     */
    futurePoolGovernor: string;
}
/**
 * @generated from protobuf message osmosis.gamm.v1beta1.MsgCreateBalancerPoolResponse
 */
export interface MsgCreateBalancerPoolResponse {
    /**
     * @generated from protobuf field: uint64 pool_id = 1;
     */
    poolId: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class MsgCreateBalancerPool$Type extends MessageType<MsgCreateBalancerPool> {
    constructor() {
        super("osmosis.gamm.v1beta1.MsgCreateBalancerPool", [
            { no: 1, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"sender\"" } },
            { no: 2, name: "poolParams", kind: "message", T: () => PoolParams, options: { "gogoproto.moretags": "yaml:\"pool_params\"" } },
            { no: 3, name: "poolAssets", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PoolAsset, options: { "gogoproto.nullable": false } },
            { no: 4, name: "future_pool_governor", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"future_pool_governor\"" } }
        ]);
    }
    create(value?: PartialMessage<MsgCreateBalancerPool>): MsgCreateBalancerPool {
        const message = { sender: "", poolAssets: [], futurePoolGovernor: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgCreateBalancerPool>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgCreateBalancerPool): MsgCreateBalancerPool {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string sender */ 1:
                    message.sender = reader.string();
                    break;
                case /* osmosis.gamm.v1beta1.PoolParams poolParams */ 2:
                    message.poolParams = PoolParams.internalBinaryRead(reader, reader.uint32(), options, message.poolParams);
                    break;
                case /* repeated osmosis.gamm.v1beta1.PoolAsset poolAssets */ 3:
                    message.poolAssets.push(PoolAsset.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string future_pool_governor */ 4:
                    message.futurePoolGovernor = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgCreateBalancerPool, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string sender = 1; */
        if (message.sender !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sender);
        /* osmosis.gamm.v1beta1.PoolParams poolParams = 2; */
        if (message.poolParams)
            PoolParams.internalBinaryWrite(message.poolParams, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated osmosis.gamm.v1beta1.PoolAsset poolAssets = 3; */
        for (let i = 0; i < message.poolAssets.length; i++)
            PoolAsset.internalBinaryWrite(message.poolAssets[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string future_pool_governor = 4; */
        if (message.futurePoolGovernor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.futurePoolGovernor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.gamm.v1beta1.MsgCreateBalancerPool
 */
export const MsgCreateBalancerPool = new MsgCreateBalancerPool$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgCreateBalancerPoolResponse$Type extends MessageType<MsgCreateBalancerPoolResponse> {
    constructor() {
        super("osmosis.gamm.v1beta1.MsgCreateBalancerPoolResponse", [
            { no: 1, name: "pool_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/, options: { "gogoproto.customname": "PoolID" } }
        ]);
    }
    create(value?: PartialMessage<MsgCreateBalancerPoolResponse>): MsgCreateBalancerPoolResponse {
        const message = { poolId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgCreateBalancerPoolResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgCreateBalancerPoolResponse): MsgCreateBalancerPoolResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 pool_id */ 1:
                    message.poolId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgCreateBalancerPoolResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 pool_id = 1; */
        if (message.poolId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.poolId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message osmosis.gamm.v1beta1.MsgCreateBalancerPoolResponse
 */
export const MsgCreateBalancerPoolResponse = new MsgCreateBalancerPoolResponse$Type();
/**
 * @generated ServiceType for protobuf service osmosis.gamm.v1beta1.Msg
 */
export const Msg = new ServiceType("osmosis.gamm.v1beta1.Msg", [
    { name: "CreateBalancerPool", options: {}, I: MsgCreateBalancerPool, O: MsgCreateBalancerPoolResponse }
]);
