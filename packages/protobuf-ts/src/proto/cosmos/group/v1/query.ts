// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "cosmos/group/v1/query.proto" (package "cosmos.group.v1", syntax proto3),// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { TallyResult } from "./types";
import { Vote } from "./types";
import { Proposal } from "./types";
import { PageResponse } from "../../base/query/v1beta1/pagination";
import { GroupMember } from "./types";
import { PageRequest } from "../../base/query/v1beta1/pagination";
import { GroupPolicyInfo } from "./types";
import { GroupInfo } from "./types";
/**
 * QueryGroupInfoRequest is the Query/GroupInfo request type.
 *
 * @generated from protobuf message cosmos.group.v1.QueryGroupInfoRequest
 */
export interface QueryGroupInfoRequest {
    /**
     * group_id is the unique ID of the group.
     *
     * @generated from protobuf field: uint64 group_id = 1;
     */
    groupId: bigint;
}
/**
 * QueryGroupInfoResponse is the Query/GroupInfo response type.
 *
 * @generated from protobuf message cosmos.group.v1.QueryGroupInfoResponse
 */
export interface QueryGroupInfoResponse {
    /**
     * info is the GroupInfo for the group.
     *
     * @generated from protobuf field: cosmos.group.v1.GroupInfo info = 1;
     */
    info?: GroupInfo;
}
/**
 * QueryGroupPolicyInfoRequest is the Query/GroupPolicyInfo request type.
 *
 * @generated from protobuf message cosmos.group.v1.QueryGroupPolicyInfoRequest
 */
export interface QueryGroupPolicyInfoRequest {
    /**
     * address is the account address of the group policy.
     *
     * @generated from protobuf field: string address = 1;
     */
    address: string;
}
/**
 * QueryGroupPolicyInfoResponse is the Query/GroupPolicyInfo response type.
 *
 * @generated from protobuf message cosmos.group.v1.QueryGroupPolicyInfoResponse
 */
export interface QueryGroupPolicyInfoResponse {
    /**
     * info is the GroupPolicyInfo for the group policy.
     *
     * @generated from protobuf field: cosmos.group.v1.GroupPolicyInfo info = 1;
     */
    info?: GroupPolicyInfo;
}
/**
 * QueryGroupMembersRequest is the Query/GroupMembers request type.
 *
 * @generated from protobuf message cosmos.group.v1.QueryGroupMembersRequest
 */
export interface QueryGroupMembersRequest {
    /**
     * group_id is the unique ID of the group.
     *
     * @generated from protobuf field: uint64 group_id = 1;
     */
    groupId: bigint;
    /**
     * pagination defines an optional pagination for the request.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
     */
    pagination?: PageRequest;
}
/**
 * QueryGroupMembersResponse is the Query/GroupMembersResponse response type.
 *
 * @generated from protobuf message cosmos.group.v1.QueryGroupMembersResponse
 */
export interface QueryGroupMembersResponse {
    /**
     * members are the members of the group with given group_id.
     *
     * @generated from protobuf field: repeated cosmos.group.v1.GroupMember members = 1;
     */
    members: GroupMember[];
    /**
     * pagination defines the pagination in the response.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
     */
    pagination?: PageResponse;
}
/**
 * QueryGroupsByAdminRequest is the Query/GroupsByAdmin request type.
 *
 * @generated from protobuf message cosmos.group.v1.QueryGroupsByAdminRequest
 */
export interface QueryGroupsByAdminRequest {
    /**
     * admin is the account address of a group's admin.
     *
     * @generated from protobuf field: string admin = 1;
     */
    admin: string;
    /**
     * pagination defines an optional pagination for the request.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
     */
    pagination?: PageRequest;
}
/**
 * QueryGroupsByAdminResponse is the Query/GroupsByAdminResponse response type.
 *
 * @generated from protobuf message cosmos.group.v1.QueryGroupsByAdminResponse
 */
export interface QueryGroupsByAdminResponse {
    /**
     * groups are the groups info with the provided admin.
     *
     * @generated from protobuf field: repeated cosmos.group.v1.GroupInfo groups = 1;
     */
    groups: GroupInfo[];
    /**
     * pagination defines the pagination in the response.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
     */
    pagination?: PageResponse;
}
/**
 * QueryGroupPoliciesByGroupRequest is the Query/GroupPoliciesByGroup request type.
 *
 * @generated from protobuf message cosmos.group.v1.QueryGroupPoliciesByGroupRequest
 */
export interface QueryGroupPoliciesByGroupRequest {
    /**
     * group_id is the unique ID of the group policy's group.
     *
     * @generated from protobuf field: uint64 group_id = 1;
     */
    groupId: bigint;
    /**
     * pagination defines an optional pagination for the request.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
     */
    pagination?: PageRequest;
}
/**
 * QueryGroupPoliciesByGroupResponse is the Query/GroupPoliciesByGroup response type.
 *
 * @generated from protobuf message cosmos.group.v1.QueryGroupPoliciesByGroupResponse
 */
export interface QueryGroupPoliciesByGroupResponse {
    /**
     * group_policies are the group policies info associated with the provided group.
     *
     * @generated from protobuf field: repeated cosmos.group.v1.GroupPolicyInfo group_policies = 1;
     */
    groupPolicies: GroupPolicyInfo[];
    /**
     * pagination defines the pagination in the response.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
     */
    pagination?: PageResponse;
}
/**
 * QueryGroupPoliciesByAdminRequest is the Query/GroupPoliciesByAdmin request type.
 *
 * @generated from protobuf message cosmos.group.v1.QueryGroupPoliciesByAdminRequest
 */
export interface QueryGroupPoliciesByAdminRequest {
    /**
     * admin is the admin address of the group policy.
     *
     * @generated from protobuf field: string admin = 1;
     */
    admin: string;
    /**
     * pagination defines an optional pagination for the request.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
     */
    pagination?: PageRequest;
}
/**
 * QueryGroupPoliciesByAdminResponse is the Query/GroupPoliciesByAdmin response type.
 *
 * @generated from protobuf message cosmos.group.v1.QueryGroupPoliciesByAdminResponse
 */
export interface QueryGroupPoliciesByAdminResponse {
    /**
     * group_policies are the group policies info with provided admin.
     *
     * @generated from protobuf field: repeated cosmos.group.v1.GroupPolicyInfo group_policies = 1;
     */
    groupPolicies: GroupPolicyInfo[];
    /**
     * pagination defines the pagination in the response.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
     */
    pagination?: PageResponse;
}
/**
 * QueryProposalRequest is the Query/Proposal request type.
 *
 * @generated from protobuf message cosmos.group.v1.QueryProposalRequest
 */
export interface QueryProposalRequest {
    /**
     * proposal_id is the unique ID of a proposal.
     *
     * @generated from protobuf field: uint64 proposal_id = 1;
     */
    proposalId: bigint;
}
/**
 * QueryProposalResponse is the Query/Proposal response type.
 *
 * @generated from protobuf message cosmos.group.v1.QueryProposalResponse
 */
export interface QueryProposalResponse {
    /**
     * proposal is the proposal info.
     *
     * @generated from protobuf field: cosmos.group.v1.Proposal proposal = 1;
     */
    proposal?: Proposal;
}
/**
 * QueryProposalsByGroupPolicyRequest is the Query/ProposalByGroupPolicy request type.
 *
 * @generated from protobuf message cosmos.group.v1.QueryProposalsByGroupPolicyRequest
 */
export interface QueryProposalsByGroupPolicyRequest {
    /**
     * address is the account address of the group policy related to proposals.
     *
     * @generated from protobuf field: string address = 1;
     */
    address: string;
    /**
     * pagination defines an optional pagination for the request.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
     */
    pagination?: PageRequest;
}
/**
 * QueryProposalsByGroupPolicyResponse is the Query/ProposalByGroupPolicy response type.
 *
 * @generated from protobuf message cosmos.group.v1.QueryProposalsByGroupPolicyResponse
 */
export interface QueryProposalsByGroupPolicyResponse {
    /**
     * proposals are the proposals with given group policy.
     *
     * @generated from protobuf field: repeated cosmos.group.v1.Proposal proposals = 1;
     */
    proposals: Proposal[];
    /**
     * pagination defines the pagination in the response.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
     */
    pagination?: PageResponse;
}
/**
 * QueryVoteByProposalVoterRequest is the Query/VoteByProposalVoter request type.
 *
 * @generated from protobuf message cosmos.group.v1.QueryVoteByProposalVoterRequest
 */
export interface QueryVoteByProposalVoterRequest {
    /**
     * proposal_id is the unique ID of a proposal.
     *
     * @generated from protobuf field: uint64 proposal_id = 1;
     */
    proposalId: bigint;
    /**
     * voter is a proposal voter account address.
     *
     * @generated from protobuf field: string voter = 2;
     */
    voter: string;
}
/**
 * QueryVoteByProposalVoterResponse is the Query/VoteByProposalVoter response type.
 *
 * @generated from protobuf message cosmos.group.v1.QueryVoteByProposalVoterResponse
 */
export interface QueryVoteByProposalVoterResponse {
    /**
     * vote is the vote with given proposal_id and voter.
     *
     * @generated from protobuf field: cosmos.group.v1.Vote vote = 1;
     */
    vote?: Vote;
}
/**
 * QueryVotesByProposalRequest is the Query/VotesByProposal request type.
 *
 * @generated from protobuf message cosmos.group.v1.QueryVotesByProposalRequest
 */
export interface QueryVotesByProposalRequest {
    /**
     * proposal_id is the unique ID of a proposal.
     *
     * @generated from protobuf field: uint64 proposal_id = 1;
     */
    proposalId: bigint;
    /**
     * pagination defines an optional pagination for the request.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
     */
    pagination?: PageRequest;
}
/**
 * QueryVotesByProposalResponse is the Query/VotesByProposal response type.
 *
 * @generated from protobuf message cosmos.group.v1.QueryVotesByProposalResponse
 */
export interface QueryVotesByProposalResponse {
    /**
     * votes are the list of votes for given proposal_id.
     *
     * @generated from protobuf field: repeated cosmos.group.v1.Vote votes = 1;
     */
    votes: Vote[];
    /**
     * pagination defines the pagination in the response.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
     */
    pagination?: PageResponse;
}
/**
 * QueryVotesByVoterRequest is the Query/VotesByVoter request type.
 *
 * @generated from protobuf message cosmos.group.v1.QueryVotesByVoterRequest
 */
export interface QueryVotesByVoterRequest {
    /**
     * voter is a proposal voter account address.
     *
     * @generated from protobuf field: string voter = 1;
     */
    voter: string;
    /**
     * pagination defines an optional pagination for the request.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
     */
    pagination?: PageRequest;
}
/**
 * QueryVotesByVoterResponse is the Query/VotesByVoter response type.
 *
 * @generated from protobuf message cosmos.group.v1.QueryVotesByVoterResponse
 */
export interface QueryVotesByVoterResponse {
    /**
     * votes are the list of votes by given voter.
     *
     * @generated from protobuf field: repeated cosmos.group.v1.Vote votes = 1;
     */
    votes: Vote[];
    /**
     * pagination defines the pagination in the response.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
     */
    pagination?: PageResponse;
}
/**
 * QueryGroupsByMemberRequest is the Query/GroupsByMember request type.
 *
 * @generated from protobuf message cosmos.group.v1.QueryGroupsByMemberRequest
 */
export interface QueryGroupsByMemberRequest {
    /**
     * address is the group member address.
     *
     * @generated from protobuf field: string address = 1;
     */
    address: string;
    /**
     * pagination defines an optional pagination for the request.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
     */
    pagination?: PageRequest;
}
/**
 * QueryGroupsByMemberResponse is the Query/GroupsByMember response type.
 *
 * @generated from protobuf message cosmos.group.v1.QueryGroupsByMemberResponse
 */
export interface QueryGroupsByMemberResponse {
    /**
     * groups are the groups info with the provided group member.
     *
     * @generated from protobuf field: repeated cosmos.group.v1.GroupInfo groups = 1;
     */
    groups: GroupInfo[];
    /**
     * pagination defines the pagination in the response.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
     */
    pagination?: PageResponse;
}
/**
 * QueryTallyResultRequest is the Query/TallyResult request type.
 *
 * @generated from protobuf message cosmos.group.v1.QueryTallyResultRequest
 */
export interface QueryTallyResultRequest {
    /**
     * proposal_id is the unique id of a proposal.
     *
     * @generated from protobuf field: uint64 proposal_id = 1;
     */
    proposalId: bigint;
}
/**
 * QueryTallyResultResponse is the Query/TallyResult response type.
 *
 * @generated from protobuf message cosmos.group.v1.QueryTallyResultResponse
 */
export interface QueryTallyResultResponse {
    /**
     * tally defines the requested tally.
     *
     * @generated from protobuf field: cosmos.group.v1.TallyResult tally = 1;
     */
    tally?: TallyResult;
}
// @generated message type with reflection information, may provide speed optimized methods
class QueryGroupInfoRequest$Type extends MessageType<QueryGroupInfoRequest> {
    constructor() {
        super("cosmos.group.v1.QueryGroupInfoRequest", [
            { no: 1, name: "group_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<QueryGroupInfoRequest>): QueryGroupInfoRequest {
        const message = { groupId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryGroupInfoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryGroupInfoRequest): QueryGroupInfoRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 group_id */ 1:
                    message.groupId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryGroupInfoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 group_id = 1; */
        if (message.groupId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.groupId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.QueryGroupInfoRequest
 */
export const QueryGroupInfoRequest = new QueryGroupInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryGroupInfoResponse$Type extends MessageType<QueryGroupInfoResponse> {
    constructor() {
        super("cosmos.group.v1.QueryGroupInfoResponse", [
            { no: 1, name: "info", kind: "message", T: () => GroupInfo }
        ]);
    }
    create(value?: PartialMessage<QueryGroupInfoResponse>): QueryGroupInfoResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryGroupInfoResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryGroupInfoResponse): QueryGroupInfoResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.group.v1.GroupInfo info */ 1:
                    message.info = GroupInfo.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryGroupInfoResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.group.v1.GroupInfo info = 1; */
        if (message.info)
            GroupInfo.internalBinaryWrite(message.info, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.QueryGroupInfoResponse
 */
export const QueryGroupInfoResponse = new QueryGroupInfoResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryGroupPolicyInfoRequest$Type extends MessageType<QueryGroupPolicyInfoRequest> {
    constructor() {
        super("cosmos.group.v1.QueryGroupPolicyInfoRequest", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "cosmos_proto.scalar": "cosmos.AddressString" } }
        ]);
    }
    create(value?: PartialMessage<QueryGroupPolicyInfoRequest>): QueryGroupPolicyInfoRequest {
        const message = { address: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryGroupPolicyInfoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryGroupPolicyInfoRequest): QueryGroupPolicyInfoRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryGroupPolicyInfoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.QueryGroupPolicyInfoRequest
 */
export const QueryGroupPolicyInfoRequest = new QueryGroupPolicyInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryGroupPolicyInfoResponse$Type extends MessageType<QueryGroupPolicyInfoResponse> {
    constructor() {
        super("cosmos.group.v1.QueryGroupPolicyInfoResponse", [
            { no: 1, name: "info", kind: "message", T: () => GroupPolicyInfo }
        ]);
    }
    create(value?: PartialMessage<QueryGroupPolicyInfoResponse>): QueryGroupPolicyInfoResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryGroupPolicyInfoResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryGroupPolicyInfoResponse): QueryGroupPolicyInfoResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.group.v1.GroupPolicyInfo info */ 1:
                    message.info = GroupPolicyInfo.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryGroupPolicyInfoResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.group.v1.GroupPolicyInfo info = 1; */
        if (message.info)
            GroupPolicyInfo.internalBinaryWrite(message.info, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.QueryGroupPolicyInfoResponse
 */
export const QueryGroupPolicyInfoResponse = new QueryGroupPolicyInfoResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryGroupMembersRequest$Type extends MessageType<QueryGroupMembersRequest> {
    constructor() {
        super("cosmos.group.v1.QueryGroupMembersRequest", [
            { no: 1, name: "group_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value?: PartialMessage<QueryGroupMembersRequest>): QueryGroupMembersRequest {
        const message = { groupId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryGroupMembersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryGroupMembersRequest): QueryGroupMembersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 group_id */ 1:
                    message.groupId = reader.uint64().toBigInt();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryGroupMembersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 group_id = 1; */
        if (message.groupId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.groupId);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.QueryGroupMembersRequest
 */
export const QueryGroupMembersRequest = new QueryGroupMembersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryGroupMembersResponse$Type extends MessageType<QueryGroupMembersResponse> {
    constructor() {
        super("cosmos.group.v1.QueryGroupMembersResponse", [
            { no: 1, name: "members", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GroupMember },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value?: PartialMessage<QueryGroupMembersResponse>): QueryGroupMembersResponse {
        const message = { members: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryGroupMembersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryGroupMembersResponse): QueryGroupMembersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.group.v1.GroupMember members */ 1:
                    message.members.push(GroupMember.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryGroupMembersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated cosmos.group.v1.GroupMember members = 1; */
        for (let i = 0; i < message.members.length; i++)
            GroupMember.internalBinaryWrite(message.members[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.QueryGroupMembersResponse
 */
export const QueryGroupMembersResponse = new QueryGroupMembersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryGroupsByAdminRequest$Type extends MessageType<QueryGroupsByAdminRequest> {
    constructor() {
        super("cosmos.group.v1.QueryGroupsByAdminRequest", [
            { no: 1, name: "admin", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "cosmos_proto.scalar": "cosmos.AddressString" } },
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value?: PartialMessage<QueryGroupsByAdminRequest>): QueryGroupsByAdminRequest {
        const message = { admin: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryGroupsByAdminRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryGroupsByAdminRequest): QueryGroupsByAdminRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string admin */ 1:
                    message.admin = reader.string();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryGroupsByAdminRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string admin = 1; */
        if (message.admin !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.admin);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.QueryGroupsByAdminRequest
 */
export const QueryGroupsByAdminRequest = new QueryGroupsByAdminRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryGroupsByAdminResponse$Type extends MessageType<QueryGroupsByAdminResponse> {
    constructor() {
        super("cosmos.group.v1.QueryGroupsByAdminResponse", [
            { no: 1, name: "groups", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GroupInfo },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value?: PartialMessage<QueryGroupsByAdminResponse>): QueryGroupsByAdminResponse {
        const message = { groups: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryGroupsByAdminResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryGroupsByAdminResponse): QueryGroupsByAdminResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.group.v1.GroupInfo groups */ 1:
                    message.groups.push(GroupInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryGroupsByAdminResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated cosmos.group.v1.GroupInfo groups = 1; */
        for (let i = 0; i < message.groups.length; i++)
            GroupInfo.internalBinaryWrite(message.groups[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.QueryGroupsByAdminResponse
 */
export const QueryGroupsByAdminResponse = new QueryGroupsByAdminResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryGroupPoliciesByGroupRequest$Type extends MessageType<QueryGroupPoliciesByGroupRequest> {
    constructor() {
        super("cosmos.group.v1.QueryGroupPoliciesByGroupRequest", [
            { no: 1, name: "group_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value?: PartialMessage<QueryGroupPoliciesByGroupRequest>): QueryGroupPoliciesByGroupRequest {
        const message = { groupId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryGroupPoliciesByGroupRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryGroupPoliciesByGroupRequest): QueryGroupPoliciesByGroupRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 group_id */ 1:
                    message.groupId = reader.uint64().toBigInt();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryGroupPoliciesByGroupRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 group_id = 1; */
        if (message.groupId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.groupId);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.QueryGroupPoliciesByGroupRequest
 */
export const QueryGroupPoliciesByGroupRequest = new QueryGroupPoliciesByGroupRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryGroupPoliciesByGroupResponse$Type extends MessageType<QueryGroupPoliciesByGroupResponse> {
    constructor() {
        super("cosmos.group.v1.QueryGroupPoliciesByGroupResponse", [
            { no: 1, name: "group_policies", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GroupPolicyInfo },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value?: PartialMessage<QueryGroupPoliciesByGroupResponse>): QueryGroupPoliciesByGroupResponse {
        const message = { groupPolicies: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryGroupPoliciesByGroupResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryGroupPoliciesByGroupResponse): QueryGroupPoliciesByGroupResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.group.v1.GroupPolicyInfo group_policies */ 1:
                    message.groupPolicies.push(GroupPolicyInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryGroupPoliciesByGroupResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated cosmos.group.v1.GroupPolicyInfo group_policies = 1; */
        for (let i = 0; i < message.groupPolicies.length; i++)
            GroupPolicyInfo.internalBinaryWrite(message.groupPolicies[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.QueryGroupPoliciesByGroupResponse
 */
export const QueryGroupPoliciesByGroupResponse = new QueryGroupPoliciesByGroupResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryGroupPoliciesByAdminRequest$Type extends MessageType<QueryGroupPoliciesByAdminRequest> {
    constructor() {
        super("cosmos.group.v1.QueryGroupPoliciesByAdminRequest", [
            { no: 1, name: "admin", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "cosmos_proto.scalar": "cosmos.AddressString" } },
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value?: PartialMessage<QueryGroupPoliciesByAdminRequest>): QueryGroupPoliciesByAdminRequest {
        const message = { admin: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryGroupPoliciesByAdminRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryGroupPoliciesByAdminRequest): QueryGroupPoliciesByAdminRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string admin */ 1:
                    message.admin = reader.string();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryGroupPoliciesByAdminRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string admin = 1; */
        if (message.admin !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.admin);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.QueryGroupPoliciesByAdminRequest
 */
export const QueryGroupPoliciesByAdminRequest = new QueryGroupPoliciesByAdminRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryGroupPoliciesByAdminResponse$Type extends MessageType<QueryGroupPoliciesByAdminResponse> {
    constructor() {
        super("cosmos.group.v1.QueryGroupPoliciesByAdminResponse", [
            { no: 1, name: "group_policies", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GroupPolicyInfo },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value?: PartialMessage<QueryGroupPoliciesByAdminResponse>): QueryGroupPoliciesByAdminResponse {
        const message = { groupPolicies: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryGroupPoliciesByAdminResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryGroupPoliciesByAdminResponse): QueryGroupPoliciesByAdminResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.group.v1.GroupPolicyInfo group_policies */ 1:
                    message.groupPolicies.push(GroupPolicyInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryGroupPoliciesByAdminResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated cosmos.group.v1.GroupPolicyInfo group_policies = 1; */
        for (let i = 0; i < message.groupPolicies.length; i++)
            GroupPolicyInfo.internalBinaryWrite(message.groupPolicies[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.QueryGroupPoliciesByAdminResponse
 */
export const QueryGroupPoliciesByAdminResponse = new QueryGroupPoliciesByAdminResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryProposalRequest$Type extends MessageType<QueryProposalRequest> {
    constructor() {
        super("cosmos.group.v1.QueryProposalRequest", [
            { no: 1, name: "proposal_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<QueryProposalRequest>): QueryProposalRequest {
        const message = { proposalId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryProposalRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryProposalRequest): QueryProposalRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 proposal_id */ 1:
                    message.proposalId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryProposalRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 proposal_id = 1; */
        if (message.proposalId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.proposalId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.QueryProposalRequest
 */
export const QueryProposalRequest = new QueryProposalRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryProposalResponse$Type extends MessageType<QueryProposalResponse> {
    constructor() {
        super("cosmos.group.v1.QueryProposalResponse", [
            { no: 1, name: "proposal", kind: "message", T: () => Proposal }
        ]);
    }
    create(value?: PartialMessage<QueryProposalResponse>): QueryProposalResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryProposalResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryProposalResponse): QueryProposalResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.group.v1.Proposal proposal */ 1:
                    message.proposal = Proposal.internalBinaryRead(reader, reader.uint32(), options, message.proposal);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryProposalResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.group.v1.Proposal proposal = 1; */
        if (message.proposal)
            Proposal.internalBinaryWrite(message.proposal, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.QueryProposalResponse
 */
export const QueryProposalResponse = new QueryProposalResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryProposalsByGroupPolicyRequest$Type extends MessageType<QueryProposalsByGroupPolicyRequest> {
    constructor() {
        super("cosmos.group.v1.QueryProposalsByGroupPolicyRequest", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "cosmos_proto.scalar": "cosmos.AddressString" } },
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value?: PartialMessage<QueryProposalsByGroupPolicyRequest>): QueryProposalsByGroupPolicyRequest {
        const message = { address: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryProposalsByGroupPolicyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryProposalsByGroupPolicyRequest): QueryProposalsByGroupPolicyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryProposalsByGroupPolicyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.QueryProposalsByGroupPolicyRequest
 */
export const QueryProposalsByGroupPolicyRequest = new QueryProposalsByGroupPolicyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryProposalsByGroupPolicyResponse$Type extends MessageType<QueryProposalsByGroupPolicyResponse> {
    constructor() {
        super("cosmos.group.v1.QueryProposalsByGroupPolicyResponse", [
            { no: 1, name: "proposals", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Proposal },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value?: PartialMessage<QueryProposalsByGroupPolicyResponse>): QueryProposalsByGroupPolicyResponse {
        const message = { proposals: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryProposalsByGroupPolicyResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryProposalsByGroupPolicyResponse): QueryProposalsByGroupPolicyResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.group.v1.Proposal proposals */ 1:
                    message.proposals.push(Proposal.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryProposalsByGroupPolicyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated cosmos.group.v1.Proposal proposals = 1; */
        for (let i = 0; i < message.proposals.length; i++)
            Proposal.internalBinaryWrite(message.proposals[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.QueryProposalsByGroupPolicyResponse
 */
export const QueryProposalsByGroupPolicyResponse = new QueryProposalsByGroupPolicyResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryVoteByProposalVoterRequest$Type extends MessageType<QueryVoteByProposalVoterRequest> {
    constructor() {
        super("cosmos.group.v1.QueryVoteByProposalVoterRequest", [
            { no: 1, name: "proposal_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "voter", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "cosmos_proto.scalar": "cosmos.AddressString" } }
        ]);
    }
    create(value?: PartialMessage<QueryVoteByProposalVoterRequest>): QueryVoteByProposalVoterRequest {
        const message = { proposalId: 0n, voter: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryVoteByProposalVoterRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryVoteByProposalVoterRequest): QueryVoteByProposalVoterRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 proposal_id */ 1:
                    message.proposalId = reader.uint64().toBigInt();
                    break;
                case /* string voter */ 2:
                    message.voter = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryVoteByProposalVoterRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 proposal_id = 1; */
        if (message.proposalId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.proposalId);
        /* string voter = 2; */
        if (message.voter !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.voter);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.QueryVoteByProposalVoterRequest
 */
export const QueryVoteByProposalVoterRequest = new QueryVoteByProposalVoterRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryVoteByProposalVoterResponse$Type extends MessageType<QueryVoteByProposalVoterResponse> {
    constructor() {
        super("cosmos.group.v1.QueryVoteByProposalVoterResponse", [
            { no: 1, name: "vote", kind: "message", T: () => Vote }
        ]);
    }
    create(value?: PartialMessage<QueryVoteByProposalVoterResponse>): QueryVoteByProposalVoterResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryVoteByProposalVoterResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryVoteByProposalVoterResponse): QueryVoteByProposalVoterResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.group.v1.Vote vote */ 1:
                    message.vote = Vote.internalBinaryRead(reader, reader.uint32(), options, message.vote);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryVoteByProposalVoterResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.group.v1.Vote vote = 1; */
        if (message.vote)
            Vote.internalBinaryWrite(message.vote, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.QueryVoteByProposalVoterResponse
 */
export const QueryVoteByProposalVoterResponse = new QueryVoteByProposalVoterResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryVotesByProposalRequest$Type extends MessageType<QueryVotesByProposalRequest> {
    constructor() {
        super("cosmos.group.v1.QueryVotesByProposalRequest", [
            { no: 1, name: "proposal_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value?: PartialMessage<QueryVotesByProposalRequest>): QueryVotesByProposalRequest {
        const message = { proposalId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryVotesByProposalRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryVotesByProposalRequest): QueryVotesByProposalRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 proposal_id */ 1:
                    message.proposalId = reader.uint64().toBigInt();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryVotesByProposalRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 proposal_id = 1; */
        if (message.proposalId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.proposalId);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.QueryVotesByProposalRequest
 */
export const QueryVotesByProposalRequest = new QueryVotesByProposalRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryVotesByProposalResponse$Type extends MessageType<QueryVotesByProposalResponse> {
    constructor() {
        super("cosmos.group.v1.QueryVotesByProposalResponse", [
            { no: 1, name: "votes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Vote },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value?: PartialMessage<QueryVotesByProposalResponse>): QueryVotesByProposalResponse {
        const message = { votes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryVotesByProposalResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryVotesByProposalResponse): QueryVotesByProposalResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.group.v1.Vote votes */ 1:
                    message.votes.push(Vote.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryVotesByProposalResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated cosmos.group.v1.Vote votes = 1; */
        for (let i = 0; i < message.votes.length; i++)
            Vote.internalBinaryWrite(message.votes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.QueryVotesByProposalResponse
 */
export const QueryVotesByProposalResponse = new QueryVotesByProposalResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryVotesByVoterRequest$Type extends MessageType<QueryVotesByVoterRequest> {
    constructor() {
        super("cosmos.group.v1.QueryVotesByVoterRequest", [
            { no: 1, name: "voter", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "cosmos_proto.scalar": "cosmos.AddressString" } },
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value?: PartialMessage<QueryVotesByVoterRequest>): QueryVotesByVoterRequest {
        const message = { voter: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryVotesByVoterRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryVotesByVoterRequest): QueryVotesByVoterRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string voter */ 1:
                    message.voter = reader.string();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryVotesByVoterRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string voter = 1; */
        if (message.voter !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.voter);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.QueryVotesByVoterRequest
 */
export const QueryVotesByVoterRequest = new QueryVotesByVoterRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryVotesByVoterResponse$Type extends MessageType<QueryVotesByVoterResponse> {
    constructor() {
        super("cosmos.group.v1.QueryVotesByVoterResponse", [
            { no: 1, name: "votes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Vote },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value?: PartialMessage<QueryVotesByVoterResponse>): QueryVotesByVoterResponse {
        const message = { votes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryVotesByVoterResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryVotesByVoterResponse): QueryVotesByVoterResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.group.v1.Vote votes */ 1:
                    message.votes.push(Vote.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryVotesByVoterResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated cosmos.group.v1.Vote votes = 1; */
        for (let i = 0; i < message.votes.length; i++)
            Vote.internalBinaryWrite(message.votes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.QueryVotesByVoterResponse
 */
export const QueryVotesByVoterResponse = new QueryVotesByVoterResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryGroupsByMemberRequest$Type extends MessageType<QueryGroupsByMemberRequest> {
    constructor() {
        super("cosmos.group.v1.QueryGroupsByMemberRequest", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "cosmos_proto.scalar": "cosmos.AddressString" } },
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value?: PartialMessage<QueryGroupsByMemberRequest>): QueryGroupsByMemberRequest {
        const message = { address: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryGroupsByMemberRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryGroupsByMemberRequest): QueryGroupsByMemberRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryGroupsByMemberRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.QueryGroupsByMemberRequest
 */
export const QueryGroupsByMemberRequest = new QueryGroupsByMemberRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryGroupsByMemberResponse$Type extends MessageType<QueryGroupsByMemberResponse> {
    constructor() {
        super("cosmos.group.v1.QueryGroupsByMemberResponse", [
            { no: 1, name: "groups", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GroupInfo },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value?: PartialMessage<QueryGroupsByMemberResponse>): QueryGroupsByMemberResponse {
        const message = { groups: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryGroupsByMemberResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryGroupsByMemberResponse): QueryGroupsByMemberResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.group.v1.GroupInfo groups */ 1:
                    message.groups.push(GroupInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryGroupsByMemberResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated cosmos.group.v1.GroupInfo groups = 1; */
        for (let i = 0; i < message.groups.length; i++)
            GroupInfo.internalBinaryWrite(message.groups[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.QueryGroupsByMemberResponse
 */
export const QueryGroupsByMemberResponse = new QueryGroupsByMemberResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryTallyResultRequest$Type extends MessageType<QueryTallyResultRequest> {
    constructor() {
        super("cosmos.group.v1.QueryTallyResultRequest", [
            { no: 1, name: "proposal_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<QueryTallyResultRequest>): QueryTallyResultRequest {
        const message = { proposalId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryTallyResultRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryTallyResultRequest): QueryTallyResultRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 proposal_id */ 1:
                    message.proposalId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryTallyResultRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 proposal_id = 1; */
        if (message.proposalId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.proposalId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.QueryTallyResultRequest
 */
export const QueryTallyResultRequest = new QueryTallyResultRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryTallyResultResponse$Type extends MessageType<QueryTallyResultResponse> {
    constructor() {
        super("cosmos.group.v1.QueryTallyResultResponse", [
            { no: 1, name: "tally", kind: "message", T: () => TallyResult, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<QueryTallyResultResponse>): QueryTallyResultResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryTallyResultResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryTallyResultResponse): QueryTallyResultResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.group.v1.TallyResult tally */ 1:
                    message.tally = TallyResult.internalBinaryRead(reader, reader.uint32(), options, message.tally);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryTallyResultResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.group.v1.TallyResult tally = 1; */
        if (message.tally)
            TallyResult.internalBinaryWrite(message.tally, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.QueryTallyResultResponse
 */
export const QueryTallyResultResponse = new QueryTallyResultResponse$Type();
/**
 * @generated ServiceType for protobuf service cosmos.group.v1.Query
 */
export const Query = new ServiceType("cosmos.group.v1.Query", [
    { name: "GroupInfo", options: { "google.api.http": { get: "/cosmos/group/v1/group_info/{group_id}" } }, I: QueryGroupInfoRequest, O: QueryGroupInfoResponse },
    { name: "GroupPolicyInfo", options: { "google.api.http": { get: "/cosmos/group/v1/group_policy_info/{address}" } }, I: QueryGroupPolicyInfoRequest, O: QueryGroupPolicyInfoResponse },
    { name: "GroupMembers", options: { "google.api.http": { get: "/cosmos/group/v1/group_members/{group_id}" } }, I: QueryGroupMembersRequest, O: QueryGroupMembersResponse },
    { name: "GroupsByAdmin", options: { "google.api.http": { get: "/cosmos/group/v1/groups_by_admin/{admin}" } }, I: QueryGroupsByAdminRequest, O: QueryGroupsByAdminResponse },
    { name: "GroupPoliciesByGroup", options: { "google.api.http": { get: "/cosmos/group/v1/group_policies_by_group/{group_id}" } }, I: QueryGroupPoliciesByGroupRequest, O: QueryGroupPoliciesByGroupResponse },
    { name: "GroupPoliciesByAdmin", options: { "google.api.http": { get: "/cosmos/group/v1/group_policies_by_admin/{admin}" } }, I: QueryGroupPoliciesByAdminRequest, O: QueryGroupPoliciesByAdminResponse },
    { name: "Proposal", options: { "google.api.http": { get: "/cosmos/group/v1/proposal/{proposal_id}" } }, I: QueryProposalRequest, O: QueryProposalResponse },
    { name: "ProposalsByGroupPolicy", options: { "google.api.http": { get: "/cosmos/group/v1/proposals_by_group_policy/{address}" } }, I: QueryProposalsByGroupPolicyRequest, O: QueryProposalsByGroupPolicyResponse },
    { name: "VoteByProposalVoter", options: { "google.api.http": { get: "/cosmos/group/v1/vote_by_proposal_voter/{proposal_id}/{voter}" } }, I: QueryVoteByProposalVoterRequest, O: QueryVoteByProposalVoterResponse },
    { name: "VotesByProposal", options: { "google.api.http": { get: "/cosmos/group/v1/votes_by_proposal/{proposal_id}" } }, I: QueryVotesByProposalRequest, O: QueryVotesByProposalResponse },
    { name: "VotesByVoter", options: { "google.api.http": { get: "/cosmos/group/v1/votes_by_voter/{voter}" } }, I: QueryVotesByVoterRequest, O: QueryVotesByVoterResponse },
    { name: "GroupsByMember", options: { "google.api.http": { get: "/cosmos/group/v1/groups_by_member/{address}" } }, I: QueryGroupsByMemberRequest, O: QueryGroupsByMemberResponse },
    { name: "TallyResult", options: { "google.api.http": { get: "/cosmos/group/v1/proposals/{proposal_id}/tally" } }, I: QueryTallyResultRequest, O: QueryTallyResultResponse }
]);
