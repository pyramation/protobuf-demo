// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "cosmos/group/v1/query.proto" (package "cosmos.group.v1", syntax proto3),// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Query } from "./query";
import type { QueryTallyResultResponse } from "./query";
import type { QueryTallyResultRequest } from "./query";
import type { QueryGroupsByMemberResponse } from "./query";
import type { QueryGroupsByMemberRequest } from "./query";
import type { QueryVotesByVoterResponse } from "./query";
import type { QueryVotesByVoterRequest } from "./query";
import type { QueryVotesByProposalResponse } from "./query";
import type { QueryVotesByProposalRequest } from "./query";
import type { QueryVoteByProposalVoterResponse } from "./query";
import type { QueryVoteByProposalVoterRequest } from "./query";
import type { QueryProposalsByGroupPolicyResponse } from "./query";
import type { QueryProposalsByGroupPolicyRequest } from "./query";
import type { QueryProposalResponse } from "./query";
import type { QueryProposalRequest } from "./query";
import type { QueryGroupPoliciesByAdminResponse } from "./query";
import type { QueryGroupPoliciesByAdminRequest } from "./query";
import type { QueryGroupPoliciesByGroupResponse } from "./query";
import type { QueryGroupPoliciesByGroupRequest } from "./query";
import type { QueryGroupsByAdminResponse } from "./query";
import type { QueryGroupsByAdminRequest } from "./query";
import type { QueryGroupMembersResponse } from "./query";
import type { QueryGroupMembersRequest } from "./query";
import type { QueryGroupPolicyInfoResponse } from "./query";
import type { QueryGroupPolicyInfoRequest } from "./query";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { QueryGroupInfoResponse } from "./query";
import type { QueryGroupInfoRequest } from "./query";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Query is the cosmos.group.v1 Query service.
 *
 * @generated from protobuf service cosmos.group.v1.Query
 */
export interface IQueryClient {
    /**
     * GroupInfo queries group info based on group id.
     *
     * @generated from protobuf rpc: GroupInfo(cosmos.group.v1.QueryGroupInfoRequest) returns (cosmos.group.v1.QueryGroupInfoResponse);
     */
    groupInfo(input: QueryGroupInfoRequest, options?: RpcOptions): UnaryCall<QueryGroupInfoRequest, QueryGroupInfoResponse>;
    /**
     * GroupPolicyInfo queries group policy info based on account address of group policy.
     *
     * @generated from protobuf rpc: GroupPolicyInfo(cosmos.group.v1.QueryGroupPolicyInfoRequest) returns (cosmos.group.v1.QueryGroupPolicyInfoResponse);
     */
    groupPolicyInfo(input: QueryGroupPolicyInfoRequest, options?: RpcOptions): UnaryCall<QueryGroupPolicyInfoRequest, QueryGroupPolicyInfoResponse>;
    /**
     * GroupMembers queries members of a group
     *
     * @generated from protobuf rpc: GroupMembers(cosmos.group.v1.QueryGroupMembersRequest) returns (cosmos.group.v1.QueryGroupMembersResponse);
     */
    groupMembers(input: QueryGroupMembersRequest, options?: RpcOptions): UnaryCall<QueryGroupMembersRequest, QueryGroupMembersResponse>;
    /**
     * GroupsByAdmin queries groups by admin address.
     *
     * @generated from protobuf rpc: GroupsByAdmin(cosmos.group.v1.QueryGroupsByAdminRequest) returns (cosmos.group.v1.QueryGroupsByAdminResponse);
     */
    groupsByAdmin(input: QueryGroupsByAdminRequest, options?: RpcOptions): UnaryCall<QueryGroupsByAdminRequest, QueryGroupsByAdminResponse>;
    /**
     * GroupPoliciesByGroup queries group policies by group id.
     *
     * @generated from protobuf rpc: GroupPoliciesByGroup(cosmos.group.v1.QueryGroupPoliciesByGroupRequest) returns (cosmos.group.v1.QueryGroupPoliciesByGroupResponse);
     */
    groupPoliciesByGroup(input: QueryGroupPoliciesByGroupRequest, options?: RpcOptions): UnaryCall<QueryGroupPoliciesByGroupRequest, QueryGroupPoliciesByGroupResponse>;
    /**
     * GroupsByAdmin queries group policies by admin address.
     *
     * @generated from protobuf rpc: GroupPoliciesByAdmin(cosmos.group.v1.QueryGroupPoliciesByAdminRequest) returns (cosmos.group.v1.QueryGroupPoliciesByAdminResponse);
     */
    groupPoliciesByAdmin(input: QueryGroupPoliciesByAdminRequest, options?: RpcOptions): UnaryCall<QueryGroupPoliciesByAdminRequest, QueryGroupPoliciesByAdminResponse>;
    /**
     * Proposal queries a proposal based on proposal id.
     *
     * @generated from protobuf rpc: Proposal(cosmos.group.v1.QueryProposalRequest) returns (cosmos.group.v1.QueryProposalResponse);
     */
    proposal(input: QueryProposalRequest, options?: RpcOptions): UnaryCall<QueryProposalRequest, QueryProposalResponse>;
    /**
     * ProposalsByGroupPolicy queries proposals based on account address of group policy.
     *
     * @generated from protobuf rpc: ProposalsByGroupPolicy(cosmos.group.v1.QueryProposalsByGroupPolicyRequest) returns (cosmos.group.v1.QueryProposalsByGroupPolicyResponse);
     */
    proposalsByGroupPolicy(input: QueryProposalsByGroupPolicyRequest, options?: RpcOptions): UnaryCall<QueryProposalsByGroupPolicyRequest, QueryProposalsByGroupPolicyResponse>;
    /**
     * VoteByProposalVoter queries a vote by proposal id and voter.
     *
     * @generated from protobuf rpc: VoteByProposalVoter(cosmos.group.v1.QueryVoteByProposalVoterRequest) returns (cosmos.group.v1.QueryVoteByProposalVoterResponse);
     */
    voteByProposalVoter(input: QueryVoteByProposalVoterRequest, options?: RpcOptions): UnaryCall<QueryVoteByProposalVoterRequest, QueryVoteByProposalVoterResponse>;
    /**
     * VotesByProposal queries a vote by proposal.
     *
     * @generated from protobuf rpc: VotesByProposal(cosmos.group.v1.QueryVotesByProposalRequest) returns (cosmos.group.v1.QueryVotesByProposalResponse);
     */
    votesByProposal(input: QueryVotesByProposalRequest, options?: RpcOptions): UnaryCall<QueryVotesByProposalRequest, QueryVotesByProposalResponse>;
    /**
     * VotesByVoter queries a vote by voter.
     *
     * @generated from protobuf rpc: VotesByVoter(cosmos.group.v1.QueryVotesByVoterRequest) returns (cosmos.group.v1.QueryVotesByVoterResponse);
     */
    votesByVoter(input: QueryVotesByVoterRequest, options?: RpcOptions): UnaryCall<QueryVotesByVoterRequest, QueryVotesByVoterResponse>;
    /**
     * GroupsByMember queries groups by member address.
     *
     * @generated from protobuf rpc: GroupsByMember(cosmos.group.v1.QueryGroupsByMemberRequest) returns (cosmos.group.v1.QueryGroupsByMemberResponse);
     */
    groupsByMember(input: QueryGroupsByMemberRequest, options?: RpcOptions): UnaryCall<QueryGroupsByMemberRequest, QueryGroupsByMemberResponse>;
    /**
     * TallyResult queries the tally of a proposal votes.
     *
     * @generated from protobuf rpc: TallyResult(cosmos.group.v1.QueryTallyResultRequest) returns (cosmos.group.v1.QueryTallyResultResponse);
     */
    tallyResult(input: QueryTallyResultRequest, options?: RpcOptions): UnaryCall<QueryTallyResultRequest, QueryTallyResultResponse>;
}
/**
 * Query is the cosmos.group.v1 Query service.
 *
 * @generated from protobuf service cosmos.group.v1.Query
 */
export class QueryClient implements IQueryClient, ServiceInfo {
    typeName = Query.typeName;
    methods = Query.methods;
    options = Query.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * GroupInfo queries group info based on group id.
     *
     * @generated from protobuf rpc: GroupInfo(cosmos.group.v1.QueryGroupInfoRequest) returns (cosmos.group.v1.QueryGroupInfoResponse);
     */
    groupInfo(input: QueryGroupInfoRequest, options?: RpcOptions): UnaryCall<QueryGroupInfoRequest, QueryGroupInfoResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryGroupInfoRequest, QueryGroupInfoResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GroupPolicyInfo queries group policy info based on account address of group policy.
     *
     * @generated from protobuf rpc: GroupPolicyInfo(cosmos.group.v1.QueryGroupPolicyInfoRequest) returns (cosmos.group.v1.QueryGroupPolicyInfoResponse);
     */
    groupPolicyInfo(input: QueryGroupPolicyInfoRequest, options?: RpcOptions): UnaryCall<QueryGroupPolicyInfoRequest, QueryGroupPolicyInfoResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryGroupPolicyInfoRequest, QueryGroupPolicyInfoResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GroupMembers queries members of a group
     *
     * @generated from protobuf rpc: GroupMembers(cosmos.group.v1.QueryGroupMembersRequest) returns (cosmos.group.v1.QueryGroupMembersResponse);
     */
    groupMembers(input: QueryGroupMembersRequest, options?: RpcOptions): UnaryCall<QueryGroupMembersRequest, QueryGroupMembersResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryGroupMembersRequest, QueryGroupMembersResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GroupsByAdmin queries groups by admin address.
     *
     * @generated from protobuf rpc: GroupsByAdmin(cosmos.group.v1.QueryGroupsByAdminRequest) returns (cosmos.group.v1.QueryGroupsByAdminResponse);
     */
    groupsByAdmin(input: QueryGroupsByAdminRequest, options?: RpcOptions): UnaryCall<QueryGroupsByAdminRequest, QueryGroupsByAdminResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryGroupsByAdminRequest, QueryGroupsByAdminResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GroupPoliciesByGroup queries group policies by group id.
     *
     * @generated from protobuf rpc: GroupPoliciesByGroup(cosmos.group.v1.QueryGroupPoliciesByGroupRequest) returns (cosmos.group.v1.QueryGroupPoliciesByGroupResponse);
     */
    groupPoliciesByGroup(input: QueryGroupPoliciesByGroupRequest, options?: RpcOptions): UnaryCall<QueryGroupPoliciesByGroupRequest, QueryGroupPoliciesByGroupResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryGroupPoliciesByGroupRequest, QueryGroupPoliciesByGroupResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GroupsByAdmin queries group policies by admin address.
     *
     * @generated from protobuf rpc: GroupPoliciesByAdmin(cosmos.group.v1.QueryGroupPoliciesByAdminRequest) returns (cosmos.group.v1.QueryGroupPoliciesByAdminResponse);
     */
    groupPoliciesByAdmin(input: QueryGroupPoliciesByAdminRequest, options?: RpcOptions): UnaryCall<QueryGroupPoliciesByAdminRequest, QueryGroupPoliciesByAdminResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryGroupPoliciesByAdminRequest, QueryGroupPoliciesByAdminResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Proposal queries a proposal based on proposal id.
     *
     * @generated from protobuf rpc: Proposal(cosmos.group.v1.QueryProposalRequest) returns (cosmos.group.v1.QueryProposalResponse);
     */
    proposal(input: QueryProposalRequest, options?: RpcOptions): UnaryCall<QueryProposalRequest, QueryProposalResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryProposalRequest, QueryProposalResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ProposalsByGroupPolicy queries proposals based on account address of group policy.
     *
     * @generated from protobuf rpc: ProposalsByGroupPolicy(cosmos.group.v1.QueryProposalsByGroupPolicyRequest) returns (cosmos.group.v1.QueryProposalsByGroupPolicyResponse);
     */
    proposalsByGroupPolicy(input: QueryProposalsByGroupPolicyRequest, options?: RpcOptions): UnaryCall<QueryProposalsByGroupPolicyRequest, QueryProposalsByGroupPolicyResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryProposalsByGroupPolicyRequest, QueryProposalsByGroupPolicyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * VoteByProposalVoter queries a vote by proposal id and voter.
     *
     * @generated from protobuf rpc: VoteByProposalVoter(cosmos.group.v1.QueryVoteByProposalVoterRequest) returns (cosmos.group.v1.QueryVoteByProposalVoterResponse);
     */
    voteByProposalVoter(input: QueryVoteByProposalVoterRequest, options?: RpcOptions): UnaryCall<QueryVoteByProposalVoterRequest, QueryVoteByProposalVoterResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryVoteByProposalVoterRequest, QueryVoteByProposalVoterResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * VotesByProposal queries a vote by proposal.
     *
     * @generated from protobuf rpc: VotesByProposal(cosmos.group.v1.QueryVotesByProposalRequest) returns (cosmos.group.v1.QueryVotesByProposalResponse);
     */
    votesByProposal(input: QueryVotesByProposalRequest, options?: RpcOptions): UnaryCall<QueryVotesByProposalRequest, QueryVotesByProposalResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryVotesByProposalRequest, QueryVotesByProposalResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * VotesByVoter queries a vote by voter.
     *
     * @generated from protobuf rpc: VotesByVoter(cosmos.group.v1.QueryVotesByVoterRequest) returns (cosmos.group.v1.QueryVotesByVoterResponse);
     */
    votesByVoter(input: QueryVotesByVoterRequest, options?: RpcOptions): UnaryCall<QueryVotesByVoterRequest, QueryVotesByVoterResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryVotesByVoterRequest, QueryVotesByVoterResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * GroupsByMember queries groups by member address.
     *
     * @generated from protobuf rpc: GroupsByMember(cosmos.group.v1.QueryGroupsByMemberRequest) returns (cosmos.group.v1.QueryGroupsByMemberResponse);
     */
    groupsByMember(input: QueryGroupsByMemberRequest, options?: RpcOptions): UnaryCall<QueryGroupsByMemberRequest, QueryGroupsByMemberResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryGroupsByMemberRequest, QueryGroupsByMemberResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * TallyResult queries the tally of a proposal votes.
     *
     * @generated from protobuf rpc: TallyResult(cosmos.group.v1.QueryTallyResultRequest) returns (cosmos.group.v1.QueryTallyResultResponse);
     */
    tallyResult(input: QueryTallyResultRequest, options?: RpcOptions): UnaryCall<QueryTallyResultRequest, QueryTallyResultResponse> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryTallyResultRequest, QueryTallyResultResponse>("unary", this._transport, method, opt, input);
    }
}
