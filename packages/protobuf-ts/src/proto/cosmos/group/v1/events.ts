// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "cosmos/group/v1/events.proto" (package "cosmos.group.v1", syntax proto3),// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ProposalExecutorResult } from "./types";
/**
 * EventCreateGroup is an event emitted when a group is created.
 *
 * @generated from protobuf message cosmos.group.v1.EventCreateGroup
 */
export interface EventCreateGroup {
    /**
     * group_id is the unique ID of the group.
     *
     * @generated from protobuf field: uint64 group_id = 1;
     */
    groupId: bigint;
}
/**
 * EventUpdateGroup is an event emitted when a group is updated.
 *
 * @generated from protobuf message cosmos.group.v1.EventUpdateGroup
 */
export interface EventUpdateGroup {
    /**
     * group_id is the unique ID of the group.
     *
     * @generated from protobuf field: uint64 group_id = 1;
     */
    groupId: bigint;
}
/**
 * EventCreateGroupPolicy is an event emitted when a group policy is created.
 *
 * @generated from protobuf message cosmos.group.v1.EventCreateGroupPolicy
 */
export interface EventCreateGroupPolicy {
    /**
     * address is the account address of the group policy.
     *
     * @generated from protobuf field: string address = 1;
     */
    address: string;
}
/**
 * EventUpdateGroupPolicy is an event emitted when a group policy is updated.
 *
 * @generated from protobuf message cosmos.group.v1.EventUpdateGroupPolicy
 */
export interface EventUpdateGroupPolicy {
    /**
     * address is the account address of the group policy.
     *
     * @generated from protobuf field: string address = 1;
     */
    address: string;
}
/**
 * EventSubmitProposal is an event emitted when a proposal is created.
 *
 * @generated from protobuf message cosmos.group.v1.EventSubmitProposal
 */
export interface EventSubmitProposal {
    /**
     * proposal_id is the unique ID of the proposal.
     *
     * @generated from protobuf field: uint64 proposal_id = 1;
     */
    proposalId: bigint;
}
/**
 * EventWithdrawProposal is an event emitted when a proposal is withdrawn.
 *
 * @generated from protobuf message cosmos.group.v1.EventWithdrawProposal
 */
export interface EventWithdrawProposal {
    /**
     * proposal_id is the unique ID of the proposal.
     *
     * @generated from protobuf field: uint64 proposal_id = 1;
     */
    proposalId: bigint;
}
/**
 * EventVote is an event emitted when a voter votes on a proposal.
 *
 * @generated from protobuf message cosmos.group.v1.EventVote
 */
export interface EventVote {
    /**
     * proposal_id is the unique ID of the proposal.
     *
     * @generated from protobuf field: uint64 proposal_id = 1;
     */
    proposalId: bigint;
}
/**
 * EventExec is an event emitted when a proposal is executed.
 *
 * @generated from protobuf message cosmos.group.v1.EventExec
 */
export interface EventExec {
    /**
     * proposal_id is the unique ID of the proposal.
     *
     * @generated from protobuf field: uint64 proposal_id = 1;
     */
    proposalId: bigint;
    /**
     * result is the proposal execution result.
     *
     * @generated from protobuf field: cosmos.group.v1.ProposalExecutorResult result = 2;
     */
    result: ProposalExecutorResult;
}
/**
 * EventLeaveGroup is an event emitted when group member leaves the group.
 *
 * @generated from protobuf message cosmos.group.v1.EventLeaveGroup
 */
export interface EventLeaveGroup {
    /**
     * group_id is the unique ID of the group.
     *
     * @generated from protobuf field: uint64 group_id = 1;
     */
    groupId: bigint;
    /**
     * address is the account address of the group member.
     *
     * @generated from protobuf field: string address = 2;
     */
    address: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class EventCreateGroup$Type extends MessageType<EventCreateGroup> {
    constructor() {
        super("cosmos.group.v1.EventCreateGroup", [
            { no: 1, name: "group_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<EventCreateGroup>): EventCreateGroup {
        const message = { groupId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EventCreateGroup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventCreateGroup): EventCreateGroup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 group_id */ 1:
                    message.groupId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EventCreateGroup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 group_id = 1; */
        if (message.groupId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.groupId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.EventCreateGroup
 */
export const EventCreateGroup = new EventCreateGroup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventUpdateGroup$Type extends MessageType<EventUpdateGroup> {
    constructor() {
        super("cosmos.group.v1.EventUpdateGroup", [
            { no: 1, name: "group_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<EventUpdateGroup>): EventUpdateGroup {
        const message = { groupId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EventUpdateGroup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventUpdateGroup): EventUpdateGroup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 group_id */ 1:
                    message.groupId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EventUpdateGroup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 group_id = 1; */
        if (message.groupId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.groupId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.EventUpdateGroup
 */
export const EventUpdateGroup = new EventUpdateGroup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventCreateGroupPolicy$Type extends MessageType<EventCreateGroupPolicy> {
    constructor() {
        super("cosmos.group.v1.EventCreateGroupPolicy", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "cosmos_proto.scalar": "cosmos.AddressString" } }
        ]);
    }
    create(value?: PartialMessage<EventCreateGroupPolicy>): EventCreateGroupPolicy {
        const message = { address: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EventCreateGroupPolicy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventCreateGroupPolicy): EventCreateGroupPolicy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EventCreateGroupPolicy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.EventCreateGroupPolicy
 */
export const EventCreateGroupPolicy = new EventCreateGroupPolicy$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventUpdateGroupPolicy$Type extends MessageType<EventUpdateGroupPolicy> {
    constructor() {
        super("cosmos.group.v1.EventUpdateGroupPolicy", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "cosmos_proto.scalar": "cosmos.AddressString" } }
        ]);
    }
    create(value?: PartialMessage<EventUpdateGroupPolicy>): EventUpdateGroupPolicy {
        const message = { address: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EventUpdateGroupPolicy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventUpdateGroupPolicy): EventUpdateGroupPolicy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EventUpdateGroupPolicy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.EventUpdateGroupPolicy
 */
export const EventUpdateGroupPolicy = new EventUpdateGroupPolicy$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventSubmitProposal$Type extends MessageType<EventSubmitProposal> {
    constructor() {
        super("cosmos.group.v1.EventSubmitProposal", [
            { no: 1, name: "proposal_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<EventSubmitProposal>): EventSubmitProposal {
        const message = { proposalId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EventSubmitProposal>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventSubmitProposal): EventSubmitProposal {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 proposal_id */ 1:
                    message.proposalId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EventSubmitProposal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 proposal_id = 1; */
        if (message.proposalId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.proposalId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.EventSubmitProposal
 */
export const EventSubmitProposal = new EventSubmitProposal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventWithdrawProposal$Type extends MessageType<EventWithdrawProposal> {
    constructor() {
        super("cosmos.group.v1.EventWithdrawProposal", [
            { no: 1, name: "proposal_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<EventWithdrawProposal>): EventWithdrawProposal {
        const message = { proposalId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EventWithdrawProposal>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventWithdrawProposal): EventWithdrawProposal {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 proposal_id */ 1:
                    message.proposalId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EventWithdrawProposal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 proposal_id = 1; */
        if (message.proposalId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.proposalId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.EventWithdrawProposal
 */
export const EventWithdrawProposal = new EventWithdrawProposal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventVote$Type extends MessageType<EventVote> {
    constructor() {
        super("cosmos.group.v1.EventVote", [
            { no: 1, name: "proposal_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<EventVote>): EventVote {
        const message = { proposalId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EventVote>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventVote): EventVote {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 proposal_id */ 1:
                    message.proposalId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EventVote, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 proposal_id = 1; */
        if (message.proposalId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.proposalId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.EventVote
 */
export const EventVote = new EventVote$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventExec$Type extends MessageType<EventExec> {
    constructor() {
        super("cosmos.group.v1.EventExec", [
            { no: 1, name: "proposal_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "result", kind: "enum", T: () => ["cosmos.group.v1.ProposalExecutorResult", ProposalExecutorResult, "PROPOSAL_EXECUTOR_RESULT_"] }
        ]);
    }
    create(value?: PartialMessage<EventExec>): EventExec {
        const message = { proposalId: 0n, result: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EventExec>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventExec): EventExec {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 proposal_id */ 1:
                    message.proposalId = reader.uint64().toBigInt();
                    break;
                case /* cosmos.group.v1.ProposalExecutorResult result */ 2:
                    message.result = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EventExec, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 proposal_id = 1; */
        if (message.proposalId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.proposalId);
        /* cosmos.group.v1.ProposalExecutorResult result = 2; */
        if (message.result !== 0)
            writer.tag(2, WireType.Varint).int32(message.result);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.EventExec
 */
export const EventExec = new EventExec$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventLeaveGroup$Type extends MessageType<EventLeaveGroup> {
    constructor() {
        super("cosmos.group.v1.EventLeaveGroup", [
            { no: 1, name: "group_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "cosmos_proto.scalar": "cosmos.AddressString" } }
        ]);
    }
    create(value?: PartialMessage<EventLeaveGroup>): EventLeaveGroup {
        const message = { groupId: 0n, address: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EventLeaveGroup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventLeaveGroup): EventLeaveGroup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 group_id */ 1:
                    message.groupId = reader.uint64().toBigInt();
                    break;
                case /* string address */ 2:
                    message.address = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EventLeaveGroup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 group_id = 1; */
        if (message.groupId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.groupId);
        /* string address = 2; */
        if (message.address !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.address);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.EventLeaveGroup
 */
export const EventLeaveGroup = new EventLeaveGroup$Type();
