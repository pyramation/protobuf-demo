// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "cosmos/group/v1/types.proto" (package "cosmos.group.v1", syntax proto3),// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../../../google/protobuf/any";
import { Duration } from "../../../google/protobuf/duration";
import { Timestamp } from "../../../google/protobuf/timestamp";
/**
 * Member represents a group member with an account address,
 * non-zero weight and metadata.
 *
 * @generated from protobuf message cosmos.group.v1.Member
 */
export interface Member {
    /**
     * address is the member's account address.
     *
     * @generated from protobuf field: string address = 1;
     */
    address: string;
    /**
     * weight is the member's voting weight that should be greater than 0.
     *
     * @generated from protobuf field: string weight = 2;
     */
    weight: string;
    /**
     * metadata is any arbitrary metadata to attached to the member.
     *
     * @generated from protobuf field: string metadata = 3;
     */
    metadata: string;
    /**
     * added_at is a timestamp specifying when a member was added.
     *
     * @generated from protobuf field: google.protobuf.Timestamp added_at = 4;
     */
    addedAt?: Timestamp;
}
/**
 * Members defines a repeated slice of Member objects.
 *
 * @generated from protobuf message cosmos.group.v1.Members
 */
export interface Members {
    /**
     * members is the list of members.
     *
     * @generated from protobuf field: repeated cosmos.group.v1.Member members = 1;
     */
    members: Member[];
}
/**
 * ThresholdDecisionPolicy implements the DecisionPolicy interface
 *
 * @generated from protobuf message cosmos.group.v1.ThresholdDecisionPolicy
 */
export interface ThresholdDecisionPolicy {
    /**
     * threshold is the minimum weighted sum of yes votes that must be met or exceeded for a proposal to succeed.
     *
     * @generated from protobuf field: string threshold = 1;
     */
    threshold: string;
    /**
     * windows defines the different windows for voting and execution.
     *
     * @generated from protobuf field: cosmos.group.v1.DecisionPolicyWindows windows = 2;
     */
    windows?: DecisionPolicyWindows;
}
/**
 * PercentageDecisionPolicy implements the DecisionPolicy interface
 *
 * @generated from protobuf message cosmos.group.v1.PercentageDecisionPolicy
 */
export interface PercentageDecisionPolicy {
    /**
     * percentage is the minimum percentage the weighted sum of yes votes must meet for a proposal to succeed.
     *
     * @generated from protobuf field: string percentage = 1;
     */
    percentage: string;
    /**
     * windows defines the different windows for voting and execution.
     *
     * @generated from protobuf field: cosmos.group.v1.DecisionPolicyWindows windows = 2;
     */
    windows?: DecisionPolicyWindows;
}
/**
 * DecisionPolicyWindows defines the different windows for voting and execution.
 *
 * @generated from protobuf message cosmos.group.v1.DecisionPolicyWindows
 */
export interface DecisionPolicyWindows {
    /**
     * voting_period is the duration from submission of a proposal to the end of voting period
     * Within this times votes can be submitted with MsgVote.
     *
     * @generated from protobuf field: google.protobuf.Duration voting_period = 1;
     */
    votingPeriod?: Duration;
    /**
     * min_execution_period is the minimum duration after the proposal submission
     * where members can start sending MsgExec. This means that the window for
     * sending a MsgExec transaction is:
     * `[ submission + min_execution_period ; submission + voting_period + max_execution_period]`
     * where max_execution_period is a app-specific config, defined in the keeper.
     * If not set, min_execution_period will default to 0.
     *
     * Please make sure to set a `min_execution_period` that is smaller than
     * `voting_period + max_execution_period`, or else the above execution window
     * is empty, meaning that all proposals created with this decision policy
     * won't be able to be executed.
     *
     * @generated from protobuf field: google.protobuf.Duration min_execution_period = 2;
     */
    minExecutionPeriod?: Duration;
}
// 
// State
// 

/**
 * GroupInfo represents the high-level on-chain information for a group.
 *
 * @generated from protobuf message cosmos.group.v1.GroupInfo
 */
export interface GroupInfo {
    /**
     * id is the unique ID of the group.
     *
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
    /**
     * admin is the account address of the group's admin.
     *
     * @generated from protobuf field: string admin = 2;
     */
    admin: string;
    /**
     * metadata is any arbitrary metadata to attached to the group.
     *
     * @generated from protobuf field: string metadata = 3;
     */
    metadata: string;
    /**
     * version is used to track changes to a group's membership structure that
     * would break existing proposals. Whenever any members weight is changed,
     * or any member is added or removed this version is incremented and will
     * cause proposals based on older versions of this group to fail
     *
     * @generated from protobuf field: uint64 version = 4;
     */
    version: bigint;
    /**
     * total_weight is the sum of the group members' weights.
     *
     * @generated from protobuf field: string total_weight = 5;
     */
    totalWeight: string;
    /**
     * created_at is a timestamp specifying when a group was created.
     *
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 6;
     */
    createdAt?: Timestamp;
}
/**
 * GroupMember represents the relationship between a group and a member.
 *
 * @generated from protobuf message cosmos.group.v1.GroupMember
 */
export interface GroupMember {
    /**
     * group_id is the unique ID of the group.
     *
     * @generated from protobuf field: uint64 group_id = 1;
     */
    groupId: bigint;
    /**
     * member is the member data.
     *
     * @generated from protobuf field: cosmos.group.v1.Member member = 2;
     */
    member?: Member;
}
/**
 * GroupPolicyInfo represents the high-level on-chain information for a group policy.
 *
 * @generated from protobuf message cosmos.group.v1.GroupPolicyInfo
 */
export interface GroupPolicyInfo {
    /**
     * address is the account address of group policy.
     *
     * @generated from protobuf field: string address = 1;
     */
    address: string;
    /**
     * group_id is the unique ID of the group.
     *
     * @generated from protobuf field: uint64 group_id = 2;
     */
    groupId: bigint;
    /**
     * admin is the account address of the group admin.
     *
     * @generated from protobuf field: string admin = 3;
     */
    admin: string;
    /**
     * metadata is any arbitrary metadata to attached to the group policy.
     *
     * @generated from protobuf field: string metadata = 4;
     */
    metadata: string;
    /**
     * version is used to track changes to a group's GroupPolicyInfo structure that
     * would create a different result on a running proposal.
     *
     * @generated from protobuf field: uint64 version = 5;
     */
    version: bigint;
    /**
     * decision_policy specifies the group policy's decision policy.
     *
     * @generated from protobuf field: google.protobuf.Any decision_policy = 6;
     */
    decisionPolicy?: Any;
    /**
     * created_at is a timestamp specifying when a group policy was created.
     *
     * @generated from protobuf field: google.protobuf.Timestamp created_at = 7;
     */
    createdAt?: Timestamp;
}
/**
 * Proposal defines a group proposal. Any member of a group can submit a proposal
 * for a group policy to decide upon.
 * A proposal consists of a set of `sdk.Msg`s that will be executed if the proposal
 * passes as well as some optional metadata associated with the proposal.
 *
 * @generated from protobuf message cosmos.group.v1.Proposal
 */
export interface Proposal {
    /**
     * id is the unique id of the proposal.
     *
     * @generated from protobuf field: uint64 id = 1;
     */
    id: bigint;
    /**
     * address is the account address of group policy.
     *
     * @generated from protobuf field: string address = 2;
     */
    address: string;
    /**
     * metadata is any arbitrary metadata to attached to the proposal.
     *
     * @generated from protobuf field: string metadata = 3;
     */
    metadata: string;
    /**
     * proposers are the account addresses of the proposers.
     *
     * @generated from protobuf field: repeated string proposers = 4;
     */
    proposers: string[];
    /**
     * submit_time is a timestamp specifying when a proposal was submitted.
     *
     * @generated from protobuf field: google.protobuf.Timestamp submit_time = 5;
     */
    submitTime?: Timestamp;
    /**
     * group_version tracks the version of the group that this proposal corresponds to.
     * When group membership is changed, existing proposals from previous group versions will become invalid.
     *
     * @generated from protobuf field: uint64 group_version = 6;
     */
    groupVersion: bigint;
    /**
     * group_policy_version tracks the version of the group policy that this proposal corresponds to.
     * When a decision policy is changed, existing proposals from previous policy versions will become invalid.
     *
     * @generated from protobuf field: uint64 group_policy_version = 7;
     */
    groupPolicyVersion: bigint;
    /**
     * status represents the high level position in the life cycle of the proposal. Initial value is Submitted.
     *
     * @generated from protobuf field: cosmos.group.v1.ProposalStatus status = 8;
     */
    status: ProposalStatus;
    /**
     * result is the final result based on the votes and election rule. Initial value is unfinalized.
     * The result is persisted so that clients can always rely on this state and not have to replicate the logic.
     *
     * @generated from protobuf field: cosmos.group.v1.ProposalResult result = 9;
     */
    result: ProposalResult;
    /**
     * final_tally_result contains the sums of all weighted votes for this
     * proposal for each vote option, after tallying. When querying a proposal
     * via gRPC, this field is not populated until the proposal's voting period
     * has ended.
     *
     * @generated from protobuf field: cosmos.group.v1.TallyResult final_tally_result = 10;
     */
    finalTallyResult?: TallyResult;
    /**
     * voting_period_end is the timestamp before which voting must be done.
     * Unless a successfull MsgExec is called before (to execute a proposal whose
     * tally is successful before the voting period ends), tallying will be done
     * at this point, and the `final_tally_result`, as well
     * as `status` and `result` fields will be accordingly updated.
     *
     * @generated from protobuf field: google.protobuf.Timestamp voting_period_end = 11;
     */
    votingPeriodEnd?: Timestamp;
    /**
     * executor_result is the final result based on the votes and election rule. Initial value is NotRun.
     *
     * @generated from protobuf field: cosmos.group.v1.ProposalExecutorResult executor_result = 12;
     */
    executorResult: ProposalExecutorResult;
    /**
     * messages is a list of Msgs that will be executed if the proposal passes.
     *
     * @generated from protobuf field: repeated google.protobuf.Any messages = 13;
     */
    messages: Any[];
}
/**
 * TallyResult represents the sum of weighted votes for each vote option.
 *
 * @generated from protobuf message cosmos.group.v1.TallyResult
 */
export interface TallyResult {
    /**
     * yes_count is the weighted sum of yes votes.
     *
     * @generated from protobuf field: string yes_count = 1;
     */
    yesCount: string;
    /**
     * abstain_count is the weighted sum of abstainers.
     *
     * @generated from protobuf field: string abstain_count = 2;
     */
    abstainCount: string;
    /**
     * no is the weighted sum of no votes.
     *
     * @generated from protobuf field: string no_count = 3;
     */
    noCount: string;
    /**
     * no_with_veto_count is the weighted sum of veto.
     *
     * @generated from protobuf field: string no_with_veto_count = 4;
     */
    noWithVetoCount: string;
}
/**
 * Vote represents a vote for a proposal.
 *
 * @generated from protobuf message cosmos.group.v1.Vote
 */
export interface Vote {
    /**
     * proposal is the unique ID of the proposal.
     *
     * @generated from protobuf field: uint64 proposal_id = 1;
     */
    proposalId: bigint;
    /**
     * voter is the account address of the voter.
     *
     * @generated from protobuf field: string voter = 2;
     */
    voter: string;
    /**
     * option is the voter's choice on the proposal.
     *
     * @generated from protobuf field: cosmos.group.v1.VoteOption option = 3;
     */
    option: VoteOption;
    /**
     * metadata is any arbitrary metadata to attached to the vote.
     *
     * @generated from protobuf field: string metadata = 4;
     */
    metadata: string;
    /**
     * submit_time is the timestamp when the vote was submitted.
     *
     * @generated from protobuf field: google.protobuf.Timestamp submit_time = 5;
     */
    submitTime?: Timestamp;
}
/**
 * VoteOption enumerates the valid vote options for a given proposal.
 *
 * @generated from protobuf enum cosmos.group.v1.VoteOption
 */
export enum VoteOption {
    /**
     * VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
     *
     * @generated from protobuf enum value: VOTE_OPTION_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * VOTE_OPTION_YES defines a yes vote option.
     *
     * @generated from protobuf enum value: VOTE_OPTION_YES = 1;
     */
    YES = 1,
    /**
     * VOTE_OPTION_ABSTAIN defines an abstain vote option.
     *
     * @generated from protobuf enum value: VOTE_OPTION_ABSTAIN = 2;
     */
    ABSTAIN = 2,
    /**
     * VOTE_OPTION_NO defines a no vote option.
     *
     * @generated from protobuf enum value: VOTE_OPTION_NO = 3;
     */
    NO = 3,
    /**
     * VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
     *
     * @generated from protobuf enum value: VOTE_OPTION_NO_WITH_VETO = 4;
     */
    NO_WITH_VETO = 4
}
/**
 * ProposalStatus defines proposal statuses.
 *
 * @generated from protobuf enum cosmos.group.v1.ProposalStatus
 */
export enum ProposalStatus {
    /**
     * An empty value is invalid and not allowed.
     *
     * @generated from protobuf enum value: PROPOSAL_STATUS_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * Initial status of a proposal when persisted.
     *
     * @generated from protobuf enum value: PROPOSAL_STATUS_SUBMITTED = 1;
     */
    SUBMITTED = 1,
    /**
     * Final status of a proposal when the final tally was executed.
     *
     * @generated from protobuf enum value: PROPOSAL_STATUS_CLOSED = 2;
     */
    CLOSED = 2,
    /**
     * Final status of a proposal when the group was modified before the final tally.
     *
     * @generated from protobuf enum value: PROPOSAL_STATUS_ABORTED = 3;
     */
    ABORTED = 3,
    /**
     * A proposal can be deleted before the voting start time by the owner. When this happens the final status
     * is Withdrawn.
     *
     * @generated from protobuf enum value: PROPOSAL_STATUS_WITHDRAWN = 4;
     */
    WITHDRAWN = 4
}
/**
 * ProposalResult defines types of proposal results.
 *
 * @generated from protobuf enum cosmos.group.v1.ProposalResult
 */
export enum ProposalResult {
    /**
     * An empty value is invalid and not allowed
     *
     * @generated from protobuf enum value: PROPOSAL_RESULT_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * Until a final tally has happened the status is unfinalized
     *
     * @generated from protobuf enum value: PROPOSAL_RESULT_UNFINALIZED = 1;
     */
    UNFINALIZED = 1,
    /**
     * Final result of the tally
     *
     * @generated from protobuf enum value: PROPOSAL_RESULT_ACCEPTED = 2;
     */
    ACCEPTED = 2,
    /**
     * Final result of the tally
     *
     * @generated from protobuf enum value: PROPOSAL_RESULT_REJECTED = 3;
     */
    REJECTED = 3
}
/**
 * ProposalExecutorResult defines types of proposal executor results.
 *
 * @generated from protobuf enum cosmos.group.v1.ProposalExecutorResult
 */
export enum ProposalExecutorResult {
    /**
     * An empty value is not allowed.
     *
     * @generated from protobuf enum value: PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * We have not yet run the executor.
     *
     * @generated from protobuf enum value: PROPOSAL_EXECUTOR_RESULT_NOT_RUN = 1;
     */
    NOT_RUN = 1,
    /**
     * The executor was successful and proposed action updated state.
     *
     * @generated from protobuf enum value: PROPOSAL_EXECUTOR_RESULT_SUCCESS = 2;
     */
    SUCCESS = 2,
    /**
     * The executor returned an error and proposed action didn't update state.
     *
     * @generated from protobuf enum value: PROPOSAL_EXECUTOR_RESULT_FAILURE = 3;
     */
    FAILURE = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class Member$Type extends MessageType<Member> {
    constructor() {
        super("cosmos.group.v1.Member", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "cosmos_proto.scalar": "cosmos.AddressString" } },
            { no: 2, name: "weight", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "metadata", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "added_at", kind: "message", T: () => Timestamp, options: { "gogoproto.nullable": false, "gogoproto.stdtime": true } }
        ]);
    }
    create(value?: PartialMessage<Member>): Member {
        const message = { address: "", weight: "", metadata: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Member>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Member): Member {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* string weight */ 2:
                    message.weight = reader.string();
                    break;
                case /* string metadata */ 3:
                    message.metadata = reader.string();
                    break;
                case /* google.protobuf.Timestamp added_at */ 4:
                    message.addedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.addedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Member, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* string weight = 2; */
        if (message.weight !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.weight);
        /* string metadata = 3; */
        if (message.metadata !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.metadata);
        /* google.protobuf.Timestamp added_at = 4; */
        if (message.addedAt)
            Timestamp.internalBinaryWrite(message.addedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.Member
 */
export const Member = new Member$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Members$Type extends MessageType<Members> {
    constructor() {
        super("cosmos.group.v1.Members", [
            { no: 1, name: "members", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Member, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<Members>): Members {
        const message = { members: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Members>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Members): Members {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.group.v1.Member members */ 1:
                    message.members.push(Member.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Members, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated cosmos.group.v1.Member members = 1; */
        for (let i = 0; i < message.members.length; i++)
            Member.internalBinaryWrite(message.members[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.Members
 */
export const Members = new Members$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ThresholdDecisionPolicy$Type extends MessageType<ThresholdDecisionPolicy> {
    constructor() {
        super("cosmos.group.v1.ThresholdDecisionPolicy", [
            { no: 1, name: "threshold", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "windows", kind: "message", T: () => DecisionPolicyWindows }
        ], { "cosmos_proto.implements_interface": ["DecisionPolicy"] });
    }
    create(value?: PartialMessage<ThresholdDecisionPolicy>): ThresholdDecisionPolicy {
        const message = { threshold: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ThresholdDecisionPolicy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ThresholdDecisionPolicy): ThresholdDecisionPolicy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string threshold */ 1:
                    message.threshold = reader.string();
                    break;
                case /* cosmos.group.v1.DecisionPolicyWindows windows */ 2:
                    message.windows = DecisionPolicyWindows.internalBinaryRead(reader, reader.uint32(), options, message.windows);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ThresholdDecisionPolicy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string threshold = 1; */
        if (message.threshold !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.threshold);
        /* cosmos.group.v1.DecisionPolicyWindows windows = 2; */
        if (message.windows)
            DecisionPolicyWindows.internalBinaryWrite(message.windows, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.ThresholdDecisionPolicy
 */
export const ThresholdDecisionPolicy = new ThresholdDecisionPolicy$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PercentageDecisionPolicy$Type extends MessageType<PercentageDecisionPolicy> {
    constructor() {
        super("cosmos.group.v1.PercentageDecisionPolicy", [
            { no: 1, name: "percentage", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "windows", kind: "message", T: () => DecisionPolicyWindows }
        ], { "cosmos_proto.implements_interface": ["DecisionPolicy"] });
    }
    create(value?: PartialMessage<PercentageDecisionPolicy>): PercentageDecisionPolicy {
        const message = { percentage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PercentageDecisionPolicy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PercentageDecisionPolicy): PercentageDecisionPolicy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string percentage */ 1:
                    message.percentage = reader.string();
                    break;
                case /* cosmos.group.v1.DecisionPolicyWindows windows */ 2:
                    message.windows = DecisionPolicyWindows.internalBinaryRead(reader, reader.uint32(), options, message.windows);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PercentageDecisionPolicy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string percentage = 1; */
        if (message.percentage !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.percentage);
        /* cosmos.group.v1.DecisionPolicyWindows windows = 2; */
        if (message.windows)
            DecisionPolicyWindows.internalBinaryWrite(message.windows, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.PercentageDecisionPolicy
 */
export const PercentageDecisionPolicy = new PercentageDecisionPolicy$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DecisionPolicyWindows$Type extends MessageType<DecisionPolicyWindows> {
    constructor() {
        super("cosmos.group.v1.DecisionPolicyWindows", [
            { no: 1, name: "voting_period", kind: "message", T: () => Duration, options: { "gogoproto.nullable": false, "gogoproto.stdduration": true } },
            { no: 2, name: "min_execution_period", kind: "message", T: () => Duration, options: { "gogoproto.nullable": false, "gogoproto.stdduration": true } }
        ]);
    }
    create(value?: PartialMessage<DecisionPolicyWindows>): DecisionPolicyWindows {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DecisionPolicyWindows>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DecisionPolicyWindows): DecisionPolicyWindows {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Duration voting_period */ 1:
                    message.votingPeriod = Duration.internalBinaryRead(reader, reader.uint32(), options, message.votingPeriod);
                    break;
                case /* google.protobuf.Duration min_execution_period */ 2:
                    message.minExecutionPeriod = Duration.internalBinaryRead(reader, reader.uint32(), options, message.minExecutionPeriod);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DecisionPolicyWindows, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Duration voting_period = 1; */
        if (message.votingPeriod)
            Duration.internalBinaryWrite(message.votingPeriod, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration min_execution_period = 2; */
        if (message.minExecutionPeriod)
            Duration.internalBinaryWrite(message.minExecutionPeriod, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.DecisionPolicyWindows
 */
export const DecisionPolicyWindows = new DecisionPolicyWindows$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupInfo$Type extends MessageType<GroupInfo> {
    constructor() {
        super("cosmos.group.v1.GroupInfo", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "admin", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "cosmos_proto.scalar": "cosmos.AddressString" } },
            { no: 3, name: "metadata", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "version", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "total_weight", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "created_at", kind: "message", T: () => Timestamp, options: { "gogoproto.nullable": false, "gogoproto.stdtime": true } }
        ]);
    }
    create(value?: PartialMessage<GroupInfo>): GroupInfo {
        const message = { id: 0n, admin: "", metadata: "", version: 0n, totalWeight: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GroupInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupInfo): GroupInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* string admin */ 2:
                    message.admin = reader.string();
                    break;
                case /* string metadata */ 3:
                    message.metadata = reader.string();
                    break;
                case /* uint64 version */ 4:
                    message.version = reader.uint64().toBigInt();
                    break;
                case /* string total_weight */ 5:
                    message.totalWeight = reader.string();
                    break;
                case /* google.protobuf.Timestamp created_at */ 6:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* string admin = 2; */
        if (message.admin !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.admin);
        /* string metadata = 3; */
        if (message.metadata !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.metadata);
        /* uint64 version = 4; */
        if (message.version !== 0n)
            writer.tag(4, WireType.Varint).uint64(message.version);
        /* string total_weight = 5; */
        if (message.totalWeight !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.totalWeight);
        /* google.protobuf.Timestamp created_at = 6; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.GroupInfo
 */
export const GroupInfo = new GroupInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupMember$Type extends MessageType<GroupMember> {
    constructor() {
        super("cosmos.group.v1.GroupMember", [
            { no: 1, name: "group_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "member", kind: "message", T: () => Member }
        ]);
    }
    create(value?: PartialMessage<GroupMember>): GroupMember {
        const message = { groupId: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GroupMember>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupMember): GroupMember {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 group_id */ 1:
                    message.groupId = reader.uint64().toBigInt();
                    break;
                case /* cosmos.group.v1.Member member */ 2:
                    message.member = Member.internalBinaryRead(reader, reader.uint32(), options, message.member);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupMember, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 group_id = 1; */
        if (message.groupId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.groupId);
        /* cosmos.group.v1.Member member = 2; */
        if (message.member)
            Member.internalBinaryWrite(message.member, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.GroupMember
 */
export const GroupMember = new GroupMember$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupPolicyInfo$Type extends MessageType<GroupPolicyInfo> {
    constructor() {
        super("cosmos.group.v1.GroupPolicyInfo", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "cosmos_proto.scalar": "cosmos.AddressString" } },
            { no: 2, name: "group_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "admin", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "cosmos_proto.scalar": "cosmos.AddressString" } },
            { no: 4, name: "metadata", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "version", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "decision_policy", kind: "message", T: () => Any, options: { "cosmos_proto.accepts_interface": "DecisionPolicy" } },
            { no: 7, name: "created_at", kind: "message", T: () => Timestamp, options: { "gogoproto.nullable": false, "gogoproto.stdtime": true } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": true });
    }
    create(value?: PartialMessage<GroupPolicyInfo>): GroupPolicyInfo {
        const message = { address: "", groupId: 0n, admin: "", metadata: "", version: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GroupPolicyInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupPolicyInfo): GroupPolicyInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* uint64 group_id */ 2:
                    message.groupId = reader.uint64().toBigInt();
                    break;
                case /* string admin */ 3:
                    message.admin = reader.string();
                    break;
                case /* string metadata */ 4:
                    message.metadata = reader.string();
                    break;
                case /* uint64 version */ 5:
                    message.version = reader.uint64().toBigInt();
                    break;
                case /* google.protobuf.Any decision_policy */ 6:
                    message.decisionPolicy = Any.internalBinaryRead(reader, reader.uint32(), options, message.decisionPolicy);
                    break;
                case /* google.protobuf.Timestamp created_at */ 7:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupPolicyInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* uint64 group_id = 2; */
        if (message.groupId !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.groupId);
        /* string admin = 3; */
        if (message.admin !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.admin);
        /* string metadata = 4; */
        if (message.metadata !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.metadata);
        /* uint64 version = 5; */
        if (message.version !== 0n)
            writer.tag(5, WireType.Varint).uint64(message.version);
        /* google.protobuf.Any decision_policy = 6; */
        if (message.decisionPolicy)
            Any.internalBinaryWrite(message.decisionPolicy, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp created_at = 7; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.GroupPolicyInfo
 */
export const GroupPolicyInfo = new GroupPolicyInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Proposal$Type extends MessageType<Proposal> {
    constructor() {
        super("cosmos.group.v1.Proposal", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "cosmos_proto.scalar": "cosmos.AddressString" } },
            { no: 3, name: "metadata", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "proposers", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "cosmos_proto.scalar": "cosmos.AddressString" } },
            { no: 5, name: "submit_time", kind: "message", T: () => Timestamp, options: { "gogoproto.nullable": false, "gogoproto.stdtime": true } },
            { no: 6, name: "group_version", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "group_policy_version", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "status", kind: "enum", T: () => ["cosmos.group.v1.ProposalStatus", ProposalStatus, "PROPOSAL_STATUS_"] },
            { no: 9, name: "result", kind: "enum", T: () => ["cosmos.group.v1.ProposalResult", ProposalResult, "PROPOSAL_RESULT_"] },
            { no: 10, name: "final_tally_result", kind: "message", T: () => TallyResult, options: { "gogoproto.nullable": false } },
            { no: 11, name: "voting_period_end", kind: "message", T: () => Timestamp, options: { "gogoproto.nullable": false, "gogoproto.stdtime": true } },
            { no: 12, name: "executor_result", kind: "enum", T: () => ["cosmos.group.v1.ProposalExecutorResult", ProposalExecutorResult, "PROPOSAL_EXECUTOR_RESULT_"] },
            { no: 13, name: "messages", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Any }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value?: PartialMessage<Proposal>): Proposal {
        const message = { id: 0n, address: "", metadata: "", proposers: [], groupVersion: 0n, groupPolicyVersion: 0n, status: 0, result: 0, executorResult: 0, messages: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Proposal>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Proposal): Proposal {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* string address */ 2:
                    message.address = reader.string();
                    break;
                case /* string metadata */ 3:
                    message.metadata = reader.string();
                    break;
                case /* repeated string proposers */ 4:
                    message.proposers.push(reader.string());
                    break;
                case /* google.protobuf.Timestamp submit_time */ 5:
                    message.submitTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.submitTime);
                    break;
                case /* uint64 group_version */ 6:
                    message.groupVersion = reader.uint64().toBigInt();
                    break;
                case /* uint64 group_policy_version */ 7:
                    message.groupPolicyVersion = reader.uint64().toBigInt();
                    break;
                case /* cosmos.group.v1.ProposalStatus status */ 8:
                    message.status = reader.int32();
                    break;
                case /* cosmos.group.v1.ProposalResult result */ 9:
                    message.result = reader.int32();
                    break;
                case /* cosmos.group.v1.TallyResult final_tally_result */ 10:
                    message.finalTallyResult = TallyResult.internalBinaryRead(reader, reader.uint32(), options, message.finalTallyResult);
                    break;
                case /* google.protobuf.Timestamp voting_period_end */ 11:
                    message.votingPeriodEnd = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.votingPeriodEnd);
                    break;
                case /* cosmos.group.v1.ProposalExecutorResult executor_result */ 12:
                    message.executorResult = reader.int32();
                    break;
                case /* repeated google.protobuf.Any messages */ 13:
                    message.messages.push(Any.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Proposal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* string address = 2; */
        if (message.address !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.address);
        /* string metadata = 3; */
        if (message.metadata !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.metadata);
        /* repeated string proposers = 4; */
        for (let i = 0; i < message.proposers.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.proposers[i]);
        /* google.protobuf.Timestamp submit_time = 5; */
        if (message.submitTime)
            Timestamp.internalBinaryWrite(message.submitTime, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* uint64 group_version = 6; */
        if (message.groupVersion !== 0n)
            writer.tag(6, WireType.Varint).uint64(message.groupVersion);
        /* uint64 group_policy_version = 7; */
        if (message.groupPolicyVersion !== 0n)
            writer.tag(7, WireType.Varint).uint64(message.groupPolicyVersion);
        /* cosmos.group.v1.ProposalStatus status = 8; */
        if (message.status !== 0)
            writer.tag(8, WireType.Varint).int32(message.status);
        /* cosmos.group.v1.ProposalResult result = 9; */
        if (message.result !== 0)
            writer.tag(9, WireType.Varint).int32(message.result);
        /* cosmos.group.v1.TallyResult final_tally_result = 10; */
        if (message.finalTallyResult)
            TallyResult.internalBinaryWrite(message.finalTallyResult, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp voting_period_end = 11; */
        if (message.votingPeriodEnd)
            Timestamp.internalBinaryWrite(message.votingPeriodEnd, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.group.v1.ProposalExecutorResult executor_result = 12; */
        if (message.executorResult !== 0)
            writer.tag(12, WireType.Varint).int32(message.executorResult);
        /* repeated google.protobuf.Any messages = 13; */
        for (let i = 0; i < message.messages.length; i++)
            Any.internalBinaryWrite(message.messages[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.Proposal
 */
export const Proposal = new Proposal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TallyResult$Type extends MessageType<TallyResult> {
    constructor() {
        super("cosmos.group.v1.TallyResult", [
            { no: 1, name: "yes_count", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "abstain_count", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "no_count", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "no_with_veto_count", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "gogoproto.goproto_getters": false });
    }
    create(value?: PartialMessage<TallyResult>): TallyResult {
        const message = { yesCount: "", abstainCount: "", noCount: "", noWithVetoCount: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TallyResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TallyResult): TallyResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string yes_count */ 1:
                    message.yesCount = reader.string();
                    break;
                case /* string abstain_count */ 2:
                    message.abstainCount = reader.string();
                    break;
                case /* string no_count */ 3:
                    message.noCount = reader.string();
                    break;
                case /* string no_with_veto_count */ 4:
                    message.noWithVetoCount = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TallyResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string yes_count = 1; */
        if (message.yesCount !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.yesCount);
        /* string abstain_count = 2; */
        if (message.abstainCount !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.abstainCount);
        /* string no_count = 3; */
        if (message.noCount !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.noCount);
        /* string no_with_veto_count = 4; */
        if (message.noWithVetoCount !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.noWithVetoCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.TallyResult
 */
export const TallyResult = new TallyResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Vote$Type extends MessageType<Vote> {
    constructor() {
        super("cosmos.group.v1.Vote", [
            { no: 1, name: "proposal_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "voter", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "cosmos_proto.scalar": "cosmos.AddressString" } },
            { no: 3, name: "option", kind: "enum", T: () => ["cosmos.group.v1.VoteOption", VoteOption, "VOTE_OPTION_"] },
            { no: 4, name: "metadata", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "submit_time", kind: "message", T: () => Timestamp, options: { "gogoproto.nullable": false, "gogoproto.stdtime": true } }
        ]);
    }
    create(value?: PartialMessage<Vote>): Vote {
        const message = { proposalId: 0n, voter: "", option: 0, metadata: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Vote>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Vote): Vote {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 proposal_id */ 1:
                    message.proposalId = reader.uint64().toBigInt();
                    break;
                case /* string voter */ 2:
                    message.voter = reader.string();
                    break;
                case /* cosmos.group.v1.VoteOption option */ 3:
                    message.option = reader.int32();
                    break;
                case /* string metadata */ 4:
                    message.metadata = reader.string();
                    break;
                case /* google.protobuf.Timestamp submit_time */ 5:
                    message.submitTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.submitTime);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Vote, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 proposal_id = 1; */
        if (message.proposalId !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.proposalId);
        /* string voter = 2; */
        if (message.voter !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.voter);
        /* cosmos.group.v1.VoteOption option = 3; */
        if (message.option !== 0)
            writer.tag(3, WireType.Varint).int32(message.option);
        /* string metadata = 4; */
        if (message.metadata !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.metadata);
        /* google.protobuf.Timestamp submit_time = 5; */
        if (message.submitTime)
            Timestamp.internalBinaryWrite(message.submitTime, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.group.v1.Vote
 */
export const Vote = new Vote$Type();
