// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "cosmos/group/v1/tx.proto" (package "cosmos.group.v1", syntax proto3),// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Msg } from "./tx";
import type { MsgLeaveGroupResponse } from "./tx";
import type { MsgLeaveGroup } from "./tx";
import type { MsgExecResponse } from "./tx";
import type { MsgExec } from "./tx";
import type { MsgVoteResponse } from "./tx";
import type { MsgVote } from "./tx";
import type { MsgWithdrawProposalResponse } from "./tx";
import type { MsgWithdrawProposal } from "./tx";
import type { MsgSubmitProposalResponse } from "./tx";
import type { MsgSubmitProposal } from "./tx";
import type { MsgUpdateGroupPolicyMetadataResponse } from "./tx";
import type { MsgUpdateGroupPolicyMetadata } from "./tx";
import type { MsgUpdateGroupPolicyDecisionPolicyResponse } from "./tx";
import type { MsgUpdateGroupPolicyDecisionPolicy } from "./tx";
import type { MsgUpdateGroupPolicyAdminResponse } from "./tx";
import type { MsgUpdateGroupPolicyAdmin } from "./tx";
import type { MsgCreateGroupWithPolicyResponse } from "./tx";
import type { MsgCreateGroupWithPolicy } from "./tx";
import type { MsgCreateGroupPolicyResponse } from "./tx";
import type { MsgCreateGroupPolicy } from "./tx";
import type { MsgUpdateGroupMetadataResponse } from "./tx";
import type { MsgUpdateGroupMetadata } from "./tx";
import type { MsgUpdateGroupAdminResponse } from "./tx";
import type { MsgUpdateGroupAdmin } from "./tx";
import type { MsgUpdateGroupMembersResponse } from "./tx";
import type { MsgUpdateGroupMembers } from "./tx";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { MsgCreateGroupResponse } from "./tx";
import type { MsgCreateGroup } from "./tx";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Msg is the cosmos.group.v1 Msg service.
 *
 * @generated from protobuf service cosmos.group.v1.Msg
 */
export interface IMsgClient {
    /**
     * CreateGroup creates a new group with an admin account address, a list of members and some optional metadata.
     *
     * @generated from protobuf rpc: CreateGroup(cosmos.group.v1.MsgCreateGroup) returns (cosmos.group.v1.MsgCreateGroupResponse);
     */
    createGroup(input: MsgCreateGroup, options?: RpcOptions): UnaryCall<MsgCreateGroup, MsgCreateGroupResponse>;
    /**
     * UpdateGroupMembers updates the group members with given group id and admin address.
     *
     * @generated from protobuf rpc: UpdateGroupMembers(cosmos.group.v1.MsgUpdateGroupMembers) returns (cosmos.group.v1.MsgUpdateGroupMembersResponse);
     */
    updateGroupMembers(input: MsgUpdateGroupMembers, options?: RpcOptions): UnaryCall<MsgUpdateGroupMembers, MsgUpdateGroupMembersResponse>;
    /**
     * UpdateGroupAdmin updates the group admin with given group id and previous admin address.
     *
     * @generated from protobuf rpc: UpdateGroupAdmin(cosmos.group.v1.MsgUpdateGroupAdmin) returns (cosmos.group.v1.MsgUpdateGroupAdminResponse);
     */
    updateGroupAdmin(input: MsgUpdateGroupAdmin, options?: RpcOptions): UnaryCall<MsgUpdateGroupAdmin, MsgUpdateGroupAdminResponse>;
    /**
     * UpdateGroupMetadata updates the group metadata with given group id and admin address.
     *
     * @generated from protobuf rpc: UpdateGroupMetadata(cosmos.group.v1.MsgUpdateGroupMetadata) returns (cosmos.group.v1.MsgUpdateGroupMetadataResponse);
     */
    updateGroupMetadata(input: MsgUpdateGroupMetadata, options?: RpcOptions): UnaryCall<MsgUpdateGroupMetadata, MsgUpdateGroupMetadataResponse>;
    /**
     * CreateGroupPolicy creates a new group policy using given DecisionPolicy.
     *
     * @generated from protobuf rpc: CreateGroupPolicy(cosmos.group.v1.MsgCreateGroupPolicy) returns (cosmos.group.v1.MsgCreateGroupPolicyResponse);
     */
    createGroupPolicy(input: MsgCreateGroupPolicy, options?: RpcOptions): UnaryCall<MsgCreateGroupPolicy, MsgCreateGroupPolicyResponse>;
    /**
     * CreateGroupWithPolicy creates a new group with policy.
     *
     * @generated from protobuf rpc: CreateGroupWithPolicy(cosmos.group.v1.MsgCreateGroupWithPolicy) returns (cosmos.group.v1.MsgCreateGroupWithPolicyResponse);
     */
    createGroupWithPolicy(input: MsgCreateGroupWithPolicy, options?: RpcOptions): UnaryCall<MsgCreateGroupWithPolicy, MsgCreateGroupWithPolicyResponse>;
    /**
     * UpdateGroupPolicyAdmin updates a group policy admin.
     *
     * @generated from protobuf rpc: UpdateGroupPolicyAdmin(cosmos.group.v1.MsgUpdateGroupPolicyAdmin) returns (cosmos.group.v1.MsgUpdateGroupPolicyAdminResponse);
     */
    updateGroupPolicyAdmin(input: MsgUpdateGroupPolicyAdmin, options?: RpcOptions): UnaryCall<MsgUpdateGroupPolicyAdmin, MsgUpdateGroupPolicyAdminResponse>;
    /**
     * UpdateGroupPolicyDecisionPolicy allows a group policy's decision policy to be updated.
     *
     * @generated from protobuf rpc: UpdateGroupPolicyDecisionPolicy(cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy) returns (cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicyResponse);
     */
    updateGroupPolicyDecisionPolicy(input: MsgUpdateGroupPolicyDecisionPolicy, options?: RpcOptions): UnaryCall<MsgUpdateGroupPolicyDecisionPolicy, MsgUpdateGroupPolicyDecisionPolicyResponse>;
    /**
     * UpdateGroupPolicyMetadata updates a group policy metadata.
     *
     * @generated from protobuf rpc: UpdateGroupPolicyMetadata(cosmos.group.v1.MsgUpdateGroupPolicyMetadata) returns (cosmos.group.v1.MsgUpdateGroupPolicyMetadataResponse);
     */
    updateGroupPolicyMetadata(input: MsgUpdateGroupPolicyMetadata, options?: RpcOptions): UnaryCall<MsgUpdateGroupPolicyMetadata, MsgUpdateGroupPolicyMetadataResponse>;
    /**
     * SubmitProposal submits a new proposal.
     *
     * @generated from protobuf rpc: SubmitProposal(cosmos.group.v1.MsgSubmitProposal) returns (cosmos.group.v1.MsgSubmitProposalResponse);
     */
    submitProposal(input: MsgSubmitProposal, options?: RpcOptions): UnaryCall<MsgSubmitProposal, MsgSubmitProposalResponse>;
    /**
     * WithdrawProposal aborts a proposal.
     *
     * @generated from protobuf rpc: WithdrawProposal(cosmos.group.v1.MsgWithdrawProposal) returns (cosmos.group.v1.MsgWithdrawProposalResponse);
     */
    withdrawProposal(input: MsgWithdrawProposal, options?: RpcOptions): UnaryCall<MsgWithdrawProposal, MsgWithdrawProposalResponse>;
    /**
     * Vote allows a voter to vote on a proposal.
     *
     * @generated from protobuf rpc: Vote(cosmos.group.v1.MsgVote) returns (cosmos.group.v1.MsgVoteResponse);
     */
    vote(input: MsgVote, options?: RpcOptions): UnaryCall<MsgVote, MsgVoteResponse>;
    /**
     * Exec executes a proposal.
     *
     * @generated from protobuf rpc: Exec(cosmos.group.v1.MsgExec) returns (cosmos.group.v1.MsgExecResponse);
     */
    exec(input: MsgExec, options?: RpcOptions): UnaryCall<MsgExec, MsgExecResponse>;
    /**
     * LeaveGroup allows a group member to leave the group.
     *
     * @generated from protobuf rpc: LeaveGroup(cosmos.group.v1.MsgLeaveGroup) returns (cosmos.group.v1.MsgLeaveGroupResponse);
     */
    leaveGroup(input: MsgLeaveGroup, options?: RpcOptions): UnaryCall<MsgLeaveGroup, MsgLeaveGroupResponse>;
}
/**
 * Msg is the cosmos.group.v1 Msg service.
 *
 * @generated from protobuf service cosmos.group.v1.Msg
 */
export class MsgClient implements IMsgClient, ServiceInfo {
    typeName = Msg.typeName;
    methods = Msg.methods;
    options = Msg.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * CreateGroup creates a new group with an admin account address, a list of members and some optional metadata.
     *
     * @generated from protobuf rpc: CreateGroup(cosmos.group.v1.MsgCreateGroup) returns (cosmos.group.v1.MsgCreateGroupResponse);
     */
    createGroup(input: MsgCreateGroup, options?: RpcOptions): UnaryCall<MsgCreateGroup, MsgCreateGroupResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgCreateGroup, MsgCreateGroupResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * UpdateGroupMembers updates the group members with given group id and admin address.
     *
     * @generated from protobuf rpc: UpdateGroupMembers(cosmos.group.v1.MsgUpdateGroupMembers) returns (cosmos.group.v1.MsgUpdateGroupMembersResponse);
     */
    updateGroupMembers(input: MsgUpdateGroupMembers, options?: RpcOptions): UnaryCall<MsgUpdateGroupMembers, MsgUpdateGroupMembersResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgUpdateGroupMembers, MsgUpdateGroupMembersResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * UpdateGroupAdmin updates the group admin with given group id and previous admin address.
     *
     * @generated from protobuf rpc: UpdateGroupAdmin(cosmos.group.v1.MsgUpdateGroupAdmin) returns (cosmos.group.v1.MsgUpdateGroupAdminResponse);
     */
    updateGroupAdmin(input: MsgUpdateGroupAdmin, options?: RpcOptions): UnaryCall<MsgUpdateGroupAdmin, MsgUpdateGroupAdminResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgUpdateGroupAdmin, MsgUpdateGroupAdminResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * UpdateGroupMetadata updates the group metadata with given group id and admin address.
     *
     * @generated from protobuf rpc: UpdateGroupMetadata(cosmos.group.v1.MsgUpdateGroupMetadata) returns (cosmos.group.v1.MsgUpdateGroupMetadataResponse);
     */
    updateGroupMetadata(input: MsgUpdateGroupMetadata, options?: RpcOptions): UnaryCall<MsgUpdateGroupMetadata, MsgUpdateGroupMetadataResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgUpdateGroupMetadata, MsgUpdateGroupMetadataResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * CreateGroupPolicy creates a new group policy using given DecisionPolicy.
     *
     * @generated from protobuf rpc: CreateGroupPolicy(cosmos.group.v1.MsgCreateGroupPolicy) returns (cosmos.group.v1.MsgCreateGroupPolicyResponse);
     */
    createGroupPolicy(input: MsgCreateGroupPolicy, options?: RpcOptions): UnaryCall<MsgCreateGroupPolicy, MsgCreateGroupPolicyResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgCreateGroupPolicy, MsgCreateGroupPolicyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * CreateGroupWithPolicy creates a new group with policy.
     *
     * @generated from protobuf rpc: CreateGroupWithPolicy(cosmos.group.v1.MsgCreateGroupWithPolicy) returns (cosmos.group.v1.MsgCreateGroupWithPolicyResponse);
     */
    createGroupWithPolicy(input: MsgCreateGroupWithPolicy, options?: RpcOptions): UnaryCall<MsgCreateGroupWithPolicy, MsgCreateGroupWithPolicyResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgCreateGroupWithPolicy, MsgCreateGroupWithPolicyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * UpdateGroupPolicyAdmin updates a group policy admin.
     *
     * @generated from protobuf rpc: UpdateGroupPolicyAdmin(cosmos.group.v1.MsgUpdateGroupPolicyAdmin) returns (cosmos.group.v1.MsgUpdateGroupPolicyAdminResponse);
     */
    updateGroupPolicyAdmin(input: MsgUpdateGroupPolicyAdmin, options?: RpcOptions): UnaryCall<MsgUpdateGroupPolicyAdmin, MsgUpdateGroupPolicyAdminResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgUpdateGroupPolicyAdmin, MsgUpdateGroupPolicyAdminResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * UpdateGroupPolicyDecisionPolicy allows a group policy's decision policy to be updated.
     *
     * @generated from protobuf rpc: UpdateGroupPolicyDecisionPolicy(cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy) returns (cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicyResponse);
     */
    updateGroupPolicyDecisionPolicy(input: MsgUpdateGroupPolicyDecisionPolicy, options?: RpcOptions): UnaryCall<MsgUpdateGroupPolicyDecisionPolicy, MsgUpdateGroupPolicyDecisionPolicyResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgUpdateGroupPolicyDecisionPolicy, MsgUpdateGroupPolicyDecisionPolicyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * UpdateGroupPolicyMetadata updates a group policy metadata.
     *
     * @generated from protobuf rpc: UpdateGroupPolicyMetadata(cosmos.group.v1.MsgUpdateGroupPolicyMetadata) returns (cosmos.group.v1.MsgUpdateGroupPolicyMetadataResponse);
     */
    updateGroupPolicyMetadata(input: MsgUpdateGroupPolicyMetadata, options?: RpcOptions): UnaryCall<MsgUpdateGroupPolicyMetadata, MsgUpdateGroupPolicyMetadataResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgUpdateGroupPolicyMetadata, MsgUpdateGroupPolicyMetadataResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * SubmitProposal submits a new proposal.
     *
     * @generated from protobuf rpc: SubmitProposal(cosmos.group.v1.MsgSubmitProposal) returns (cosmos.group.v1.MsgSubmitProposalResponse);
     */
    submitProposal(input: MsgSubmitProposal, options?: RpcOptions): UnaryCall<MsgSubmitProposal, MsgSubmitProposalResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgSubmitProposal, MsgSubmitProposalResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * WithdrawProposal aborts a proposal.
     *
     * @generated from protobuf rpc: WithdrawProposal(cosmos.group.v1.MsgWithdrawProposal) returns (cosmos.group.v1.MsgWithdrawProposalResponse);
     */
    withdrawProposal(input: MsgWithdrawProposal, options?: RpcOptions): UnaryCall<MsgWithdrawProposal, MsgWithdrawProposalResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgWithdrawProposal, MsgWithdrawProposalResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Vote allows a voter to vote on a proposal.
     *
     * @generated from protobuf rpc: Vote(cosmos.group.v1.MsgVote) returns (cosmos.group.v1.MsgVoteResponse);
     */
    vote(input: MsgVote, options?: RpcOptions): UnaryCall<MsgVote, MsgVoteResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgVote, MsgVoteResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Exec executes a proposal.
     *
     * @generated from protobuf rpc: Exec(cosmos.group.v1.MsgExec) returns (cosmos.group.v1.MsgExecResponse);
     */
    exec(input: MsgExec, options?: RpcOptions): UnaryCall<MsgExec, MsgExecResponse> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgExec, MsgExecResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * LeaveGroup allows a group member to leave the group.
     *
     * @generated from protobuf rpc: LeaveGroup(cosmos.group.v1.MsgLeaveGroup) returns (cosmos.group.v1.MsgLeaveGroupResponse);
     */
    leaveGroup(input: MsgLeaveGroup, options?: RpcOptions): UnaryCall<MsgLeaveGroup, MsgLeaveGroupResponse> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<MsgLeaveGroup, MsgLeaveGroupResponse>("unary", this._transport, method, opt, input);
    }
}
