// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "cosmos/app/v1alpha1/query.proto" (package "cosmos.app.v1alpha1", syntax proto3),// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Config } from "./config";
/**
 * QueryConfigRequest is the Query/Config request type.
 *
 * @generated from protobuf message cosmos.app.v1alpha1.QueryConfigRequest
 */
export interface QueryConfigRequest {
}
/**
 * QueryConfigRequest is the Query/Config response type.
 *
 * @generated from protobuf message cosmos.app.v1alpha1.QueryConfigResponse
 */
export interface QueryConfigResponse {
    /**
     * config is the current app config.
     *
     * @generated from protobuf field: cosmos.app.v1alpha1.Config config = 1;
     */
    config?: Config;
}
// @generated message type with reflection information, may provide speed optimized methods
class QueryConfigRequest$Type extends MessageType<QueryConfigRequest> {
    constructor() {
        super("cosmos.app.v1alpha1.QueryConfigRequest", []);
    }
    create(value?: PartialMessage<QueryConfigRequest>): QueryConfigRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryConfigRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryConfigRequest): QueryConfigRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryConfigRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.app.v1alpha1.QueryConfigRequest
 */
export const QueryConfigRequest = new QueryConfigRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryConfigResponse$Type extends MessageType<QueryConfigResponse> {
    constructor() {
        super("cosmos.app.v1alpha1.QueryConfigResponse", [
            { no: 1, name: "config", kind: "message", T: () => Config }
        ]);
    }
    create(value?: PartialMessage<QueryConfigResponse>): QueryConfigResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryConfigResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryConfigResponse): QueryConfigResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.app.v1alpha1.Config config */ 1:
                    message.config = Config.internalBinaryRead(reader, reader.uint32(), options, message.config);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryConfigResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.app.v1alpha1.Config config = 1; */
        if (message.config)
            Config.internalBinaryWrite(message.config, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.app.v1alpha1.QueryConfigResponse
 */
export const QueryConfigResponse = new QueryConfigResponse$Type();
/**
 * @generated ServiceType for protobuf service cosmos.app.v1alpha1.Query
 */
export const Query = new ServiceType("cosmos.app.v1alpha1.Query", [
    { name: "Config", options: {}, I: QueryConfigRequest, O: QueryConfigResponse }
]);
