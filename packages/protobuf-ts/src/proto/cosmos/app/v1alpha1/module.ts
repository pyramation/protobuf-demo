// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "cosmos/app/v1alpha1/module.proto" (package "cosmos.app.v1alpha1", syntax proto3),// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * ModuleDescriptor describes an app module.
 *
 * @generated from protobuf message cosmos.app.v1alpha1.ModuleDescriptor
 */
export interface ModuleDescriptor {
    /**
     * go_import names the package that should be imported by an app to load the
     * module in the runtime module registry. Either go_import must be defined here
     * or the go_package option must be defined at the file level to indicate
     * to users where to location the module implementation. go_import takes
     * precedence over go_package when both are defined.
     *
     * @generated from protobuf field: string go_import = 1;
     */
    goImport: string;
    /**
     * use_package refers to a protobuf package that this module
     * uses and exposes to the world. In an app, only one module should "use"
     * or own a single protobuf package. It is assumed that the module uses
     * all of the .proto files in a single package.
     *
     * @generated from protobuf field: repeated cosmos.app.v1alpha1.PackageReference use_package = 2;
     */
    usePackage: PackageReference[];
    /**
     * can_migrate_from defines which module versions this module can migrate
     * state from. The framework will check that one module version is able to
     * migrate from a previous module version before attempting to update its
     * config. It is assumed that modules can transitively migrate from earlier
     * versions. For instance if v3 declares it can migrate from v2, and v2
     * declares it can migrate from v1, the framework knows how to migrate
     * from v1 to v3, assuming all 3 module versions are registered at runtime.
     *
     * @generated from protobuf field: repeated cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3;
     */
    canMigrateFrom: MigrateFromInfo[];
}
/**
 * PackageReference is a reference to a protobuf package used by a module.
 *
 * @generated from protobuf message cosmos.app.v1alpha1.PackageReference
 */
export interface PackageReference {
    /**
     * name is the fully-qualified name of the package.
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * revision is the optional revision of the package that is being used.
     * Protobuf packages used in Cosmos should generally have a major version
     * as the last part of the package name, ex. foo.bar.baz.v1.
     * The revision of a package can be thought of as the minor version of a
     * package which has additional backwards compatible definitions that weren't
     * present in a previous version.
     *
     * A package should indicate its revision with a source code comment
     * above the package declaration in one of its fields containing the
     * test "Revision N" where N is an integer revision. All packages start
     * at revision 0 the first time they are released in a module.
     *
     * When a new version of a module is released and items are added to existing
     * .proto files, these definitions should contain comments of the form
     * "Since Revision N" where N is an integer revision.
     *
     * When the module runtime starts up, it will check the pinned proto
     * image and panic if there are runtime protobuf definitions that are not
     * in the pinned descriptor which do not have
     * a "Since Revision N" comment or have a "Since Revision N" comment where
     * N is <= to the revision specified here. This indicates that the protobuf
     * files have been updated, but the pinned file descriptor hasn't.
     *
     * If there are items in the pinned file descriptor with a revision
     * greater than the value indicated here, this will also cause a panic
     * as it may mean that the pinned descriptor for a legacy module has been
     * improperly updated or that there is some other versioning discrepancy.
     * Runtime protobuf definitions will also be checked for compatibility
     * with pinned file descriptors to make sure there are no incompatible changes.
     *
     * This behavior ensures that:
     * * pinned proto images are up-to-date
     * * protobuf files are carefully annotated with revision comments which
     *   are important good client UX
     * * protobuf files are changed in backwards and forwards compatible ways
     *
     * @generated from protobuf field: uint32 revision = 2;
     */
    revision: number;
}
/**
 * MigrateFromInfo is information on a module version that a newer module
 * can migrate from.
 *
 * @generated from protobuf message cosmos.app.v1alpha1.MigrateFromInfo
 */
export interface MigrateFromInfo {
    /**
     * module is the fully-qualified protobuf name of the module config object
     * for the previous module version, ex: "cosmos.group.module.v1.Module".
     *
     * @generated from protobuf field: string module = 1;
     */
    module: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class ModuleDescriptor$Type extends MessageType<ModuleDescriptor> {
    constructor() {
        super("cosmos.app.v1alpha1.ModuleDescriptor", [
            { no: 1, name: "go_import", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "use_package", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PackageReference },
            { no: 3, name: "can_migrate_from", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MigrateFromInfo }
        ]);
    }
    create(value?: PartialMessage<ModuleDescriptor>): ModuleDescriptor {
        const message = { goImport: "", usePackage: [], canMigrateFrom: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ModuleDescriptor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ModuleDescriptor): ModuleDescriptor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string go_import */ 1:
                    message.goImport = reader.string();
                    break;
                case /* repeated cosmos.app.v1alpha1.PackageReference use_package */ 2:
                    message.usePackage.push(PackageReference.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from */ 3:
                    message.canMigrateFrom.push(MigrateFromInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ModuleDescriptor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string go_import = 1; */
        if (message.goImport !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.goImport);
        /* repeated cosmos.app.v1alpha1.PackageReference use_package = 2; */
        for (let i = 0; i < message.usePackage.length; i++)
            PackageReference.internalBinaryWrite(message.usePackage[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3; */
        for (let i = 0; i < message.canMigrateFrom.length; i++)
            MigrateFromInfo.internalBinaryWrite(message.canMigrateFrom[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.app.v1alpha1.ModuleDescriptor
 */
export const ModuleDescriptor = new ModuleDescriptor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PackageReference$Type extends MessageType<PackageReference> {
    constructor() {
        super("cosmos.app.v1alpha1.PackageReference", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "revision", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PackageReference>): PackageReference {
        const message = { name: "", revision: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PackageReference>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PackageReference): PackageReference {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* uint32 revision */ 2:
                    message.revision = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PackageReference, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* uint32 revision = 2; */
        if (message.revision !== 0)
            writer.tag(2, WireType.Varint).uint32(message.revision);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.app.v1alpha1.PackageReference
 */
export const PackageReference = new PackageReference$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MigrateFromInfo$Type extends MessageType<MigrateFromInfo> {
    constructor() {
        super("cosmos.app.v1alpha1.MigrateFromInfo", [
            { no: 1, name: "module", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MigrateFromInfo>): MigrateFromInfo {
        const message = { module: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MigrateFromInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MigrateFromInfo): MigrateFromInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string module */ 1:
                    message.module = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MigrateFromInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string module = 1; */
        if (message.module !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.module);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.app.v1alpha1.MigrateFromInfo
 */
export const MigrateFromInfo = new MigrateFromInfo$Type();
