// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "cosmos/vesting/v1beta1/tx.proto" (package "cosmos.vesting.v1beta1", syntax proto3),// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Period } from "./vesting";
import { Coin } from "../../base/v1beta1/coin";
/**
 * MsgCreateVestingAccount defines a message that enables creating a vesting
 * account.
 *
 * @generated from protobuf message cosmos.vesting.v1beta1.MsgCreateVestingAccount
 */
export interface MsgCreateVestingAccount {
    /**
     * @generated from protobuf field: string from_address = 1;
     */
    fromAddress: string;
    /**
     * @generated from protobuf field: string to_address = 2;
     */
    toAddress: string;
    /**
     * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin amount = 3;
     */
    amount: Coin[];
    /**
     * @generated from protobuf field: int64 end_time = 4;
     */
    endTime: bigint;
    /**
     * @generated from protobuf field: bool delayed = 5;
     */
    delayed: boolean;
}
/**
 * MsgCreateVestingAccountResponse defines the Msg/CreateVestingAccount response type.
 *
 * @generated from protobuf message cosmos.vesting.v1beta1.MsgCreateVestingAccountResponse
 */
export interface MsgCreateVestingAccountResponse {
}
/**
 * MsgCreatePermanentLockedAccount defines a message that enables creating a permanent
 * locked account.
 *
 * @generated from protobuf message cosmos.vesting.v1beta1.MsgCreatePermanentLockedAccount
 */
export interface MsgCreatePermanentLockedAccount {
    /**
     * @generated from protobuf field: string from_address = 1;
     */
    fromAddress: string;
    /**
     * @generated from protobuf field: string to_address = 2;
     */
    toAddress: string;
    /**
     * @generated from protobuf field: repeated cosmos.base.v1beta1.Coin amount = 3;
     */
    amount: Coin[];
}
/**
 * MsgCreatePermanentLockedAccountResponse defines the Msg/CreatePermanentLockedAccount response type.
 *
 * @generated from protobuf message cosmos.vesting.v1beta1.MsgCreatePermanentLockedAccountResponse
 */
export interface MsgCreatePermanentLockedAccountResponse {
}
/**
 * MsgCreateVestingAccount defines a message that enables creating a vesting
 * account.
 *
 * @generated from protobuf message cosmos.vesting.v1beta1.MsgCreatePeriodicVestingAccount
 */
export interface MsgCreatePeriodicVestingAccount {
    /**
     * @generated from protobuf field: string from_address = 1;
     */
    fromAddress: string;
    /**
     * @generated from protobuf field: string to_address = 2;
     */
    toAddress: string;
    /**
     * @generated from protobuf field: int64 start_time = 3;
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: repeated cosmos.vesting.v1beta1.Period vesting_periods = 4;
     */
    vestingPeriods: Period[];
}
/**
 * MsgCreateVestingAccountResponse defines the Msg/CreatePeriodicVestingAccount
 * response type.
 *
 * @generated from protobuf message cosmos.vesting.v1beta1.MsgCreatePeriodicVestingAccountResponse
 */
export interface MsgCreatePeriodicVestingAccountResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class MsgCreateVestingAccount$Type extends MessageType<MsgCreateVestingAccount> {
    constructor() {
        super("cosmos.vesting.v1beta1.MsgCreateVestingAccount", [
            { no: 1, name: "from_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "cosmos_proto.scalar": "cosmos.AddressString" } },
            { no: 2, name: "to_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "cosmos_proto.scalar": "cosmos.AddressString" } },
            { no: 3, name: "amount", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } },
            { no: 4, name: "end_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "delayed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ], { "gogoproto.equal": true, "cosmos.msg.v1.signer": ["from_address"] });
    }
    create(value?: PartialMessage<MsgCreateVestingAccount>): MsgCreateVestingAccount {
        const message = { fromAddress: "", toAddress: "", amount: [], endTime: 0n, delayed: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgCreateVestingAccount>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgCreateVestingAccount): MsgCreateVestingAccount {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string from_address */ 1:
                    message.fromAddress = reader.string();
                    break;
                case /* string to_address */ 2:
                    message.toAddress = reader.string();
                    break;
                case /* repeated cosmos.base.v1beta1.Coin amount */ 3:
                    message.amount.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 end_time */ 4:
                    message.endTime = reader.int64().toBigInt();
                    break;
                case /* bool delayed */ 5:
                    message.delayed = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgCreateVestingAccount, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string from_address = 1; */
        if (message.fromAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fromAddress);
        /* string to_address = 2; */
        if (message.toAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.toAddress);
        /* repeated cosmos.base.v1beta1.Coin amount = 3; */
        for (let i = 0; i < message.amount.length; i++)
            Coin.internalBinaryWrite(message.amount[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 end_time = 4; */
        if (message.endTime !== 0n)
            writer.tag(4, WireType.Varint).int64(message.endTime);
        /* bool delayed = 5; */
        if (message.delayed !== false)
            writer.tag(5, WireType.Varint).bool(message.delayed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.vesting.v1beta1.MsgCreateVestingAccount
 */
export const MsgCreateVestingAccount = new MsgCreateVestingAccount$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgCreateVestingAccountResponse$Type extends MessageType<MsgCreateVestingAccountResponse> {
    constructor() {
        super("cosmos.vesting.v1beta1.MsgCreateVestingAccountResponse", []);
    }
    create(value?: PartialMessage<MsgCreateVestingAccountResponse>): MsgCreateVestingAccountResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgCreateVestingAccountResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgCreateVestingAccountResponse): MsgCreateVestingAccountResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MsgCreateVestingAccountResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.vesting.v1beta1.MsgCreateVestingAccountResponse
 */
export const MsgCreateVestingAccountResponse = new MsgCreateVestingAccountResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgCreatePermanentLockedAccount$Type extends MessageType<MsgCreatePermanentLockedAccount> {
    constructor() {
        super("cosmos.vesting.v1beta1.MsgCreatePermanentLockedAccount", [
            { no: 1, name: "from_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"from_address\"" } },
            { no: 2, name: "to_address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "gogoproto.moretags": "yaml:\"to_address\"" } },
            { no: 3, name: "amount", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Coin, options: { "gogoproto.nullable": false, "gogoproto.castrepeated": "github.com/cosmos/cosmos-sdk/types.Coins" } }
        ], { "gogoproto.equal": true });
    }
    create(value?: PartialMessage<MsgCreatePermanentLockedAccount>): MsgCreatePermanentLockedAccount {
        const message = { fromAddress: "", toAddress: "", amount: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgCreatePermanentLockedAccount>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgCreatePermanentLockedAccount): MsgCreatePermanentLockedAccount {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string from_address */ 1:
                    message.fromAddress = reader.string();
                    break;
                case /* string to_address */ 2:
                    message.toAddress = reader.string();
                    break;
                case /* repeated cosmos.base.v1beta1.Coin amount */ 3:
                    message.amount.push(Coin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgCreatePermanentLockedAccount, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string from_address = 1; */
        if (message.fromAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fromAddress);
        /* string to_address = 2; */
        if (message.toAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.toAddress);
        /* repeated cosmos.base.v1beta1.Coin amount = 3; */
        for (let i = 0; i < message.amount.length; i++)
            Coin.internalBinaryWrite(message.amount[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.vesting.v1beta1.MsgCreatePermanentLockedAccount
 */
export const MsgCreatePermanentLockedAccount = new MsgCreatePermanentLockedAccount$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgCreatePermanentLockedAccountResponse$Type extends MessageType<MsgCreatePermanentLockedAccountResponse> {
    constructor() {
        super("cosmos.vesting.v1beta1.MsgCreatePermanentLockedAccountResponse", []);
    }
    create(value?: PartialMessage<MsgCreatePermanentLockedAccountResponse>): MsgCreatePermanentLockedAccountResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgCreatePermanentLockedAccountResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgCreatePermanentLockedAccountResponse): MsgCreatePermanentLockedAccountResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MsgCreatePermanentLockedAccountResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.vesting.v1beta1.MsgCreatePermanentLockedAccountResponse
 */
export const MsgCreatePermanentLockedAccountResponse = new MsgCreatePermanentLockedAccountResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgCreatePeriodicVestingAccount$Type extends MessageType<MsgCreatePeriodicVestingAccount> {
    constructor() {
        super("cosmos.vesting.v1beta1.MsgCreatePeriodicVestingAccount", [
            { no: 1, name: "from_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "to_address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "vesting_periods", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Period, options: { "gogoproto.nullable": false } }
        ], { "gogoproto.equal": false, "cosmos.msg.v1.signer": ["from_address"] });
    }
    create(value?: PartialMessage<MsgCreatePeriodicVestingAccount>): MsgCreatePeriodicVestingAccount {
        const message = { fromAddress: "", toAddress: "", startTime: 0n, vestingPeriods: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgCreatePeriodicVestingAccount>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgCreatePeriodicVestingAccount): MsgCreatePeriodicVestingAccount {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string from_address */ 1:
                    message.fromAddress = reader.string();
                    break;
                case /* string to_address */ 2:
                    message.toAddress = reader.string();
                    break;
                case /* int64 start_time */ 3:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* repeated cosmos.vesting.v1beta1.Period vesting_periods */ 4:
                    message.vestingPeriods.push(Period.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgCreatePeriodicVestingAccount, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string from_address = 1; */
        if (message.fromAddress !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fromAddress);
        /* string to_address = 2; */
        if (message.toAddress !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.toAddress);
        /* int64 start_time = 3; */
        if (message.startTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.startTime);
        /* repeated cosmos.vesting.v1beta1.Period vesting_periods = 4; */
        for (let i = 0; i < message.vestingPeriods.length; i++)
            Period.internalBinaryWrite(message.vestingPeriods[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.vesting.v1beta1.MsgCreatePeriodicVestingAccount
 */
export const MsgCreatePeriodicVestingAccount = new MsgCreatePeriodicVestingAccount$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgCreatePeriodicVestingAccountResponse$Type extends MessageType<MsgCreatePeriodicVestingAccountResponse> {
    constructor() {
        super("cosmos.vesting.v1beta1.MsgCreatePeriodicVestingAccountResponse", []);
    }
    create(value?: PartialMessage<MsgCreatePeriodicVestingAccountResponse>): MsgCreatePeriodicVestingAccountResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgCreatePeriodicVestingAccountResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgCreatePeriodicVestingAccountResponse): MsgCreatePeriodicVestingAccountResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MsgCreatePeriodicVestingAccountResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.vesting.v1beta1.MsgCreatePeriodicVestingAccountResponse
 */
export const MsgCreatePeriodicVestingAccountResponse = new MsgCreatePeriodicVestingAccountResponse$Type();
/**
 * @generated ServiceType for protobuf service cosmos.vesting.v1beta1.Msg
 */
export const Msg = new ServiceType("cosmos.vesting.v1beta1.Msg", [
    { name: "CreateVestingAccount", options: {}, I: MsgCreateVestingAccount, O: MsgCreateVestingAccountResponse },
    { name: "CreatePermanentLockedAccount", options: {}, I: MsgCreatePermanentLockedAccount, O: MsgCreatePermanentLockedAccountResponse },
    { name: "CreatePeriodicVestingAccount", options: {}, I: MsgCreatePeriodicVestingAccount, O: MsgCreatePeriodicVestingAccountResponse }
]);
