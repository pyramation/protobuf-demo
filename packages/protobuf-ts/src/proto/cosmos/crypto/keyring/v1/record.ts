// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "cosmos/crypto/keyring/v1/record.proto" (package "cosmos.crypto.keyring.v1", syntax proto3),// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BIP44Params } from "../../hd/v1/hd";
import { Any } from "../../../../google/protobuf/any";
/**
 * Record is used for representing a key in the keyring.
 *
 * @generated from protobuf message cosmos.crypto.keyring.v1.Record
 */
export interface Record {
    /**
     * name represents a name of Record
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * pub_key represents a public key in any format
     *
     * @generated from protobuf field: google.protobuf.Any pub_key = 2;
     */
    pubKey?: Any;
    /**
     * @generated from protobuf oneof: item
     */
    item: {
        oneofKind: "local";
        /**
         * local stores the public information about a locally stored key
         *
         * @generated from protobuf field: cosmos.crypto.keyring.v1.Record.Local local = 3;
         */
        local: Record_Local;
    } | {
        oneofKind: "ledger";
        /**
         * ledger stores the public information about a Ledger key
         *
         * @generated from protobuf field: cosmos.crypto.keyring.v1.Record.Ledger ledger = 4;
         */
        ledger: Record_Ledger;
    } | {
        oneofKind: "multi";
        /**
         * Multi does not store any information.
         *
         * @generated from protobuf field: cosmos.crypto.keyring.v1.Record.Multi multi = 5;
         */
        multi: Record_Multi;
    } | {
        oneofKind: "offline";
        /**
         * Offline does not store any information.
         *
         * @generated from protobuf field: cosmos.crypto.keyring.v1.Record.Offline offline = 6;
         */
        offline: Record_Offline;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Item is a keyring item stored in a keyring backend.
 * Local item
 *
 * @generated from protobuf message cosmos.crypto.keyring.v1.Record.Local
 */
export interface Record_Local {
    /**
     * @generated from protobuf field: google.protobuf.Any priv_key = 1;
     */
    privKey?: Any;
    /**
     * @generated from protobuf field: string priv_key_type = 2;
     */
    privKeyType: string;
}
/**
 * Ledger item
 *
 * @generated from protobuf message cosmos.crypto.keyring.v1.Record.Ledger
 */
export interface Record_Ledger {
    /**
     * @generated from protobuf field: cosmos.crypto.hd.v1.BIP44Params path = 1;
     */
    path?: BIP44Params;
}
/**
 * Multi item
 *
 * @generated from protobuf message cosmos.crypto.keyring.v1.Record.Multi
 */
export interface Record_Multi {
}
/**
 * Offline item
 *
 * @generated from protobuf message cosmos.crypto.keyring.v1.Record.Offline
 */
export interface Record_Offline {
}
// @generated message type with reflection information, may provide speed optimized methods
class Record$Type extends MessageType<Record> {
    constructor() {
        super("cosmos.crypto.keyring.v1.Record", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pub_key", kind: "message", T: () => Any },
            { no: 3, name: "local", kind: "message", oneof: "item", T: () => Record_Local },
            { no: 4, name: "ledger", kind: "message", oneof: "item", T: () => Record_Ledger },
            { no: 5, name: "multi", kind: "message", oneof: "item", T: () => Record_Multi },
            { no: 6, name: "offline", kind: "message", oneof: "item", T: () => Record_Offline }
        ]);
    }
    create(value?: PartialMessage<Record>): Record {
        const message = { name: "", item: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Record>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Record): Record {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* google.protobuf.Any pub_key */ 2:
                    message.pubKey = Any.internalBinaryRead(reader, reader.uint32(), options, message.pubKey);
                    break;
                case /* cosmos.crypto.keyring.v1.Record.Local local */ 3:
                    message.item = {
                        oneofKind: "local",
                        local: Record_Local.internalBinaryRead(reader, reader.uint32(), options, (message.item as any).local)
                    };
                    break;
                case /* cosmos.crypto.keyring.v1.Record.Ledger ledger */ 4:
                    message.item = {
                        oneofKind: "ledger",
                        ledger: Record_Ledger.internalBinaryRead(reader, reader.uint32(), options, (message.item as any).ledger)
                    };
                    break;
                case /* cosmos.crypto.keyring.v1.Record.Multi multi */ 5:
                    message.item = {
                        oneofKind: "multi",
                        multi: Record_Multi.internalBinaryRead(reader, reader.uint32(), options, (message.item as any).multi)
                    };
                    break;
                case /* cosmos.crypto.keyring.v1.Record.Offline offline */ 6:
                    message.item = {
                        oneofKind: "offline",
                        offline: Record_Offline.internalBinaryRead(reader, reader.uint32(), options, (message.item as any).offline)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Record, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* google.protobuf.Any pub_key = 2; */
        if (message.pubKey)
            Any.internalBinaryWrite(message.pubKey, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.crypto.keyring.v1.Record.Local local = 3; */
        if (message.item.oneofKind === "local")
            Record_Local.internalBinaryWrite(message.item.local, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.crypto.keyring.v1.Record.Ledger ledger = 4; */
        if (message.item.oneofKind === "ledger")
            Record_Ledger.internalBinaryWrite(message.item.ledger, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.crypto.keyring.v1.Record.Multi multi = 5; */
        if (message.item.oneofKind === "multi")
            Record_Multi.internalBinaryWrite(message.item.multi, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.crypto.keyring.v1.Record.Offline offline = 6; */
        if (message.item.oneofKind === "offline")
            Record_Offline.internalBinaryWrite(message.item.offline, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.crypto.keyring.v1.Record
 */
export const Record = new Record$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Record_Local$Type extends MessageType<Record_Local> {
    constructor() {
        super("cosmos.crypto.keyring.v1.Record.Local", [
            { no: 1, name: "priv_key", kind: "message", T: () => Any },
            { no: 2, name: "priv_key_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Record_Local>): Record_Local {
        const message = { privKeyType: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Record_Local>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Record_Local): Record_Local {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Any priv_key */ 1:
                    message.privKey = Any.internalBinaryRead(reader, reader.uint32(), options, message.privKey);
                    break;
                case /* string priv_key_type */ 2:
                    message.privKeyType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Record_Local, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Any priv_key = 1; */
        if (message.privKey)
            Any.internalBinaryWrite(message.privKey, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string priv_key_type = 2; */
        if (message.privKeyType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.privKeyType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.crypto.keyring.v1.Record.Local
 */
export const Record_Local = new Record_Local$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Record_Ledger$Type extends MessageType<Record_Ledger> {
    constructor() {
        super("cosmos.crypto.keyring.v1.Record.Ledger", [
            { no: 1, name: "path", kind: "message", T: () => BIP44Params }
        ]);
    }
    create(value?: PartialMessage<Record_Ledger>): Record_Ledger {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Record_Ledger>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Record_Ledger): Record_Ledger {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.crypto.hd.v1.BIP44Params path */ 1:
                    message.path = BIP44Params.internalBinaryRead(reader, reader.uint32(), options, message.path);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Record_Ledger, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.crypto.hd.v1.BIP44Params path = 1; */
        if (message.path)
            BIP44Params.internalBinaryWrite(message.path, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.crypto.keyring.v1.Record.Ledger
 */
export const Record_Ledger = new Record_Ledger$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Record_Multi$Type extends MessageType<Record_Multi> {
    constructor() {
        super("cosmos.crypto.keyring.v1.Record.Multi", []);
    }
    create(value?: PartialMessage<Record_Multi>): Record_Multi {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Record_Multi>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Record_Multi): Record_Multi {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Record_Multi, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.crypto.keyring.v1.Record.Multi
 */
export const Record_Multi = new Record_Multi$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Record_Offline$Type extends MessageType<Record_Offline> {
    constructor() {
        super("cosmos.crypto.keyring.v1.Record.Offline", []);
    }
    create(value?: PartialMessage<Record_Offline>): Record_Offline {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Record_Offline>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Record_Offline): Record_Offline {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Record_Offline, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.crypto.keyring.v1.Record.Offline
 */
export const Record_Offline = new Record_Offline$Type();
