// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "cosmos/authz/v1beta1/authz.proto" (package "cosmos.authz.v1beta1", syntax proto3),// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { Any } from "../../../google/protobuf/any";
/**
 * GenericAuthorization gives the grantee unrestricted permissions to execute
 * the provided method on behalf of the granter's account.
 *
 * @generated from protobuf message cosmos.authz.v1beta1.GenericAuthorization
 */
export interface GenericAuthorization {
    /**
     * Msg, identified by it's type URL, to grant unrestricted permissions to execute
     *
     * @generated from protobuf field: string msg = 1;
     */
    msg: string;
}
/**
 * Grant gives permissions to execute
 * the provide method with expiration time.
 *
 * @generated from protobuf message cosmos.authz.v1beta1.Grant
 */
export interface Grant {
    /**
     * @generated from protobuf field: google.protobuf.Any authorization = 1;
     */
    authorization?: Any;
    /**
     * time when the grant will expire and will be pruned. If null, then the grant
     * doesn't have a time expiration (other conditions  in `authorization`
     * may apply to invalidate the grant)
     *
     * @generated from protobuf field: google.protobuf.Timestamp expiration = 2;
     */
    expiration?: Timestamp;
}
/**
 * GrantAuthorization extends a grant with both the addresses of the grantee and granter.
 * It is used in genesis.proto and query.proto
 *
 * @generated from protobuf message cosmos.authz.v1beta1.GrantAuthorization
 */
export interface GrantAuthorization {
    /**
     * @generated from protobuf field: string granter = 1;
     */
    granter: string;
    /**
     * @generated from protobuf field: string grantee = 2;
     */
    grantee: string;
    /**
     * @generated from protobuf field: google.protobuf.Any authorization = 3;
     */
    authorization?: Any;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp expiration = 4;
     */
    expiration?: Timestamp;
}
/**
 * GrantQueueItem contains the list of TypeURL of a sdk.Msg.
 *
 * @generated from protobuf message cosmos.authz.v1beta1.GrantQueueItem
 */
export interface GrantQueueItem {
    /**
     * msg_type_urls contains the list of TypeURL of a sdk.Msg.
     *
     * @generated from protobuf field: repeated string msg_type_urls = 1;
     */
    msgTypeUrls: string[];
}
// @generated message type with reflection information, may provide speed optimized methods
class GenericAuthorization$Type extends MessageType<GenericAuthorization> {
    constructor() {
        super("cosmos.authz.v1beta1.GenericAuthorization", [
            { no: 1, name: "msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ], { "cosmos_proto.implements_interface": ["Authorization"] });
    }
    create(value?: PartialMessage<GenericAuthorization>): GenericAuthorization {
        const message = { msg: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GenericAuthorization>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenericAuthorization): GenericAuthorization {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string msg */ 1:
                    message.msg = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GenericAuthorization, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string msg = 1; */
        if (message.msg !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.msg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.authz.v1beta1.GenericAuthorization
 */
export const GenericAuthorization = new GenericAuthorization$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Grant$Type extends MessageType<Grant> {
    constructor() {
        super("cosmos.authz.v1beta1.Grant", [
            { no: 1, name: "authorization", kind: "message", T: () => Any, options: { "cosmos_proto.accepts_interface": "Authorization" } },
            { no: 2, name: "expiration", kind: "message", T: () => Timestamp, options: { "gogoproto.nullable": true, "gogoproto.stdtime": true } }
        ]);
    }
    create(value?: PartialMessage<Grant>): Grant {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Grant>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Grant): Grant {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Any authorization */ 1:
                    message.authorization = Any.internalBinaryRead(reader, reader.uint32(), options, message.authorization);
                    break;
                case /* google.protobuf.Timestamp expiration */ 2:
                    message.expiration = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expiration);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Grant, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Any authorization = 1; */
        if (message.authorization)
            Any.internalBinaryWrite(message.authorization, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp expiration = 2; */
        if (message.expiration)
            Timestamp.internalBinaryWrite(message.expiration, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.authz.v1beta1.Grant
 */
export const Grant = new Grant$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrantAuthorization$Type extends MessageType<GrantAuthorization> {
    constructor() {
        super("cosmos.authz.v1beta1.GrantAuthorization", [
            { no: 1, name: "granter", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "cosmos_proto.scalar": "cosmos.AddressString" } },
            { no: 2, name: "grantee", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "cosmos_proto.scalar": "cosmos.AddressString" } },
            { no: 3, name: "authorization", kind: "message", T: () => Any, options: { "cosmos_proto.accepts_interface": "Authorization" } },
            { no: 4, name: "expiration", kind: "message", T: () => Timestamp, options: { "gogoproto.stdtime": true } }
        ]);
    }
    create(value?: PartialMessage<GrantAuthorization>): GrantAuthorization {
        const message = { granter: "", grantee: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GrantAuthorization>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrantAuthorization): GrantAuthorization {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string granter */ 1:
                    message.granter = reader.string();
                    break;
                case /* string grantee */ 2:
                    message.grantee = reader.string();
                    break;
                case /* google.protobuf.Any authorization */ 3:
                    message.authorization = Any.internalBinaryRead(reader, reader.uint32(), options, message.authorization);
                    break;
                case /* google.protobuf.Timestamp expiration */ 4:
                    message.expiration = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expiration);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrantAuthorization, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string granter = 1; */
        if (message.granter !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.granter);
        /* string grantee = 2; */
        if (message.grantee !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.grantee);
        /* google.protobuf.Any authorization = 3; */
        if (message.authorization)
            Any.internalBinaryWrite(message.authorization, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp expiration = 4; */
        if (message.expiration)
            Timestamp.internalBinaryWrite(message.expiration, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.authz.v1beta1.GrantAuthorization
 */
export const GrantAuthorization = new GrantAuthorization$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrantQueueItem$Type extends MessageType<GrantQueueItem> {
    constructor() {
        super("cosmos.authz.v1beta1.GrantQueueItem", [
            { no: 1, name: "msg_type_urls", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GrantQueueItem>): GrantQueueItem {
        const message = { msgTypeUrls: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GrantQueueItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrantQueueItem): GrantQueueItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string msg_type_urls */ 1:
                    message.msgTypeUrls.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrantQueueItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string msg_type_urls = 1; */
        for (let i = 0; i < message.msgTypeUrls.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.msgTypeUrls[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.authz.v1beta1.GrantQueueItem
 */
export const GrantQueueItem = new GrantQueueItem$Type();
