// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "cosmos/nft/v1beta1/nft.proto" (package "cosmos.nft.v1beta1", syntax proto3),// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../../../google/protobuf/any";
/**
 * Class defines the class of the nft type.
 *
 * @generated from protobuf message cosmos.nft.v1beta1.Class
 */
export interface Class {
    /**
     * id defines the unique identifier of the NFT classification, similar to the contract address of ERC721
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * name defines the human-readable name of the NFT classification. Optional
     *
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * symbol is an abbreviated name for nft classification. Optional
     *
     * @generated from protobuf field: string symbol = 3;
     */
    symbol: string;
    /**
     * description is a brief description of nft classification. Optional
     *
     * @generated from protobuf field: string description = 4;
     */
    description: string;
    /**
     * uri for the class metadata stored off chain. It can define schema for Class and NFT `Data` attributes. Optional
     *
     * @generated from protobuf field: string uri = 5;
     */
    uri: string;
    /**
     * uri_hash is a hash of the document pointed by uri. Optional
     *
     * @generated from protobuf field: string uri_hash = 6;
     */
    uriHash: string;
    /**
     * data is the app specific metadata of the NFT class. Optional
     *
     * @generated from protobuf field: google.protobuf.Any data = 7;
     */
    data?: Any;
}
/**
 * NFT defines the NFT.
 *
 * @generated from protobuf message cosmos.nft.v1beta1.NFT
 */
export interface NFT {
    /**
     * class_id associated with the NFT, similar to the contract address of ERC721
     *
     * @generated from protobuf field: string class_id = 1;
     */
    classId: string;
    /**
     * id is a unique identifier of the NFT
     *
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * uri for the NFT metadata stored off chain
     *
     * @generated from protobuf field: string uri = 3;
     */
    uri: string;
    /**
     * uri_hash is a hash of the document pointed by uri
     *
     * @generated from protobuf field: string uri_hash = 4;
     */
    uriHash: string;
    /**
     * data is an app specific data of the NFT. Optional
     *
     * @generated from protobuf field: google.protobuf.Any data = 10;
     */
    data?: Any;
}
// @generated message type with reflection information, may provide speed optimized methods
class Class$Type extends MessageType<Class> {
    constructor() {
        super("cosmos.nft.v1beta1.Class", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "symbol", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "uri_hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "data", kind: "message", T: () => Any }
        ]);
    }
    create(value?: PartialMessage<Class>): Class {
        const message = { id: "", name: "", symbol: "", description: "", uri: "", uriHash: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Class>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Class): Class {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string symbol */ 3:
                    message.symbol = reader.string();
                    break;
                case /* string description */ 4:
                    message.description = reader.string();
                    break;
                case /* string uri */ 5:
                    message.uri = reader.string();
                    break;
                case /* string uri_hash */ 6:
                    message.uriHash = reader.string();
                    break;
                case /* google.protobuf.Any data */ 7:
                    message.data = Any.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Class, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string symbol = 3; */
        if (message.symbol !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.symbol);
        /* string description = 4; */
        if (message.description !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        /* string uri = 5; */
        if (message.uri !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.uri);
        /* string uri_hash = 6; */
        if (message.uriHash !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.uriHash);
        /* google.protobuf.Any data = 7; */
        if (message.data)
            Any.internalBinaryWrite(message.data, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.nft.v1beta1.Class
 */
export const Class = new Class$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NFT$Type extends MessageType<NFT> {
    constructor() {
        super("cosmos.nft.v1beta1.NFT", [
            { no: 1, name: "class_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "uri", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "uri_hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "data", kind: "message", T: () => Any }
        ]);
    }
    create(value?: PartialMessage<NFT>): NFT {
        const message = { classId: "", id: "", uri: "", uriHash: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NFT>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NFT): NFT {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string class_id */ 1:
                    message.classId = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* string uri */ 3:
                    message.uri = reader.string();
                    break;
                case /* string uri_hash */ 4:
                    message.uriHash = reader.string();
                    break;
                case /* google.protobuf.Any data */ 10:
                    message.data = Any.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NFT, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string class_id = 1; */
        if (message.classId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.classId);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* string uri = 3; */
        if (message.uri !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.uri);
        /* string uri_hash = 4; */
        if (message.uriHash !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.uriHash);
        /* google.protobuf.Any data = 10; */
        if (message.data)
            Any.internalBinaryWrite(message.data, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.nft.v1beta1.NFT
 */
export const NFT = new NFT$Type();
