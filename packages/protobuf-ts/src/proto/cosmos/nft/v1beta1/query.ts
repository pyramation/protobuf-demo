// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "cosmos/nft/v1beta1/query.proto" (package "cosmos.nft.v1beta1", syntax proto3),// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Class } from "./nft";
import { PageResponse } from "../../base/query/v1beta1/pagination";
import { NFT } from "./nft";
import { PageRequest } from "../../base/query/v1beta1/pagination";
/**
 * QueryBalanceRequest is the request type for the Query/Balance RPC method
 *
 * @generated from protobuf message cosmos.nft.v1beta1.QueryBalanceRequest
 */
export interface QueryBalanceRequest {
    /**
     * @generated from protobuf field: string class_id = 1;
     */
    classId: string;
    /**
     * @generated from protobuf field: string owner = 2;
     */
    owner: string;
}
/**
 * QueryBalanceResponse is the response type for the Query/Balance RPC method
 *
 * @generated from protobuf message cosmos.nft.v1beta1.QueryBalanceResponse
 */
export interface QueryBalanceResponse {
    /**
     * @generated from protobuf field: uint64 amount = 1;
     */
    amount: bigint;
}
/**
 * QueryOwnerRequest is the request type for the Query/Owner RPC method
 *
 * @generated from protobuf message cosmos.nft.v1beta1.QueryOwnerRequest
 */
export interface QueryOwnerRequest {
    /**
     * @generated from protobuf field: string class_id = 1;
     */
    classId: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
}
/**
 * QueryOwnerResponse is the response type for the Query/Owner RPC method
 *
 * @generated from protobuf message cosmos.nft.v1beta1.QueryOwnerResponse
 */
export interface QueryOwnerResponse {
    /**
     * @generated from protobuf field: string owner = 1;
     */
    owner: string;
}
/**
 * QuerySupplyRequest is the request type for the Query/Supply RPC method
 *
 * @generated from protobuf message cosmos.nft.v1beta1.QuerySupplyRequest
 */
export interface QuerySupplyRequest {
    /**
     * @generated from protobuf field: string class_id = 1;
     */
    classId: string;
}
/**
 * QuerySupplyResponse is the response type for the Query/Supply RPC method
 *
 * @generated from protobuf message cosmos.nft.v1beta1.QuerySupplyResponse
 */
export interface QuerySupplyResponse {
    /**
     * @generated from protobuf field: uint64 amount = 1;
     */
    amount: bigint;
}
/**
 * QueryNFTstRequest is the request type for the Query/NFTs RPC method
 *
 * @generated from protobuf message cosmos.nft.v1beta1.QueryNFTsRequest
 */
export interface QueryNFTsRequest {
    /**
     * @generated from protobuf field: string class_id = 1;
     */
    classId: string;
    /**
     * @generated from protobuf field: string owner = 2;
     */
    owner: string;
    /**
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 3;
     */
    pagination?: PageRequest;
}
/**
 * QueryNFTsResponse is the response type for the Query/NFTs RPC methods
 *
 * @generated from protobuf message cosmos.nft.v1beta1.QueryNFTsResponse
 */
export interface QueryNFTsResponse {
    /**
     * @generated from protobuf field: repeated cosmos.nft.v1beta1.NFT nfts = 1;
     */
    nfts: NFT[];
    /**
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
     */
    pagination?: PageResponse;
}
/**
 * QueryNFTRequest is the request type for the Query/NFT RPC method
 *
 * @generated from protobuf message cosmos.nft.v1beta1.QueryNFTRequest
 */
export interface QueryNFTRequest {
    /**
     * @generated from protobuf field: string class_id = 1;
     */
    classId: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
}
/**
 * QueryNFTResponse is the response type for the Query/NFT RPC method
 *
 * @generated from protobuf message cosmos.nft.v1beta1.QueryNFTResponse
 */
export interface QueryNFTResponse {
    /**
     * @generated from protobuf field: cosmos.nft.v1beta1.NFT nft = 1;
     */
    nft?: NFT;
}
/**
 * QueryClassRequest is the request type for the Query/Class RPC method
 *
 * @generated from protobuf message cosmos.nft.v1beta1.QueryClassRequest
 */
export interface QueryClassRequest {
    /**
     * @generated from protobuf field: string class_id = 1;
     */
    classId: string;
}
/**
 * QueryClassResponse is the response type for the Query/Class RPC method
 *
 * @generated from protobuf message cosmos.nft.v1beta1.QueryClassResponse
 */
export interface QueryClassResponse {
    /**
     * @generated from protobuf field: cosmos.nft.v1beta1.Class class = 1;
     */
    class?: Class;
}
/**
 * QueryClassesRequest is the request type for the Query/Classes RPC method
 *
 * @generated from protobuf message cosmos.nft.v1beta1.QueryClassesRequest
 */
export interface QueryClassesRequest {
    /**
     * pagination defines an optional pagination for the request.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
     */
    pagination?: PageRequest;
}
/**
 * QueryClassesResponse is the response type for the Query/Classes RPC method
 *
 * @generated from protobuf message cosmos.nft.v1beta1.QueryClassesResponse
 */
export interface QueryClassesResponse {
    /**
     * @generated from protobuf field: repeated cosmos.nft.v1beta1.Class classes = 1;
     */
    classes: Class[];
    /**
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
     */
    pagination?: PageResponse;
}
// @generated message type with reflection information, may provide speed optimized methods
class QueryBalanceRequest$Type extends MessageType<QueryBalanceRequest> {
    constructor() {
        super("cosmos.nft.v1beta1.QueryBalanceRequest", [
            { no: 1, name: "class_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "owner", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryBalanceRequest>): QueryBalanceRequest {
        const message = { classId: "", owner: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryBalanceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryBalanceRequest): QueryBalanceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string class_id */ 1:
                    message.classId = reader.string();
                    break;
                case /* string owner */ 2:
                    message.owner = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryBalanceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string class_id = 1; */
        if (message.classId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.classId);
        /* string owner = 2; */
        if (message.owner !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.owner);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.nft.v1beta1.QueryBalanceRequest
 */
export const QueryBalanceRequest = new QueryBalanceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryBalanceResponse$Type extends MessageType<QueryBalanceResponse> {
    constructor() {
        super("cosmos.nft.v1beta1.QueryBalanceResponse", [
            { no: 1, name: "amount", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<QueryBalanceResponse>): QueryBalanceResponse {
        const message = { amount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryBalanceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryBalanceResponse): QueryBalanceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 amount */ 1:
                    message.amount = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryBalanceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 amount = 1; */
        if (message.amount !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.amount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.nft.v1beta1.QueryBalanceResponse
 */
export const QueryBalanceResponse = new QueryBalanceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryOwnerRequest$Type extends MessageType<QueryOwnerRequest> {
    constructor() {
        super("cosmos.nft.v1beta1.QueryOwnerRequest", [
            { no: 1, name: "class_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryOwnerRequest>): QueryOwnerRequest {
        const message = { classId: "", id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryOwnerRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryOwnerRequest): QueryOwnerRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string class_id */ 1:
                    message.classId = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryOwnerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string class_id = 1; */
        if (message.classId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.classId);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.nft.v1beta1.QueryOwnerRequest
 */
export const QueryOwnerRequest = new QueryOwnerRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryOwnerResponse$Type extends MessageType<QueryOwnerResponse> {
    constructor() {
        super("cosmos.nft.v1beta1.QueryOwnerResponse", [
            { no: 1, name: "owner", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryOwnerResponse>): QueryOwnerResponse {
        const message = { owner: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryOwnerResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryOwnerResponse): QueryOwnerResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string owner */ 1:
                    message.owner = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryOwnerResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string owner = 1; */
        if (message.owner !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.owner);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.nft.v1beta1.QueryOwnerResponse
 */
export const QueryOwnerResponse = new QueryOwnerResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuerySupplyRequest$Type extends MessageType<QuerySupplyRequest> {
    constructor() {
        super("cosmos.nft.v1beta1.QuerySupplyRequest", [
            { no: 1, name: "class_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QuerySupplyRequest>): QuerySupplyRequest {
        const message = { classId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuerySupplyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuerySupplyRequest): QuerySupplyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string class_id */ 1:
                    message.classId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuerySupplyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string class_id = 1; */
        if (message.classId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.classId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.nft.v1beta1.QuerySupplyRequest
 */
export const QuerySupplyRequest = new QuerySupplyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuerySupplyResponse$Type extends MessageType<QuerySupplyResponse> {
    constructor() {
        super("cosmos.nft.v1beta1.QuerySupplyResponse", [
            { no: 1, name: "amount", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<QuerySupplyResponse>): QuerySupplyResponse {
        const message = { amount: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuerySupplyResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuerySupplyResponse): QuerySupplyResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 amount */ 1:
                    message.amount = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuerySupplyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 amount = 1; */
        if (message.amount !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.amount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.nft.v1beta1.QuerySupplyResponse
 */
export const QuerySupplyResponse = new QuerySupplyResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryNFTsRequest$Type extends MessageType<QueryNFTsRequest> {
    constructor() {
        super("cosmos.nft.v1beta1.QueryNFTsRequest", [
            { no: 1, name: "class_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "owner", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value?: PartialMessage<QueryNFTsRequest>): QueryNFTsRequest {
        const message = { classId: "", owner: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryNFTsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryNFTsRequest): QueryNFTsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string class_id */ 1:
                    message.classId = reader.string();
                    break;
                case /* string owner */ 2:
                    message.owner = reader.string();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 3:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryNFTsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string class_id = 1; */
        if (message.classId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.classId);
        /* string owner = 2; */
        if (message.owner !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.owner);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 3; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.nft.v1beta1.QueryNFTsRequest
 */
export const QueryNFTsRequest = new QueryNFTsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryNFTsResponse$Type extends MessageType<QueryNFTsResponse> {
    constructor() {
        super("cosmos.nft.v1beta1.QueryNFTsResponse", [
            { no: 1, name: "nfts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => NFT },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value?: PartialMessage<QueryNFTsResponse>): QueryNFTsResponse {
        const message = { nfts: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryNFTsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryNFTsResponse): QueryNFTsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.nft.v1beta1.NFT nfts */ 1:
                    message.nfts.push(NFT.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryNFTsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated cosmos.nft.v1beta1.NFT nfts = 1; */
        for (let i = 0; i < message.nfts.length; i++)
            NFT.internalBinaryWrite(message.nfts[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.nft.v1beta1.QueryNFTsResponse
 */
export const QueryNFTsResponse = new QueryNFTsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryNFTRequest$Type extends MessageType<QueryNFTRequest> {
    constructor() {
        super("cosmos.nft.v1beta1.QueryNFTRequest", [
            { no: 1, name: "class_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryNFTRequest>): QueryNFTRequest {
        const message = { classId: "", id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryNFTRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryNFTRequest): QueryNFTRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string class_id */ 1:
                    message.classId = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryNFTRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string class_id = 1; */
        if (message.classId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.classId);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.nft.v1beta1.QueryNFTRequest
 */
export const QueryNFTRequest = new QueryNFTRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryNFTResponse$Type extends MessageType<QueryNFTResponse> {
    constructor() {
        super("cosmos.nft.v1beta1.QueryNFTResponse", [
            { no: 1, name: "nft", kind: "message", T: () => NFT }
        ]);
    }
    create(value?: PartialMessage<QueryNFTResponse>): QueryNFTResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryNFTResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryNFTResponse): QueryNFTResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.nft.v1beta1.NFT nft */ 1:
                    message.nft = NFT.internalBinaryRead(reader, reader.uint32(), options, message.nft);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryNFTResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.nft.v1beta1.NFT nft = 1; */
        if (message.nft)
            NFT.internalBinaryWrite(message.nft, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.nft.v1beta1.QueryNFTResponse
 */
export const QueryNFTResponse = new QueryNFTResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryClassRequest$Type extends MessageType<QueryClassRequest> {
    constructor() {
        super("cosmos.nft.v1beta1.QueryClassRequest", [
            { no: 1, name: "class_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryClassRequest>): QueryClassRequest {
        const message = { classId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryClassRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryClassRequest): QueryClassRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string class_id */ 1:
                    message.classId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryClassRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string class_id = 1; */
        if (message.classId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.classId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.nft.v1beta1.QueryClassRequest
 */
export const QueryClassRequest = new QueryClassRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryClassResponse$Type extends MessageType<QueryClassResponse> {
    constructor() {
        super("cosmos.nft.v1beta1.QueryClassResponse", [
            { no: 1, name: "class", kind: "message", T: () => Class }
        ]);
    }
    create(value?: PartialMessage<QueryClassResponse>): QueryClassResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryClassResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryClassResponse): QueryClassResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.nft.v1beta1.Class class */ 1:
                    message.class = Class.internalBinaryRead(reader, reader.uint32(), options, message.class);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryClassResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.nft.v1beta1.Class class = 1; */
        if (message.class)
            Class.internalBinaryWrite(message.class, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.nft.v1beta1.QueryClassResponse
 */
export const QueryClassResponse = new QueryClassResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryClassesRequest$Type extends MessageType<QueryClassesRequest> {
    constructor() {
        super("cosmos.nft.v1beta1.QueryClassesRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value?: PartialMessage<QueryClassesRequest>): QueryClassesRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryClassesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryClassesRequest): QueryClassesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 1:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryClassesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.base.query.v1beta1.PageRequest pagination = 1; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.nft.v1beta1.QueryClassesRequest
 */
export const QueryClassesRequest = new QueryClassesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryClassesResponse$Type extends MessageType<QueryClassesResponse> {
    constructor() {
        super("cosmos.nft.v1beta1.QueryClassesResponse", [
            { no: 1, name: "classes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Class },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value?: PartialMessage<QueryClassesResponse>): QueryClassesResponse {
        const message = { classes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryClassesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryClassesResponse): QueryClassesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated cosmos.nft.v1beta1.Class classes */ 1:
                    message.classes.push(Class.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryClassesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated cosmos.nft.v1beta1.Class classes = 1; */
        for (let i = 0; i < message.classes.length; i++)
            Class.internalBinaryWrite(message.classes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.nft.v1beta1.QueryClassesResponse
 */
export const QueryClassesResponse = new QueryClassesResponse$Type();
/**
 * @generated ServiceType for protobuf service cosmos.nft.v1beta1.Query
 */
export const Query = new ServiceType("cosmos.nft.v1beta1.Query", [
    { name: "Balance", options: { "google.api.http": { get: "/cosmos/nft/v1beta1/balance/{owner}/{class_id}" } }, I: QueryBalanceRequest, O: QueryBalanceResponse },
    { name: "Owner", options: { "google.api.http": { get: "/cosmos/nft/v1beta1/owner/{class_id}/{id}" } }, I: QueryOwnerRequest, O: QueryOwnerResponse },
    { name: "Supply", options: { "google.api.http": { get: "/cosmos/nft/v1beta1/supply/{class_id}" } }, I: QuerySupplyRequest, O: QuerySupplyResponse },
    { name: "NFTs", options: { "google.api.http": { get: "/cosmos/nft/v1beta1/nfts" } }, I: QueryNFTsRequest, O: QueryNFTsResponse },
    { name: "NFT", options: { "google.api.http": { get: "/cosmos/nft/v1beta1/nfts/{class_id}/{id}" } }, I: QueryNFTRequest, O: QueryNFTResponse },
    { name: "Class", options: { "google.api.http": { get: "/cosmos/nft/v1beta1/classes/{class_id}" } }, I: QueryClassRequest, O: QueryClassResponse },
    { name: "Classes", options: { "google.api.http": { get: "/cosmos/nft/v1beta1/classes" } }, I: QueryClassesRequest, O: QueryClassesResponse }
]);
