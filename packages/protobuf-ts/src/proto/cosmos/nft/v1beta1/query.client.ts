// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "cosmos/nft/v1beta1/query.proto" (package "cosmos.nft.v1beta1", syntax proto3),// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Query } from "./query";
import type { QueryClassesResponse } from "./query";
import type { QueryClassesRequest } from "./query";
import type { QueryClassResponse } from "./query";
import type { QueryClassRequest } from "./query";
import type { QueryNFTResponse } from "./query";
import type { QueryNFTRequest } from "./query";
import type { QueryNFTsResponse } from "./query";
import type { QueryNFTsRequest } from "./query";
import type { QuerySupplyResponse } from "./query";
import type { QuerySupplyRequest } from "./query";
import type { QueryOwnerResponse } from "./query";
import type { QueryOwnerRequest } from "./query";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { QueryBalanceResponse } from "./query";
import type { QueryBalanceRequest } from "./query";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service cosmos.nft.v1beta1.Query
 */
export interface IQueryClient {
    /**
     * Balance queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721
     *
     * @generated from protobuf rpc: Balance(cosmos.nft.v1beta1.QueryBalanceRequest) returns (cosmos.nft.v1beta1.QueryBalanceResponse);
     */
    balance(input: QueryBalanceRequest, options?: RpcOptions): UnaryCall<QueryBalanceRequest, QueryBalanceResponse>;
    /**
     * Owner queries the owner of the NFT based on its class and id, same as ownerOf in ERC721
     *
     * @generated from protobuf rpc: Owner(cosmos.nft.v1beta1.QueryOwnerRequest) returns (cosmos.nft.v1beta1.QueryOwnerResponse);
     */
    owner(input: QueryOwnerRequest, options?: RpcOptions): UnaryCall<QueryOwnerRequest, QueryOwnerResponse>;
    /**
     * Supply queries the number of NFTs from the given class, same as totalSupply of ERC721.
     *
     * @generated from protobuf rpc: Supply(cosmos.nft.v1beta1.QuerySupplyRequest) returns (cosmos.nft.v1beta1.QuerySupplyResponse);
     */
    supply(input: QuerySupplyRequest, options?: RpcOptions): UnaryCall<QuerySupplyRequest, QuerySupplyResponse>;
    /**
     * NFTs queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in
     * ERC721Enumerable
     *
     * @generated from protobuf rpc: NFTs(cosmos.nft.v1beta1.QueryNFTsRequest) returns (cosmos.nft.v1beta1.QueryNFTsResponse);
     */
    nFTs(input: QueryNFTsRequest, options?: RpcOptions): UnaryCall<QueryNFTsRequest, QueryNFTsResponse>;
    /**
     * NFT queries an NFT based on its class and id.
     *
     * @generated from protobuf rpc: NFT(cosmos.nft.v1beta1.QueryNFTRequest) returns (cosmos.nft.v1beta1.QueryNFTResponse);
     */
    nFT(input: QueryNFTRequest, options?: RpcOptions): UnaryCall<QueryNFTRequest, QueryNFTResponse>;
    /**
     * Class queries an NFT class based on its id
     *
     * @generated from protobuf rpc: Class(cosmos.nft.v1beta1.QueryClassRequest) returns (cosmos.nft.v1beta1.QueryClassResponse);
     */
    class(input: QueryClassRequest, options?: RpcOptions): UnaryCall<QueryClassRequest, QueryClassResponse>;
    /**
     * Classes queries all NFT classes
     *
     * @generated from protobuf rpc: Classes(cosmos.nft.v1beta1.QueryClassesRequest) returns (cosmos.nft.v1beta1.QueryClassesResponse);
     */
    classes(input: QueryClassesRequest, options?: RpcOptions): UnaryCall<QueryClassesRequest, QueryClassesResponse>;
}
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service cosmos.nft.v1beta1.Query
 */
export class QueryClient implements IQueryClient, ServiceInfo {
    typeName = Query.typeName;
    methods = Query.methods;
    options = Query.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Balance queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721
     *
     * @generated from protobuf rpc: Balance(cosmos.nft.v1beta1.QueryBalanceRequest) returns (cosmos.nft.v1beta1.QueryBalanceResponse);
     */
    balance(input: QueryBalanceRequest, options?: RpcOptions): UnaryCall<QueryBalanceRequest, QueryBalanceResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryBalanceRequest, QueryBalanceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Owner queries the owner of the NFT based on its class and id, same as ownerOf in ERC721
     *
     * @generated from protobuf rpc: Owner(cosmos.nft.v1beta1.QueryOwnerRequest) returns (cosmos.nft.v1beta1.QueryOwnerResponse);
     */
    owner(input: QueryOwnerRequest, options?: RpcOptions): UnaryCall<QueryOwnerRequest, QueryOwnerResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryOwnerRequest, QueryOwnerResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Supply queries the number of NFTs from the given class, same as totalSupply of ERC721.
     *
     * @generated from protobuf rpc: Supply(cosmos.nft.v1beta1.QuerySupplyRequest) returns (cosmos.nft.v1beta1.QuerySupplyResponse);
     */
    supply(input: QuerySupplyRequest, options?: RpcOptions): UnaryCall<QuerySupplyRequest, QuerySupplyResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<QuerySupplyRequest, QuerySupplyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * NFTs queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in
     * ERC721Enumerable
     *
     * @generated from protobuf rpc: NFTs(cosmos.nft.v1beta1.QueryNFTsRequest) returns (cosmos.nft.v1beta1.QueryNFTsResponse);
     */
    nFTs(input: QueryNFTsRequest, options?: RpcOptions): UnaryCall<QueryNFTsRequest, QueryNFTsResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryNFTsRequest, QueryNFTsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * NFT queries an NFT based on its class and id.
     *
     * @generated from protobuf rpc: NFT(cosmos.nft.v1beta1.QueryNFTRequest) returns (cosmos.nft.v1beta1.QueryNFTResponse);
     */
    nFT(input: QueryNFTRequest, options?: RpcOptions): UnaryCall<QueryNFTRequest, QueryNFTResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryNFTRequest, QueryNFTResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Class queries an NFT class based on its id
     *
     * @generated from protobuf rpc: Class(cosmos.nft.v1beta1.QueryClassRequest) returns (cosmos.nft.v1beta1.QueryClassResponse);
     */
    class(input: QueryClassRequest, options?: RpcOptions): UnaryCall<QueryClassRequest, QueryClassResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryClassRequest, QueryClassResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Classes queries all NFT classes
     *
     * @generated from protobuf rpc: Classes(cosmos.nft.v1beta1.QueryClassesRequest) returns (cosmos.nft.v1beta1.QueryClassesResponse);
     */
    classes(input: QueryClassesRequest, options?: RpcOptions): UnaryCall<QueryClassesRequest, QueryClassesResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryClassesRequest, QueryClassesResponse>("unary", this._transport, method, opt, input);
    }
}
