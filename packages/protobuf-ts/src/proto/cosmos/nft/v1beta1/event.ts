// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "cosmos/nft/v1beta1/event.proto" (package "cosmos.nft.v1beta1", syntax proto3),// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * EventSend is emitted on Msg/Send
 *
 * @generated from protobuf message cosmos.nft.v1beta1.EventSend
 */
export interface EventSend {
    /**
     * @generated from protobuf field: string class_id = 1;
     */
    classId: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: string sender = 3;
     */
    sender: string;
    /**
     * @generated from protobuf field: string receiver = 4;
     */
    receiver: string;
}
/**
 * EventMint is emitted on Mint
 *
 * @generated from protobuf message cosmos.nft.v1beta1.EventMint
 */
export interface EventMint {
    /**
     * @generated from protobuf field: string class_id = 1;
     */
    classId: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: string owner = 3;
     */
    owner: string;
}
/**
 * EventBurn is emitted on Burn
 *
 * @generated from protobuf message cosmos.nft.v1beta1.EventBurn
 */
export interface EventBurn {
    /**
     * @generated from protobuf field: string class_id = 1;
     */
    classId: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: string owner = 3;
     */
    owner: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class EventSend$Type extends MessageType<EventSend> {
    constructor() {
        super("cosmos.nft.v1beta1.EventSend", [
            { no: 1, name: "class_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sender", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "receiver", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EventSend>): EventSend {
        const message = { classId: "", id: "", sender: "", receiver: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EventSend>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventSend): EventSend {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string class_id */ 1:
                    message.classId = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* string sender */ 3:
                    message.sender = reader.string();
                    break;
                case /* string receiver */ 4:
                    message.receiver = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EventSend, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string class_id = 1; */
        if (message.classId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.classId);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* string sender = 3; */
        if (message.sender !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.sender);
        /* string receiver = 4; */
        if (message.receiver !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.receiver);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.nft.v1beta1.EventSend
 */
export const EventSend = new EventSend$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventMint$Type extends MessageType<EventMint> {
    constructor() {
        super("cosmos.nft.v1beta1.EventMint", [
            { no: 1, name: "class_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "owner", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EventMint>): EventMint {
        const message = { classId: "", id: "", owner: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EventMint>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventMint): EventMint {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string class_id */ 1:
                    message.classId = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* string owner */ 3:
                    message.owner = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EventMint, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string class_id = 1; */
        if (message.classId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.classId);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* string owner = 3; */
        if (message.owner !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.owner);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.nft.v1beta1.EventMint
 */
export const EventMint = new EventMint$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventBurn$Type extends MessageType<EventBurn> {
    constructor() {
        super("cosmos.nft.v1beta1.EventBurn", [
            { no: 1, name: "class_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "owner", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EventBurn>): EventBurn {
        const message = { classId: "", id: "", owner: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EventBurn>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventBurn): EventBurn {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string class_id */ 1:
                    message.classId = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* string owner */ 3:
                    message.owner = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EventBurn, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string class_id = 1; */
        if (message.classId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.classId);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* string owner = 3; */
        if (message.owner !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.owner);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.nft.v1beta1.EventBurn
 */
export const EventBurn = new EventBurn$Type();
