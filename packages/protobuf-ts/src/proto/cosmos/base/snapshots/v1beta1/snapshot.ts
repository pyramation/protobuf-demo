// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "cosmos/base/snapshots/v1beta1/snapshot.proto" (package "cosmos.base.snapshots.v1beta1", syntax proto3),// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Snapshot contains Tendermint state sync snapshot info.
 *
 * @generated from protobuf message cosmos.base.snapshots.v1beta1.Snapshot
 */
export interface Snapshot {
    /**
     * @generated from protobuf field: uint64 height = 1;
     */
    height: bigint;
    /**
     * @generated from protobuf field: uint32 format = 2;
     */
    format: number;
    /**
     * @generated from protobuf field: uint32 chunks = 3;
     */
    chunks: number;
    /**
     * @generated from protobuf field: bytes hash = 4;
     */
    hash: Uint8Array;
    /**
     * @generated from protobuf field: cosmos.base.snapshots.v1beta1.Metadata metadata = 5;
     */
    metadata?: Metadata;
}
/**
 * Metadata contains SDK-specific snapshot metadata.
 *
 * @generated from protobuf message cosmos.base.snapshots.v1beta1.Metadata
 */
export interface Metadata {
    /**
     * @generated from protobuf field: repeated bytes chunk_hashes = 1;
     */
    chunkHashes: Uint8Array[]; // SHA-256 chunk hashes
}
/**
 * SnapshotItem is an item contained in a rootmulti.Store snapshot.
 *
 * @generated from protobuf message cosmos.base.snapshots.v1beta1.SnapshotItem
 */
export interface SnapshotItem {
    /**
     * @generated from protobuf oneof: item
     */
    item: {
        oneofKind: "store";
        /**
         * @generated from protobuf field: cosmos.base.snapshots.v1beta1.SnapshotStoreItem store = 1;
         */
        store: SnapshotStoreItem;
    } | {
        oneofKind: "iavl";
        /**
         * @generated from protobuf field: cosmos.base.snapshots.v1beta1.SnapshotIAVLItem iavl = 2;
         */
        iavl: SnapshotIAVLItem;
    } | {
        oneofKind: "extension";
        /**
         * @generated from protobuf field: cosmos.base.snapshots.v1beta1.SnapshotExtensionMeta extension = 3;
         */
        extension: SnapshotExtensionMeta;
    } | {
        oneofKind: "extensionPayload";
        /**
         * @generated from protobuf field: cosmos.base.snapshots.v1beta1.SnapshotExtensionPayload extension_payload = 4;
         */
        extensionPayload: SnapshotExtensionPayload;
    } | {
        oneofKind: "kv";
        /**
         * @generated from protobuf field: cosmos.base.snapshots.v1beta1.SnapshotKVItem kv = 5;
         */
        kv: SnapshotKVItem;
    } | {
        oneofKind: "schema";
        /**
         * @generated from protobuf field: cosmos.base.snapshots.v1beta1.SnapshotSchema schema = 6;
         */
        schema: SnapshotSchema;
    } | {
        oneofKind: undefined;
    };
}
/**
 * SnapshotStoreItem contains metadata about a snapshotted store.
 *
 * @generated from protobuf message cosmos.base.snapshots.v1beta1.SnapshotStoreItem
 */
export interface SnapshotStoreItem {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * SnapshotIAVLItem is an exported IAVL node.
 *
 * @generated from protobuf message cosmos.base.snapshots.v1beta1.SnapshotIAVLItem
 */
export interface SnapshotIAVLItem {
    /**
     * @generated from protobuf field: bytes key = 1;
     */
    key: Uint8Array;
    /**
     * @generated from protobuf field: bytes value = 2;
     */
    value: Uint8Array;
    /**
     * version is block height
     *
     * @generated from protobuf field: int64 version = 3;
     */
    version: bigint;
    /**
     * height is depth of the tree.
     *
     * @generated from protobuf field: int32 height = 4;
     */
    height: number;
}
/**
 * SnapshotExtensionMeta contains metadata about an external snapshotter.
 *
 * @generated from protobuf message cosmos.base.snapshots.v1beta1.SnapshotExtensionMeta
 */
export interface SnapshotExtensionMeta {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: uint32 format = 2;
     */
    format: number;
}
/**
 * SnapshotExtensionPayload contains payloads of an external snapshotter.
 *
 * @generated from protobuf message cosmos.base.snapshots.v1beta1.SnapshotExtensionPayload
 */
export interface SnapshotExtensionPayload {
    /**
     * @generated from protobuf field: bytes payload = 1;
     */
    payload: Uint8Array;
}
/**
 * SnapshotKVItem is an exported Key/Value Pair
 *
 * @generated from protobuf message cosmos.base.snapshots.v1beta1.SnapshotKVItem
 */
export interface SnapshotKVItem {
    /**
     * @generated from protobuf field: bytes key = 1;
     */
    key: Uint8Array;
    /**
     * @generated from protobuf field: bytes value = 2;
     */
    value: Uint8Array;
}
/**
 * SnapshotSchema is an exported schema of smt store
 *
 * @generated from protobuf message cosmos.base.snapshots.v1beta1.SnapshotSchema
 */
export interface SnapshotSchema {
    /**
     * @generated from protobuf field: repeated bytes keys = 1;
     */
    keys: Uint8Array[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Snapshot$Type extends MessageType<Snapshot> {
    constructor() {
        super("cosmos.base.snapshots.v1beta1.Snapshot", [
            { no: 1, name: "height", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "format", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "chunks", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "hash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 5, name: "metadata", kind: "message", T: () => Metadata, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<Snapshot>): Snapshot {
        const message = { height: 0n, format: 0, chunks: 0, hash: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Snapshot>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Snapshot): Snapshot {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 height */ 1:
                    message.height = reader.uint64().toBigInt();
                    break;
                case /* uint32 format */ 2:
                    message.format = reader.uint32();
                    break;
                case /* uint32 chunks */ 3:
                    message.chunks = reader.uint32();
                    break;
                case /* bytes hash */ 4:
                    message.hash = reader.bytes();
                    break;
                case /* cosmos.base.snapshots.v1beta1.Metadata metadata */ 5:
                    message.metadata = Metadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Snapshot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 height = 1; */
        if (message.height !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.height);
        /* uint32 format = 2; */
        if (message.format !== 0)
            writer.tag(2, WireType.Varint).uint32(message.format);
        /* uint32 chunks = 3; */
        if (message.chunks !== 0)
            writer.tag(3, WireType.Varint).uint32(message.chunks);
        /* bytes hash = 4; */
        if (message.hash.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.hash);
        /* cosmos.base.snapshots.v1beta1.Metadata metadata = 5; */
        if (message.metadata)
            Metadata.internalBinaryWrite(message.metadata, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.snapshots.v1beta1.Snapshot
 */
export const Snapshot = new Snapshot$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Metadata$Type extends MessageType<Metadata> {
    constructor() {
        super("cosmos.base.snapshots.v1beta1.Metadata", [
            { no: 1, name: "chunk_hashes", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Metadata>): Metadata {
        const message = { chunkHashes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Metadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Metadata): Metadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bytes chunk_hashes */ 1:
                    message.chunkHashes.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Metadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bytes chunk_hashes = 1; */
        for (let i = 0; i < message.chunkHashes.length; i++)
            writer.tag(1, WireType.LengthDelimited).bytes(message.chunkHashes[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.snapshots.v1beta1.Metadata
 */
export const Metadata = new Metadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SnapshotItem$Type extends MessageType<SnapshotItem> {
    constructor() {
        super("cosmos.base.snapshots.v1beta1.SnapshotItem", [
            { no: 1, name: "store", kind: "message", oneof: "item", T: () => SnapshotStoreItem },
            { no: 2, name: "iavl", kind: "message", oneof: "item", T: () => SnapshotIAVLItem, options: { "gogoproto.customname": "IAVL" } },
            { no: 3, name: "extension", kind: "message", oneof: "item", T: () => SnapshotExtensionMeta },
            { no: 4, name: "extension_payload", kind: "message", oneof: "item", T: () => SnapshotExtensionPayload },
            { no: 5, name: "kv", kind: "message", oneof: "item", T: () => SnapshotKVItem, options: { "gogoproto.customname": "KV" } },
            { no: 6, name: "schema", kind: "message", oneof: "item", T: () => SnapshotSchema }
        ]);
    }
    create(value?: PartialMessage<SnapshotItem>): SnapshotItem {
        const message = { item: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SnapshotItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SnapshotItem): SnapshotItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.base.snapshots.v1beta1.SnapshotStoreItem store */ 1:
                    message.item = {
                        oneofKind: "store",
                        store: SnapshotStoreItem.internalBinaryRead(reader, reader.uint32(), options, (message.item as any).store)
                    };
                    break;
                case /* cosmos.base.snapshots.v1beta1.SnapshotIAVLItem iavl */ 2:
                    message.item = {
                        oneofKind: "iavl",
                        iavl: SnapshotIAVLItem.internalBinaryRead(reader, reader.uint32(), options, (message.item as any).iavl)
                    };
                    break;
                case /* cosmos.base.snapshots.v1beta1.SnapshotExtensionMeta extension */ 3:
                    message.item = {
                        oneofKind: "extension",
                        extension: SnapshotExtensionMeta.internalBinaryRead(reader, reader.uint32(), options, (message.item as any).extension)
                    };
                    break;
                case /* cosmos.base.snapshots.v1beta1.SnapshotExtensionPayload extension_payload */ 4:
                    message.item = {
                        oneofKind: "extensionPayload",
                        extensionPayload: SnapshotExtensionPayload.internalBinaryRead(reader, reader.uint32(), options, (message.item as any).extensionPayload)
                    };
                    break;
                case /* cosmos.base.snapshots.v1beta1.SnapshotKVItem kv */ 5:
                    message.item = {
                        oneofKind: "kv",
                        kv: SnapshotKVItem.internalBinaryRead(reader, reader.uint32(), options, (message.item as any).kv)
                    };
                    break;
                case /* cosmos.base.snapshots.v1beta1.SnapshotSchema schema */ 6:
                    message.item = {
                        oneofKind: "schema",
                        schema: SnapshotSchema.internalBinaryRead(reader, reader.uint32(), options, (message.item as any).schema)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SnapshotItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.base.snapshots.v1beta1.SnapshotStoreItem store = 1; */
        if (message.item.oneofKind === "store")
            SnapshotStoreItem.internalBinaryWrite(message.item.store, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.snapshots.v1beta1.SnapshotIAVLItem iavl = 2; */
        if (message.item.oneofKind === "iavl")
            SnapshotIAVLItem.internalBinaryWrite(message.item.iavl, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.snapshots.v1beta1.SnapshotExtensionMeta extension = 3; */
        if (message.item.oneofKind === "extension")
            SnapshotExtensionMeta.internalBinaryWrite(message.item.extension, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.snapshots.v1beta1.SnapshotExtensionPayload extension_payload = 4; */
        if (message.item.oneofKind === "extensionPayload")
            SnapshotExtensionPayload.internalBinaryWrite(message.item.extensionPayload, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.snapshots.v1beta1.SnapshotKVItem kv = 5; */
        if (message.item.oneofKind === "kv")
            SnapshotKVItem.internalBinaryWrite(message.item.kv, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.snapshots.v1beta1.SnapshotSchema schema = 6; */
        if (message.item.oneofKind === "schema")
            SnapshotSchema.internalBinaryWrite(message.item.schema, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.snapshots.v1beta1.SnapshotItem
 */
export const SnapshotItem = new SnapshotItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SnapshotStoreItem$Type extends MessageType<SnapshotStoreItem> {
    constructor() {
        super("cosmos.base.snapshots.v1beta1.SnapshotStoreItem", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SnapshotStoreItem>): SnapshotStoreItem {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SnapshotStoreItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SnapshotStoreItem): SnapshotStoreItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SnapshotStoreItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.snapshots.v1beta1.SnapshotStoreItem
 */
export const SnapshotStoreItem = new SnapshotStoreItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SnapshotIAVLItem$Type extends MessageType<SnapshotIAVLItem> {
    constructor() {
        super("cosmos.base.snapshots.v1beta1.SnapshotIAVLItem", [
            { no: 1, name: "key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "version", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "height", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SnapshotIAVLItem>): SnapshotIAVLItem {
        const message = { key: new Uint8Array(0), value: new Uint8Array(0), version: 0n, height: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SnapshotIAVLItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SnapshotIAVLItem): SnapshotIAVLItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes key */ 1:
                    message.key = reader.bytes();
                    break;
                case /* bytes value */ 2:
                    message.value = reader.bytes();
                    break;
                case /* int64 version */ 3:
                    message.version = reader.int64().toBigInt();
                    break;
                case /* int32 height */ 4:
                    message.height = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SnapshotIAVLItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes key = 1; */
        if (message.key.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.key);
        /* bytes value = 2; */
        if (message.value.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.value);
        /* int64 version = 3; */
        if (message.version !== 0n)
            writer.tag(3, WireType.Varint).int64(message.version);
        /* int32 height = 4; */
        if (message.height !== 0)
            writer.tag(4, WireType.Varint).int32(message.height);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.snapshots.v1beta1.SnapshotIAVLItem
 */
export const SnapshotIAVLItem = new SnapshotIAVLItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SnapshotExtensionMeta$Type extends MessageType<SnapshotExtensionMeta> {
    constructor() {
        super("cosmos.base.snapshots.v1beta1.SnapshotExtensionMeta", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "format", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SnapshotExtensionMeta>): SnapshotExtensionMeta {
        const message = { name: "", format: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SnapshotExtensionMeta>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SnapshotExtensionMeta): SnapshotExtensionMeta {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* uint32 format */ 2:
                    message.format = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SnapshotExtensionMeta, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* uint32 format = 2; */
        if (message.format !== 0)
            writer.tag(2, WireType.Varint).uint32(message.format);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.snapshots.v1beta1.SnapshotExtensionMeta
 */
export const SnapshotExtensionMeta = new SnapshotExtensionMeta$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SnapshotExtensionPayload$Type extends MessageType<SnapshotExtensionPayload> {
    constructor() {
        super("cosmos.base.snapshots.v1beta1.SnapshotExtensionPayload", [
            { no: 1, name: "payload", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<SnapshotExtensionPayload>): SnapshotExtensionPayload {
        const message = { payload: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SnapshotExtensionPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SnapshotExtensionPayload): SnapshotExtensionPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes payload */ 1:
                    message.payload = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SnapshotExtensionPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes payload = 1; */
        if (message.payload.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.payload);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.snapshots.v1beta1.SnapshotExtensionPayload
 */
export const SnapshotExtensionPayload = new SnapshotExtensionPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SnapshotKVItem$Type extends MessageType<SnapshotKVItem> {
    constructor() {
        super("cosmos.base.snapshots.v1beta1.SnapshotKVItem", [
            { no: 1, name: "key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<SnapshotKVItem>): SnapshotKVItem {
        const message = { key: new Uint8Array(0), value: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SnapshotKVItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SnapshotKVItem): SnapshotKVItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes key */ 1:
                    message.key = reader.bytes();
                    break;
                case /* bytes value */ 2:
                    message.value = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SnapshotKVItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes key = 1; */
        if (message.key.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.key);
        /* bytes value = 2; */
        if (message.value.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.snapshots.v1beta1.SnapshotKVItem
 */
export const SnapshotKVItem = new SnapshotKVItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SnapshotSchema$Type extends MessageType<SnapshotSchema> {
    constructor() {
        super("cosmos.base.snapshots.v1beta1.SnapshotSchema", [
            { no: 1, name: "keys", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<SnapshotSchema>): SnapshotSchema {
        const message = { keys: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SnapshotSchema>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SnapshotSchema): SnapshotSchema {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bytes keys */ 1:
                    message.keys.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SnapshotSchema, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bytes keys = 1; */
        for (let i = 0; i < message.keys.length; i++)
            writer.tag(1, WireType.LengthDelimited).bytes(message.keys[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.base.snapshots.v1beta1.SnapshotSchema
 */
export const SnapshotSchema = new SnapshotSchema$Type();
