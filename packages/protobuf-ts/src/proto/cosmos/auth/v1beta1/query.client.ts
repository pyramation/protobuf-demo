// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "cosmos/auth/v1beta1/query.proto" (package "cosmos.auth.v1beta1", syntax proto3),// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Query } from "./query";
import type { AddressStringToBytesResponse } from "./query";
import type { AddressStringToBytesRequest } from "./query";
import type { AddressBytesToStringResponse } from "./query";
import type { AddressBytesToStringRequest } from "./query";
import type { Bech32PrefixResponse } from "./query";
import type { Bech32PrefixRequest } from "./query";
import type { QueryModuleAccountsResponse } from "./query";
import type { QueryModuleAccountsRequest } from "./query";
import type { QueryParamsResponse } from "./query";
import type { QueryParamsRequest } from "./query";
import type { QueryAccountResponse } from "./query";
import type { QueryAccountRequest } from "./query";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { QueryAccountsResponse } from "./query";
import type { QueryAccountsRequest } from "./query";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service cosmos.auth.v1beta1.Query
 */
export interface IQueryClient {
    /**
     * Accounts returns all the existing accounts
     *
     * Since: cosmos-sdk 0.43
     *
     * @generated from protobuf rpc: Accounts(cosmos.auth.v1beta1.QueryAccountsRequest) returns (cosmos.auth.v1beta1.QueryAccountsResponse);
     */
    accounts(input: QueryAccountsRequest, options?: RpcOptions): UnaryCall<QueryAccountsRequest, QueryAccountsResponse>;
    /**
     * Account returns account details based on address.
     *
     * @generated from protobuf rpc: Account(cosmos.auth.v1beta1.QueryAccountRequest) returns (cosmos.auth.v1beta1.QueryAccountResponse);
     */
    account(input: QueryAccountRequest, options?: RpcOptions): UnaryCall<QueryAccountRequest, QueryAccountResponse>;
    /**
     * Params queries all parameters.
     *
     * @generated from protobuf rpc: Params(cosmos.auth.v1beta1.QueryParamsRequest) returns (cosmos.auth.v1beta1.QueryParamsResponse);
     */
    params(input: QueryParamsRequest, options?: RpcOptions): UnaryCall<QueryParamsRequest, QueryParamsResponse>;
    /**
     * ModuleAccounts returns all the existing module accounts.
     *
     * @generated from protobuf rpc: ModuleAccounts(cosmos.auth.v1beta1.QueryModuleAccountsRequest) returns (cosmos.auth.v1beta1.QueryModuleAccountsResponse);
     */
    moduleAccounts(input: QueryModuleAccountsRequest, options?: RpcOptions): UnaryCall<QueryModuleAccountsRequest, QueryModuleAccountsResponse>;
    /**
     * Bech32 queries bech32Prefix
     *
     * @generated from protobuf rpc: Bech32Prefix(cosmos.auth.v1beta1.Bech32PrefixRequest) returns (cosmos.auth.v1beta1.Bech32PrefixResponse);
     */
    bech32Prefix(input: Bech32PrefixRequest, options?: RpcOptions): UnaryCall<Bech32PrefixRequest, Bech32PrefixResponse>;
    /**
     * AddressBytesToString converts Account Address bytes to string
     *
     * @generated from protobuf rpc: AddressBytesToString(cosmos.auth.v1beta1.AddressBytesToStringRequest) returns (cosmos.auth.v1beta1.AddressBytesToStringResponse);
     */
    addressBytesToString(input: AddressBytesToStringRequest, options?: RpcOptions): UnaryCall<AddressBytesToStringRequest, AddressBytesToStringResponse>;
    /**
     * AddressStringToBytes converts Address string to bytes
     *
     * @generated from protobuf rpc: AddressStringToBytes(cosmos.auth.v1beta1.AddressStringToBytesRequest) returns (cosmos.auth.v1beta1.AddressStringToBytesResponse);
     */
    addressStringToBytes(input: AddressStringToBytesRequest, options?: RpcOptions): UnaryCall<AddressStringToBytesRequest, AddressStringToBytesResponse>;
}
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service cosmos.auth.v1beta1.Query
 */
export class QueryClient implements IQueryClient, ServiceInfo {
    typeName = Query.typeName;
    methods = Query.methods;
    options = Query.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Accounts returns all the existing accounts
     *
     * Since: cosmos-sdk 0.43
     *
     * @generated from protobuf rpc: Accounts(cosmos.auth.v1beta1.QueryAccountsRequest) returns (cosmos.auth.v1beta1.QueryAccountsResponse);
     */
    accounts(input: QueryAccountsRequest, options?: RpcOptions): UnaryCall<QueryAccountsRequest, QueryAccountsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryAccountsRequest, QueryAccountsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Account returns account details based on address.
     *
     * @generated from protobuf rpc: Account(cosmos.auth.v1beta1.QueryAccountRequest) returns (cosmos.auth.v1beta1.QueryAccountResponse);
     */
    account(input: QueryAccountRequest, options?: RpcOptions): UnaryCall<QueryAccountRequest, QueryAccountResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryAccountRequest, QueryAccountResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Params queries all parameters.
     *
     * @generated from protobuf rpc: Params(cosmos.auth.v1beta1.QueryParamsRequest) returns (cosmos.auth.v1beta1.QueryParamsResponse);
     */
    params(input: QueryParamsRequest, options?: RpcOptions): UnaryCall<QueryParamsRequest, QueryParamsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryParamsRequest, QueryParamsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ModuleAccounts returns all the existing module accounts.
     *
     * @generated from protobuf rpc: ModuleAccounts(cosmos.auth.v1beta1.QueryModuleAccountsRequest) returns (cosmos.auth.v1beta1.QueryModuleAccountsResponse);
     */
    moduleAccounts(input: QueryModuleAccountsRequest, options?: RpcOptions): UnaryCall<QueryModuleAccountsRequest, QueryModuleAccountsResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryModuleAccountsRequest, QueryModuleAccountsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Bech32 queries bech32Prefix
     *
     * @generated from protobuf rpc: Bech32Prefix(cosmos.auth.v1beta1.Bech32PrefixRequest) returns (cosmos.auth.v1beta1.Bech32PrefixResponse);
     */
    bech32Prefix(input: Bech32PrefixRequest, options?: RpcOptions): UnaryCall<Bech32PrefixRequest, Bech32PrefixResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<Bech32PrefixRequest, Bech32PrefixResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * AddressBytesToString converts Account Address bytes to string
     *
     * @generated from protobuf rpc: AddressBytesToString(cosmos.auth.v1beta1.AddressBytesToStringRequest) returns (cosmos.auth.v1beta1.AddressBytesToStringResponse);
     */
    addressBytesToString(input: AddressBytesToStringRequest, options?: RpcOptions): UnaryCall<AddressBytesToStringRequest, AddressBytesToStringResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddressBytesToStringRequest, AddressBytesToStringResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * AddressStringToBytes converts Address string to bytes
     *
     * @generated from protobuf rpc: AddressStringToBytes(cosmos.auth.v1beta1.AddressStringToBytesRequest) returns (cosmos.auth.v1beta1.AddressStringToBytesResponse);
     */
    addressStringToBytes(input: AddressStringToBytesRequest, options?: RpcOptions): UnaryCall<AddressStringToBytesRequest, AddressStringToBytesResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddressStringToBytesRequest, AddressStringToBytesResponse>("unary", this._transport, method, opt, input);
    }
}
