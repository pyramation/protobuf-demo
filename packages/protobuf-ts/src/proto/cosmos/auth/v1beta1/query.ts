// @generated by protobuf-ts 2.4.0,// @generated from protobuf file "cosmos/auth/v1beta1/query.proto" (package "cosmos.auth.v1beta1", syntax proto3),// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Params } from "./auth";
import { PageResponse } from "../../base/query/v1beta1/pagination";
import { Any } from "../../../google/protobuf/any";
import { PageRequest } from "../../base/query/v1beta1/pagination";
/**
 * QueryAccountsRequest is the request type for the Query/Accounts RPC method.
 *
 * Since: cosmos-sdk 0.43
 *
 * @generated from protobuf message cosmos.auth.v1beta1.QueryAccountsRequest
 */
export interface QueryAccountsRequest {
    /**
     * pagination defines an optional pagination for the request.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
     */
    pagination?: PageRequest;
}
/**
 * QueryAccountsResponse is the response type for the Query/Accounts RPC method.
 *
 * Since: cosmos-sdk 0.43
 *
 * @generated from protobuf message cosmos.auth.v1beta1.QueryAccountsResponse
 */
export interface QueryAccountsResponse {
    /**
     * accounts are the existing accounts
     *
     * @generated from protobuf field: repeated google.protobuf.Any accounts = 1;
     */
    accounts: Any[];
    /**
     * pagination defines the pagination in the response.
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
     */
    pagination?: PageResponse;
}
/**
 * QueryAccountRequest is the request type for the Query/Account RPC method.
 *
 * @generated from protobuf message cosmos.auth.v1beta1.QueryAccountRequest
 */
export interface QueryAccountRequest {
    /**
     * address defines the address to query for.
     *
     * @generated from protobuf field: string address = 1;
     */
    address: string;
}
/**
 * QueryModuleAccountsRequest is the request type for the Query/ModuleAccounts RPC method.
 *
 * @generated from protobuf message cosmos.auth.v1beta1.QueryModuleAccountsRequest
 */
export interface QueryModuleAccountsRequest {
}
/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from protobuf message cosmos.auth.v1beta1.QueryParamsResponse
 */
export interface QueryParamsResponse {
    /**
     * params defines the parameters of the module.
     *
     * @generated from protobuf field: cosmos.auth.v1beta1.Params params = 1;
     */
    params?: Params;
}
/**
 * QueryAccountResponse is the response type for the Query/Account RPC method.
 *
 * @generated from protobuf message cosmos.auth.v1beta1.QueryAccountResponse
 */
export interface QueryAccountResponse {
    /**
     * account defines the account of the corresponding address.
     *
     * @generated from protobuf field: google.protobuf.Any account = 1;
     */
    account?: Any;
}
/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from protobuf message cosmos.auth.v1beta1.QueryParamsRequest
 */
export interface QueryParamsRequest {
}
/**
 * QueryModuleAccountsResponse is the response type for the Query/ModuleAccounts RPC method.
 *
 * @generated from protobuf message cosmos.auth.v1beta1.QueryModuleAccountsResponse
 */
export interface QueryModuleAccountsResponse {
    /**
     * @generated from protobuf field: repeated google.protobuf.Any accounts = 1;
     */
    accounts: Any[];
}
/**
 * Bech32PrefixRequest is the request type for Bech32Prefix rpc method
 *
 * @generated from protobuf message cosmos.auth.v1beta1.Bech32PrefixRequest
 */
export interface Bech32PrefixRequest {
}
/**
 * Bech32PrefixResponse is the response type for Bech32Prefix rpc method
 *
 * @generated from protobuf message cosmos.auth.v1beta1.Bech32PrefixResponse
 */
export interface Bech32PrefixResponse {
    /**
     * @generated from protobuf field: string bech32_prefix = 1;
     */
    bech32Prefix: string;
}
/**
 * AddressBytesToStringRequest is the request type for AddressString rpc method
 *
 * @generated from protobuf message cosmos.auth.v1beta1.AddressBytesToStringRequest
 */
export interface AddressBytesToStringRequest {
    /**
     * @generated from protobuf field: bytes address_bytes = 1;
     */
    addressBytes: Uint8Array;
}
/**
 * AddressBytesToStringResponse is the response type for AddressString rpc method
 *
 * @generated from protobuf message cosmos.auth.v1beta1.AddressBytesToStringResponse
 */
export interface AddressBytesToStringResponse {
    /**
     * @generated from protobuf field: string address_string = 1;
     */
    addressString: string;
}
/**
 * AddressStringToBytesRequest is the request type for AccountBytes rpc method
 *
 * @generated from protobuf message cosmos.auth.v1beta1.AddressStringToBytesRequest
 */
export interface AddressStringToBytesRequest {
    /**
     * @generated from protobuf field: string address_string = 1;
     */
    addressString: string;
}
/**
 * AddressStringToBytesResponse is the response type for AddressBytes rpc method
 *
 * @generated from protobuf message cosmos.auth.v1beta1.AddressStringToBytesResponse
 */
export interface AddressStringToBytesResponse {
    /**
     * @generated from protobuf field: bytes address_bytes = 1;
     */
    addressBytes: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class QueryAccountsRequest$Type extends MessageType<QueryAccountsRequest> {
    constructor() {
        super("cosmos.auth.v1beta1.QueryAccountsRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value?: PartialMessage<QueryAccountsRequest>): QueryAccountsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAccountsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAccountsRequest): QueryAccountsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 1:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryAccountsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.base.query.v1beta1.PageRequest pagination = 1; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.auth.v1beta1.QueryAccountsRequest
 */
export const QueryAccountsRequest = new QueryAccountsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAccountsResponse$Type extends MessageType<QueryAccountsResponse> {
    constructor() {
        super("cosmos.auth.v1beta1.QueryAccountsResponse", [
            { no: 1, name: "accounts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Any, options: { "cosmos_proto.accepts_interface": "AccountI" } },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value?: PartialMessage<QueryAccountsResponse>): QueryAccountsResponse {
        const message = { accounts: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAccountsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAccountsResponse): QueryAccountsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.protobuf.Any accounts */ 1:
                    message.accounts.push(Any.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryAccountsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.protobuf.Any accounts = 1; */
        for (let i = 0; i < message.accounts.length; i++)
            Any.internalBinaryWrite(message.accounts[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.auth.v1beta1.QueryAccountsResponse
 */
export const QueryAccountsResponse = new QueryAccountsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAccountRequest$Type extends MessageType<QueryAccountRequest> {
    constructor() {
        super("cosmos.auth.v1beta1.QueryAccountRequest", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "cosmos_proto.scalar": "cosmos.AddressString" } }
        ], { "gogoproto.goproto_getters": false, "gogoproto.equal": false });
    }
    create(value?: PartialMessage<QueryAccountRequest>): QueryAccountRequest {
        const message = { address: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAccountRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAccountRequest): QueryAccountRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryAccountRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.auth.v1beta1.QueryAccountRequest
 */
export const QueryAccountRequest = new QueryAccountRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryModuleAccountsRequest$Type extends MessageType<QueryModuleAccountsRequest> {
    constructor() {
        super("cosmos.auth.v1beta1.QueryModuleAccountsRequest", []);
    }
    create(value?: PartialMessage<QueryModuleAccountsRequest>): QueryModuleAccountsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryModuleAccountsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryModuleAccountsRequest): QueryModuleAccountsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryModuleAccountsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.auth.v1beta1.QueryModuleAccountsRequest
 */
export const QueryModuleAccountsRequest = new QueryModuleAccountsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryParamsResponse$Type extends MessageType<QueryParamsResponse> {
    constructor() {
        super("cosmos.auth.v1beta1.QueryParamsResponse", [
            { no: 1, name: "params", kind: "message", T: () => Params, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<QueryParamsResponse>): QueryParamsResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryParamsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryParamsResponse): QueryParamsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.auth.v1beta1.Params params */ 1:
                    message.params = Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryParamsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.auth.v1beta1.Params params = 1; */
        if (message.params)
            Params.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.auth.v1beta1.QueryParamsResponse
 */
export const QueryParamsResponse = new QueryParamsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAccountResponse$Type extends MessageType<QueryAccountResponse> {
    constructor() {
        super("cosmos.auth.v1beta1.QueryAccountResponse", [
            { no: 1, name: "account", kind: "message", T: () => Any, options: { "cosmos_proto.accepts_interface": "AccountI" } }
        ]);
    }
    create(value?: PartialMessage<QueryAccountResponse>): QueryAccountResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAccountResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAccountResponse): QueryAccountResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Any account */ 1:
                    message.account = Any.internalBinaryRead(reader, reader.uint32(), options, message.account);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryAccountResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Any account = 1; */
        if (message.account)
            Any.internalBinaryWrite(message.account, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.auth.v1beta1.QueryAccountResponse
 */
export const QueryAccountResponse = new QueryAccountResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryParamsRequest$Type extends MessageType<QueryParamsRequest> {
    constructor() {
        super("cosmos.auth.v1beta1.QueryParamsRequest", []);
    }
    create(value?: PartialMessage<QueryParamsRequest>): QueryParamsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryParamsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryParamsRequest): QueryParamsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryParamsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.auth.v1beta1.QueryParamsRequest
 */
export const QueryParamsRequest = new QueryParamsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryModuleAccountsResponse$Type extends MessageType<QueryModuleAccountsResponse> {
    constructor() {
        super("cosmos.auth.v1beta1.QueryModuleAccountsResponse", [
            { no: 1, name: "accounts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Any, options: { "cosmos_proto.accepts_interface": "ModuleAccountI" } }
        ]);
    }
    create(value?: PartialMessage<QueryModuleAccountsResponse>): QueryModuleAccountsResponse {
        const message = { accounts: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryModuleAccountsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryModuleAccountsResponse): QueryModuleAccountsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.protobuf.Any accounts */ 1:
                    message.accounts.push(Any.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryModuleAccountsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.protobuf.Any accounts = 1; */
        for (let i = 0; i < message.accounts.length; i++)
            Any.internalBinaryWrite(message.accounts[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.auth.v1beta1.QueryModuleAccountsResponse
 */
export const QueryModuleAccountsResponse = new QueryModuleAccountsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Bech32PrefixRequest$Type extends MessageType<Bech32PrefixRequest> {
    constructor() {
        super("cosmos.auth.v1beta1.Bech32PrefixRequest", []);
    }
    create(value?: PartialMessage<Bech32PrefixRequest>): Bech32PrefixRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Bech32PrefixRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Bech32PrefixRequest): Bech32PrefixRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Bech32PrefixRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.auth.v1beta1.Bech32PrefixRequest
 */
export const Bech32PrefixRequest = new Bech32PrefixRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Bech32PrefixResponse$Type extends MessageType<Bech32PrefixResponse> {
    constructor() {
        super("cosmos.auth.v1beta1.Bech32PrefixResponse", [
            { no: 1, name: "bech32_prefix", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Bech32PrefixResponse>): Bech32PrefixResponse {
        const message = { bech32Prefix: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Bech32PrefixResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Bech32PrefixResponse): Bech32PrefixResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string bech32_prefix */ 1:
                    message.bech32Prefix = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Bech32PrefixResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string bech32_prefix = 1; */
        if (message.bech32Prefix !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.bech32Prefix);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.auth.v1beta1.Bech32PrefixResponse
 */
export const Bech32PrefixResponse = new Bech32PrefixResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddressBytesToStringRequest$Type extends MessageType<AddressBytesToStringRequest> {
    constructor() {
        super("cosmos.auth.v1beta1.AddressBytesToStringRequest", [
            { no: 1, name: "address_bytes", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<AddressBytesToStringRequest>): AddressBytesToStringRequest {
        const message = { addressBytes: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddressBytesToStringRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddressBytesToStringRequest): AddressBytesToStringRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes address_bytes */ 1:
                    message.addressBytes = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddressBytesToStringRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes address_bytes = 1; */
        if (message.addressBytes.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.addressBytes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.auth.v1beta1.AddressBytesToStringRequest
 */
export const AddressBytesToStringRequest = new AddressBytesToStringRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddressBytesToStringResponse$Type extends MessageType<AddressBytesToStringResponse> {
    constructor() {
        super("cosmos.auth.v1beta1.AddressBytesToStringResponse", [
            { no: 1, name: "address_string", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddressBytesToStringResponse>): AddressBytesToStringResponse {
        const message = { addressString: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddressBytesToStringResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddressBytesToStringResponse): AddressBytesToStringResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address_string */ 1:
                    message.addressString = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddressBytesToStringResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address_string = 1; */
        if (message.addressString !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.addressString);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.auth.v1beta1.AddressBytesToStringResponse
 */
export const AddressBytesToStringResponse = new AddressBytesToStringResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddressStringToBytesRequest$Type extends MessageType<AddressStringToBytesRequest> {
    constructor() {
        super("cosmos.auth.v1beta1.AddressStringToBytesRequest", [
            { no: 1, name: "address_string", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddressStringToBytesRequest>): AddressStringToBytesRequest {
        const message = { addressString: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddressStringToBytesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddressStringToBytesRequest): AddressStringToBytesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address_string */ 1:
                    message.addressString = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddressStringToBytesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address_string = 1; */
        if (message.addressString !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.addressString);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.auth.v1beta1.AddressStringToBytesRequest
 */
export const AddressStringToBytesRequest = new AddressStringToBytesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddressStringToBytesResponse$Type extends MessageType<AddressStringToBytesResponse> {
    constructor() {
        super("cosmos.auth.v1beta1.AddressStringToBytesResponse", [
            { no: 1, name: "address_bytes", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<AddressStringToBytesResponse>): AddressStringToBytesResponse {
        const message = { addressBytes: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddressStringToBytesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddressStringToBytesResponse): AddressStringToBytesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes address_bytes */ 1:
                    message.addressBytes = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddressStringToBytesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes address_bytes = 1; */
        if (message.addressBytes.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.addressBytes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message cosmos.auth.v1beta1.AddressStringToBytesResponse
 */
export const AddressStringToBytesResponse = new AddressStringToBytesResponse$Type();
/**
 * @generated ServiceType for protobuf service cosmos.auth.v1beta1.Query
 */
export const Query = new ServiceType("cosmos.auth.v1beta1.Query", [
    { name: "Accounts", options: { "google.api.http": { get: "/cosmos/auth/v1beta1/accounts" } }, I: QueryAccountsRequest, O: QueryAccountsResponse },
    { name: "Account", options: { "google.api.http": { get: "/cosmos/auth/v1beta1/accounts/{address}" } }, I: QueryAccountRequest, O: QueryAccountResponse },
    { name: "Params", options: { "google.api.http": { get: "/cosmos/auth/v1beta1/params" } }, I: QueryParamsRequest, O: QueryParamsResponse },
    { name: "ModuleAccounts", options: { "google.api.http": { get: "/cosmos/auth/v1beta1/module_accounts" } }, I: QueryModuleAccountsRequest, O: QueryModuleAccountsResponse },
    { name: "Bech32Prefix", options: { "google.api.http": { get: "/cosmos/auth/v1beta1/bech32" } }, I: Bech32PrefixRequest, O: Bech32PrefixResponse },
    { name: "AddressBytesToString", options: { "google.api.http": { get: "/cosmos/auth/v1beta1/bech32/{address_bytes}" } }, I: AddressBytesToStringRequest, O: AddressBytesToStringResponse },
    { name: "AddressStringToBytes", options: { "google.api.http": { get: "/cosmos/auth/v1beta1/bech32/{address_string}" } }, I: AddressStringToBytesRequest, O: AddressStringToBytesResponse }
]);
